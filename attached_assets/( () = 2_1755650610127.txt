( () => {
    "use strict";
    function e(e, t) {
        if (!e)
            throw new Error(t)
    }
    const t = 34028234663852886e22
      , n = -34028234663852886e22
      , a = 4294967295
      , r = 2147483647
      , s = -2147483648;
    function i(e) {
        if ("number" != typeof e)
            throw new Error("invalid int 32: " + typeof e);
        if (!Number.isInteger(e) || e > r || e < s)
            throw new Error("invalid int 32: " + e)
    }
    function o(e) {
        if ("number" != typeof e)
            throw new Error("invalid uint 32: " + typeof e);
        if (!Number.isInteger(e) || e > a || e < 0)
            throw new Error("invalid uint 32: " + e)
    }
    function m(e) {
        if ("number" != typeof e)
            throw new Error("invalid float 32: " + typeof e);
        if (Number.isFinite(e) && (e > t || e < n))
            throw new Error("invalid float 32: " + e)
    }
    const c = Symbol("@bufbuild/protobuf/enum-type");
    function u(e, t, n, a) {
        e[c] = l(t, n.map((t => ({
            no: t.no,
            name: t.name,
            localName: e[t.no]
        }))))
    }
    function l(e, t, n) {
        const a = Object.create(null)
          , r = Object.create(null)
          , s = [];
        for (const e of t) {
            const t = _(e);
            s.push(t),
            a[e.name] = t,
            r[e.no] = t
        }
        return {
            typeName: e,
            values: s,
            findName: e => a[e],
            findNumber: e => r[e]
        }
    }
    function _(e) {
        return "localName"in e ? e : Object.assign(Object.assign({}, e), {
            localName: e.name
        })
    }
    class E {
        equals(e) {
            return this.getType().runtime.util.equals(this.getType(), this, e)
        }
        clone() {
            return this.getType().runtime.util.clone(this)
        }
        fromBinary(e, t) {
            const n = this.getType().runtime.bin
              , a = n.makeReadOptions(t);
            return n.readMessage(this, a.readerFactory(e), e.byteLength, a),
            this
        }
        fromJson(e, t) {
            const n = this.getType()
              , a = n.runtime.json
              , r = a.makeReadOptions(t);
            return a.readMessage(n, e, r, this),
            this
        }
        fromJsonString(e, t) {
            let n;
            try {
                n = JSON.parse(e)
            } catch (e) {
                throw new Error(`cannot decode ${this.getType().typeName} from JSON: ${einstanceof Error ? e.message : String(e)}`)
            }
            return this.fromJson(n, t)
        }
        toBinary(e) {
            const t = this.getType().runtime.bin
              , n = t.makeWriteOptions(e)
              , a = n.writerFactory();
            return t.writeMessage(this, a, n),
            a.finish()
        }
        toJson(e) {
            const t = this.getType().runtime.json
              , n = t.makeWriteOptions(e);
            return t.writeMessage(this, n)
        }
        toJsonString(e) {
            var t;
            const n = this.toJson(e);
            return JSON.stringify(n, null, null !== (t = null == e ? void 0 : e.prettySpaces) && void 0 !== t ? t : 0)
        }
        toJSON() {
            return this.toJson({
                emitDefaultValues: !0
            })
        }
        getType() {
            return Object.getPrototypeOf(this).constructor
        }
    }
    function d() {
        let e = 0
          , t = 0;
        for (let n = 0; n < 28; n += 7) {
            let a = this.buf[this.pos++];
            if (e |= (127 & a) << n,
            0 == (128 & a))
                return this.assertBounds(),
                [e, t]
        }
        let n = this.buf[this.pos++];
        if (e |= (15 & n) << 28,
        t = (112 & n) >> 4,
        0 == (128 & n))
            return this.assertBounds(),
            [e, t];
        for (let n = 3; n <= 31; n += 7) {
            let a = this.buf[this.pos++];
            if (t |= (127 & a) << n,
            0 == (128 & a))
                return this.assertBounds(),
                [e, t]
        }
        throw new Error("invalid varint")
    }
    function T(e, t, n) {
        for (let a = 0; a < 28; a += 7) {
            const r = e >>> a
              , s = !(r >>> 7 == 0 && 0 == t)
              , i = 255 & (s ? 128 | r : r);
            if (n.push(i),
            !s)
                return
        }
        const a = e >>> 28 & 15 | (7 & t) << 4
          , r = !(t >> 3 == 0);
        if (n.push(255 & (r ? 128 | a : a)),
        r) {
            for (let e = 3; e < 31; e += 7) {
                const a = t >>> e
                  , r = !(a >>> 7 == 0)
                  , s = 255 & (r ? 128 | a : a);
                if (n.push(s),
                !r)
                    return
            }
            n.push(t >>> 31 & 1)
        }
    }
    const f = 4294967296;
    function p(e) {
        const t = "-" === e[0];
        t && (e = e.slice(1));
        const n = 1e6;
        let a = 0
          , r = 0;
        function s(t, s) {
            const i = Number(e.slice(t, s));
            r *= n,
            a = a * n + i,
            a >= f && (r += a / f | 0,
            a %= f)
        }
        return s(-24, -18),
        s(-18, -12),
        s(-12, -6),
        s(-6),
        t ? C(a, r) : N(a, r)
    }
    function S(e, t) {
        if (({lo: e, hi: t} = function(e, t) {
            return {
                lo: e >>> 0,
                hi: t >>> 0
            }
        }(e, t)),
        t <= 2097151)
            return String(f * t + e);
        const n = 16777215 & (e >>> 24 | t << 8)
          , a = t >> 16 & 65535;
        let r = (16777215 & e) + 6777216 * n + 6710656 * a
          , s = n + 8147497 * a
          , i = 2 * a;
        const o = 1e7;
        return r >= o && (s += Math.floor(r / o),
        r %= o),
        s >= o && (i += Math.floor(s / o),
        s %= o),
        i.toString() + I(s) + I(r)
    }
    function N(e, t) {
        return {
            lo: 0 | e,
            hi: 0 | t
        }
    }
    function C(e, t) {
        return t = ~t,
        e ? e = 1 + ~e : t += 1,
        N(e, t)
    }
    const I = e => {
        const t = String(e);
        return "0000000".slice(t.length) + t
    }
    ;
    function g(e, t) {
        if (e >= 0) {
            for (; e > 127; )
                t.push(127 & e | 128),
                e >>>= 7;
            t.push(e)
        } else {
            for (let n = 0; n < 9; n++)
                t.push(127 & e | 128),
                e >>= 7;
            t.push(1)
        }
    }
    function O() {
        let e = this.buf[this.pos++]
          , t = 127 & e;
        if (0 == (128 & e))
            return this.assertBounds(),
            t;
        if (e = this.buf[this.pos++],
        t |= (127 & e) << 7,
        0 == (128 & e))
            return this.assertBounds(),
            t;
        if (e = this.buf[this.pos++],
        t |= (127 & e) << 14,
        0 == (128 & e))
            return this.assertBounds(),
            t;
        if (e = this.buf[this.pos++],
        t |= (127 & e) << 21,
        0 == (128 & e))
            return this.assertBounds(),
            t;
        e = this.buf[this.pos++],
        t |= (15 & e) << 28;
        for (let t = 5; 0 != (128 & e) && t < 10; t++)
            e = this.buf[this.pos++];
        if (0 != (128 & e))
            throw new Error("invalid varint");
        return this.assertBounds(),
        t >>> 0
    }
    const A = function() {
        const t = new DataView(new ArrayBuffer(8));
        if ("function" == typeof BigInt && "function" == typeof t.getBigInt64 && "function" == typeof t.getBigUint64 && "function" == typeof t.setBigInt64 && "function" == typeof t.setBigUint64) {
            const e = BigInt("-9223372036854775808")
              , n = BigInt("9223372036854775807")
              , a = BigInt("0")
              , r = BigInt("18446744073709551615");
            return {
                zero: BigInt(0),
                supported: !0,
                parse(t) {
                    const a = "bigint" == typeof t ? t : BigInt(t);
                    if (a > n || a < e)
                        throw new Error(`int64 invalid: ${t}`);
                    return a
                },
                uParse(e) {
                    const t = "bigint" == typeof e ? e : BigInt(e);
                    if (t > r || t < a)
                        throw new Error(`uint64 invalid: ${e}`);
                    return t
                },
                enc(e) {
                    return t.setBigInt64(0, this.parse(e), !0),
                    {
                        lo: t.getInt32(0, !0),
                        hi: t.getInt32(4, !0)
                    }
                },
                uEnc(e) {
                    return t.setBigInt64(0, this.uParse(e), !0),
                    {
                        lo: t.getInt32(0, !0),
                        hi: t.getInt32(4, !0)
                    }
                },
                dec: (e, n) => (t.setInt32(0, e, !0),
                t.setInt32(4, n, !0),
                t.getBigInt64(0, !0)),
                uDec: (e, n) => (t.setInt32(0, e, !0),
                t.setInt32(4, n, !0),
                t.getBigUint64(0, !0))
            }
        }
        const n = t => e(/^-?[0-9]+$/.test(t), `int64 invalid: ${t}`)
          , a = t => e(/^[0-9]+$/.test(t), `uint64 invalid: ${t}`);
        return {
            zero: "0",
            supported: !1,
            parse: e => ("string" != typeof e && (e = e.toString()),
            n(e),
            e),
            uParse: e => ("string" != typeof e && (e = e.toString()),
            a(e),
            e),
            enc: e => ("string" != typeof e && (e = e.toString()),
            n(e),
            p(e)),
            uEnc: e => ("string" != typeof e && (e = e.toString()),
            a(e),
            p(e)),
            dec: (e, t) => function(e, t) {
                let n = N(e, t);
                const a = 2147483648 & n.hi;
                a && (n = C(n.lo, n.hi));
                const r = S(n.lo, n.hi);
                return a ? "-" + r : r
            }(e, t),
            uDec: (e, t) => S(e, t)
        }
    }();
    var P, L;
    function R(e, t, n) {
        if (t === n)
            return !0;
        if (e == P.BYTES) {
            if (!(t instanceof Uint8Array && n instanceof Uint8Array))
                return !1;
            if (t.length !== n.length)
                return !1;
            for (let e = 0; e < t.length; e++)
                if (t[e] !== n[e])
                    return !1;
            return !0
        }
        switch (e) {
        case P.UINT64:
        case P.FIXED64:
        case P.INT64:
        case P.SFIXED64:
        case P.SINT64:
            return t == n
        }
        return !1
    }
    function y(e, t) {
        switch (e) {
        case P.BOOL:
            return !1;
        case P.UINT64:
        case P.FIXED64:
        case P.INT64:
        case P.SFIXED64:
        case P.SINT64:
            return 0 == t ? A.zero : "0";
        case P.DOUBLE:
        case P.FLOAT:
            return 0;
        case P.BYTES:
            return new Uint8Array(0);
        case P.STRING:
            return "";
        default:
            return 0
        }
    }
    function w(e, t) {
        switch (e) {
        case P.BOOL:
            return !1 === t;
        case P.STRING:
            return "" === t;
        case P.BYTES:
            return t instanceof Uint8Array && !t.byteLength;
        default:
            return 0 == t
        }
    }
    function k(e) {
        const t = e.field.localName
          , n = Object.create(null);
        return n[t] = function(e) {
            const t = e.field;
            if (t.repeated)
                return [];
            if (void 0 !== t.default)
                return t.default;
            switch (t.kind) {
            case "enum":
                return t.T.values[0].no;
            case "scalar":
                return y(t.T, t.L);
            case "message":
                const e = t.T
                  , n = new e;
                return e.fieldWrapper ? e.fieldWrapper.unwrapField(n) : n;
            case "map":
                throw "map fields are not allowed to be extensions"
            }
        }(e),
        [n, () => n[t]]
    }
    !function(e) {
        e[e.DOUBLE = 1] = "DOUBLE",
        e[e.FLOAT = 2] = "FLOAT",
        e[e.INT64 = 3] = "INT64",
        e[e.UINT64 = 4] = "UINT64",
        e[e.INT32 = 5] = "INT32",
        e[e.FIXED64 = 6] = "FIXED64",
        e[e.FIXED32 = 7] = "FIXED32",
        e[e.BOOL = 8] = "BOOL",
        e[e.STRING = 9] = "STRING",
        e[e.BYTES = 12] = "BYTES",
        e[e.UINT32 = 13] = "UINT32",
        e[e.SFIXED32 = 15] = "SFIXED32",
        e[e.SFIXED64 = 16] = "SFIXED64",
        e[e.SINT32 = 17] = "SINT32",
        e[e.SINT64 = 18] = "SINT64"
    }(P || (P = {})),
    function(e) {
        e[e.BIGINT = 0] = "BIGINT",
        e[e.STRING = 1] = "STRING"
    }(L || (L = {}));
    let D = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("")
      , J = [];
    for (let e = 0; e < D.length; e++)
        J[D[e].charCodeAt(0)] = e;
    J["-".charCodeAt(0)] = D.indexOf("+"),
    J["_".charCodeAt(0)] = D.indexOf("/");
    const M = {
        dec(e) {
            let t = 3 * e.length / 4;
            "=" == e[e.length - 2] ? t -= 2 : "=" == e[e.length - 1] && (t -= 1);
            let n, a = new Uint8Array(t), r = 0, s = 0, i = 0;
            for (let t = 0; t < e.length; t++) {
                if (n = J[e.charCodeAt(t)],
                void 0 === n)
                    switch (e[t]) {
                    case "=":
                        s = 0;
                    case "\n":
                    case "\r":
                    case "\t":
                    case " ":
                        continue;
                    default:
                        throw Error("invalid base64 string.")
                    }
                switch (s) {
                case 0:
                    i = n,
                    s = 1;
                    break;
                case 1:
                    a[r++] = i << 2 | (48 & n) >> 4,
                    i = n,
                    s = 2;
                    break;
                case 2:
                    a[r++] = (15 & i) << 4 | (60 & n) >> 2,
                    i = n,
                    s = 3;
                    break;
                case 3:
                    a[r++] = (3 & i) << 6 | n,
                    s = 0
                }
            }
            if (1 == s)
                throw Error("invalid base64 string.");
            return a.subarray(0, r)
        },
        enc(e) {
            let t, n = "", a = 0, r = 0;
            for (let s = 0; s < e.length; s++)
                switch (t = e[s],
                a) {
                case 0:
                    n += D[t >> 2],
                    r = (3 & t) << 4,
                    a = 1;
                    break;
                case 1:
                    n += D[r | t >> 4],
                    r = (15 & t) << 2,
                    a = 2;
                    break;
                case 2:
                    n += D[r | t >> 6],
                    n += D[63 & t],
                    a = 0
                }
            return a && (n += D[r],
            n += "=",
            1 == a && (n += "=")),
            n
        }
    };
    function U(e, t, n) {
        h(t, e);
        const a = t.runtime.bin.makeReadOptions(n)
          , r = function(e, t) {
            if (!t.repeated && ("enum" == t.kind || "scalar" == t.kind)) {
                for (let n = e.length - 1; n >= 0; --n)
                    if (e[n].no == t.no)
                        return [e[n]];
                return []
            }
            return e.filter((e => e.no === t.no))
        }(e.getType().runtime.bin.listUnknownFields(e), t.field)
          , [s,i] = k(t);
        for (const e of r)
            t.runtime.bin.readField(s, a.readerFactory(e.data), t.field, e.wireType, a);
        return i()
    }
    function x(e, t, n, a) {
        h(t, e);
        const r = t.runtime.bin.makeReadOptions(a)
          , s = t.runtime.bin.makeWriteOptions(a);
        if (B(e, t)) {
            const n = e.getType().runtime.bin.listUnknownFields(e).filter((e => e.no != t.field.no));
            e.getType().runtime.bin.discardUnknownFields(e);
            for (const t of n)
                e.getType().runtime.bin.onUnknownField(e, t.no, t.wireType, t.data)
        }
        const i = s.writerFactory();
        let o = t.field;
        o.opt || o.repeated || "enum" != o.kind && "scalar" != o.kind || (o = Object.assign(Object.assign({}, t.field), {
            opt: !0
        })),
        t.runtime.bin.writeField(o, n, i, s);
        const m = r.readerFactory(i.finish());
        for (; m.pos < m.len; ) {
            const [t,n] = m.tag()
              , a = m.skip(n);
            e.getType().runtime.bin.onUnknownField(e, t, n, a)
        }
    }
    function B(e, t) {
        const n = e.getType();
        return t.extendee.typeName === n.typeName && !!n.runtime.bin.listUnknownFields(e).find((e => e.no == t.field.no))
    }
    function h(t, n) {
        e(t.extendee.typeName == n.getType().typeName, `extension ${t.typeName} can only be applied to message ${t.extendee.typeName}`)
    }
    function F(e, t) {
        const n = e.localName;
        if (e.repeated)
            return t[n].length > 0;
        if (e.oneof)
            return t[e.oneof.localName].case === n;
        switch (e.kind) {
        case "enum":
        case "scalar":
            return e.opt || e.req ? void 0 !== t[n] : "enum" == e.kind ? t[n] !== e.T.values[0].no : !w(e.T, t[n]);
        case "message":
            return void 0 !== t[n];
        case "map":
            return Object.keys(t[n]).length > 0
        }
    }
    function b(e, t) {
        const n = e.localName
          , a = !e.opt && !e.req;
        if (e.repeated)
            t[n] = [];
        else if (e.oneof)
            t[e.oneof.localName] = {
                case: void 0
            };
        else
            switch (e.kind) {
            case "map":
                t[n] = {};
                break;
            case "enum":
                t[n] = a ? e.T.values[0].no : void 0;
                break;
            case "scalar":
                t[n] = a ? y(e.T, e.L) : void 0;
                break;
            case "message":
                t[n] = void 0
            }
    }
    function q(e, t) {
        if (null === e || "object" != typeof e)
            return !1;
        if (!Object.getOwnPropertyNames(E.prototype).every((t => t in e && "function" == typeof e[t])))
            return !1;
        const n = e.getType();
        return null !== n && "function" == typeof n && "typeName"in n && "string" == typeof n.typeName && (void 0 === t || n.typeName == t.typeName)
    }
    function G(e, t) {
        return q(t) || !e.fieldWrapper ? t : e.fieldWrapper.wrapField(t)
    }
    P.DOUBLE,
    P.FLOAT,
    P.INT64,
    P.UINT64,
    P.INT32,
    P.UINT32,
    P.BOOL,
    P.STRING,
    P.BYTES;
    const H = {
        ignoreUnknownFields: !1
    }
      , v = {
        emitDefaultValues: !1,
        enumAsInteger: !1,
        useProtoFieldName: !1,
        prettySpaces: 0
    };
    const V = Symbol()
      , Y = Symbol();
    function X(e) {
        if (null === e)
            return "null";
        switch (typeof e) {
        case "object":
            return Array.isArray(e) ? "array" : "object";
        case "string":
            return e.length > 100 ? "string" : `"${e.split('"').join('\\"')}"`;
        default:
            return String(e)
        }
    }
    function K(t, n, a, r, s) {
        let i = a.localName;
        if (a.repeated) {
            if (e("map" != a.kind),
            null === n)
                return;
            if (!Array.isArray(n))
                throw new Error(`cannot decode field ${s.typeName}.${a.name} from JSON: ${X(n)}`);
            const o = t[i];
            for (const e of n) {
                if (null === e)
                    throw new Error(`cannot decode field ${s.typeName}.${a.name} from JSON: ${X(e)}`);
                switch (a.kind) {
                case "message":
                    o.push(a.T.fromJson(e, r));
                    break;
                case "enum":
                    const t = j(a.T, e, r.ignoreUnknownFields, !0);
                    t !== Y && o.push(t);
                    break;
                case "scalar":
                    try {
                        o.push(z(a.T, e, a.L, !0))
                    } catch (t) {
                        let n = `cannot decode field ${s.typeName}.${a.name} from JSON: ${X(e)}`;
                        throw t instanceof Error && t.message.length > 0 && (n += `: ${t.message}`),
                        new Error(n)
                    }
                }
            }
        } else if ("map" == a.kind) {
            if (null === n)
                return;
            if ("object" != typeof n || Array.isArray(n))
                throw new Error(`cannot decode field ${s.typeName}.${a.name} from JSON: ${X(n)}`);
            const e = t[i];
            for (const [t,i] of Object.entries(n)) {
                if (null === i)
                    throw new Error(`cannot decode field ${s.typeName}.${a.name} from JSON: map value null`);
                let o;
                try {
                    o = W(a.K, t)
                } catch (e) {
                    let t = `cannot decode map key for field ${s.typeName}.${a.name} from JSON: ${X(n)}`;
                    throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
                    new Error(t)
                }
                switch (a.V.kind) {
                case "message":
                    e[o] = a.V.T.fromJson(i, r);
                    break;
                case "enum":
                    const t = j(a.V.T, i, r.ignoreUnknownFields, !0);
                    t !== Y && (e[o] = t);
                    break;
                case "scalar":
                    try {
                        e[o] = z(a.V.T, i, L.BIGINT, !0)
                    } catch (e) {
                        let t = `cannot decode map value for field ${s.typeName}.${a.name} from JSON: ${X(n)}`;
                        throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
                        new Error(t)
                    }
                }
            }
        } else
            switch (a.oneof && (t = t[a.oneof.localName] = {
                case: i
            },
            i = "value"),
            a.kind) {
            case "message":
                const e = a.T;
                if (null === n && "google.protobuf.Value" != e.typeName)
                    return;
                let o = t[i];
                q(o) ? o.fromJson(n, r) : (t[i] = o = e.fromJson(n, r),
                e.fieldWrapper && !a.oneof && (t[i] = e.fieldWrapper.unwrapField(o)));
                break;
            case "enum":
                const m = j(a.T, n, r.ignoreUnknownFields, !1);
                switch (m) {
                case V:
                    b(a, t);
                    break;
                case Y:
                    break;
                default:
                    t[i] = m
                }
                break;
            case "scalar":
                try {
                    const e = z(a.T, n, a.L, !1);
                    e === V ? b(a, t) : t[i] = e
                } catch (e) {
                    let t = `cannot decode field ${s.typeName}.${a.name} from JSON: ${X(n)}`;
                    throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
                    new Error(t)
                }
            }
    }
    function W(e, t) {
        if (e === P.BOOL)
            switch (t) {
            case "true":
                t = !0;
                break;
            case "false":
                t = !1
            }
        return z(e, t, L.BIGINT, !0).toString()
    }
    function z(e, t, n, a) {
        if (null === t)
            return a ? y(e, n) : V;
        switch (e) {
        case P.DOUBLE:
        case P.FLOAT:
            if ("NaN" === t)
                return Number.NaN;
            if ("Infinity" === t)
                return Number.POSITIVE_INFINITY;
            if ("-Infinity" === t)
                return Number.NEGATIVE_INFINITY;
            if ("" === t)
                break;
            if ("string" == typeof t && t.trim().length !== t.length)
                break;
            if ("string" != typeof t && "number" != typeof t)
                break;
            const a = Number(t);
            if (Number.isNaN(a))
                break;
            if (!Number.isFinite(a))
                break;
            return e == P.FLOAT && m(a),
            a;
        case P.INT32:
        case P.FIXED32:
        case P.SFIXED32:
        case P.SINT32:
        case P.UINT32:
            let r;
            if ("number" == typeof t ? r = t : "string" == typeof t && t.length > 0 && t.trim().length === t.length && (r = Number(t)),
            void 0 === r)
                break;
            return e == P.UINT32 || e == P.FIXED32 ? o(r) : i(r),
            r;
        case P.INT64:
        case P.SFIXED64:
        case P.SINT64:
            if ("number" != typeof t && "string" != typeof t)
                break;
            const s = A.parse(t);
            return n ? s.toString() : s;
        case P.FIXED64:
        case P.UINT64:
            if ("number" != typeof t && "string" != typeof t)
                break;
            const c = A.uParse(t);
            return n ? c.toString() : c;
        case P.BOOL:
            if ("boolean" != typeof t)
                break;
            return t;
        case P.STRING:
            if ("string" != typeof t)
                break;
            try {
                encodeURIComponent(t)
            } catch (e) {
                throw new Error("invalid UTF8")
            }
            return t;
        case P.BYTES:
            if ("" === t)
                return new Uint8Array(0);
            if ("string" != typeof t)
                break;
            return M.dec(t)
        }
        throw new Error
    }
    function j(e, t, n, a) {
        if (null === t)
            return "google.protobuf.NullValue" == e.typeName ? 0 : a ? e.values[0].no : V;
        switch (typeof t) {
        case "number":
            if (Number.isInteger(t))
                return t;
            break;
        case "string":
            const a = e.findName(t);
            if (void 0 !== a)
                return a.no;
            if (n)
                return Y
        }
        throw new Error(`cannot decode enum ${e.typeName} from JSON: ${X(t)}`)
    }
    function Q(e) {
        return !(!e.repeated && "map" != e.kind && (e.oneof || "message" == e.kind || e.opt || e.req))
    }
    function $(t, n, a) {
        if ("map" == t.kind) {
            e("object" == typeof n && null != n);
            const r = {}
              , s = Object.entries(n);
            switch (t.V.kind) {
            case "scalar":
                for (const [e,n] of s)
                    r[e.toString()] = ee(t.V.T, n);
                break;
            case "message":
                for (const [e,t] of s)
                    r[e.toString()] = t.toJson(a);
                break;
            case "enum":
                const e = t.V.T;
                for (const [t,n] of s)
                    r[t.toString()] = Z(e, n, a.enumAsInteger)
            }
            return a.emitDefaultValues || s.length > 0 ? r : void 0
        }
        if (t.repeated) {
            e(Array.isArray(n));
            const r = [];
            switch (t.kind) {
            case "scalar":
                for (let e = 0; e < n.length; e++)
                    r.push(ee(t.T, n[e]));
                break;
            case "enum":
                for (let e = 0; e < n.length; e++)
                    r.push(Z(t.T, n[e], a.enumAsInteger));
                break;
            case "message":
                for (let e = 0; e < n.length; e++)
                    r.push(n[e].toJson(a))
            }
            return a.emitDefaultValues || r.length > 0 ? r : void 0
        }
        switch (t.kind) {
        case "scalar":
            return ee(t.T, n);
        case "enum":
            return Z(t.T, n, a.enumAsInteger);
        case "message":
            return G(t.T, n).toJson(a)
        }
    }
    function Z(t, n, a) {
        var r;
        if (e("number" == typeof n),
        "google.protobuf.NullValue" == t.typeName)
            return null;
        if (a)
            return n;
        const s = t.findNumber(n);
        return null !== (r = null == s ? void 0 : s.name) && void 0 !== r ? r : n
    }
    function ee(t, n) {
        switch (t) {
        case P.INT32:
        case P.SFIXED32:
        case P.SINT32:
        case P.FIXED32:
        case P.UINT32:
            return e("number" == typeof n),
            n;
        case P.FLOAT:
        case P.DOUBLE:
            return e("number" == typeof n),
            Number.isNaN(n) ? "NaN" : n === Number.POSITIVE_INFINITY ? "Infinity" : n === Number.NEGATIVE_INFINITY ? "-Infinity" : n;
        case P.STRING:
            return e("string" == typeof n),
            n;
        case P.BOOL:
            return e("boolean" == typeof n),
            n;
        case P.UINT64:
        case P.FIXED64:
        case P.INT64:
        case P.SFIXED64:
        case P.SINT64:
            return e("bigint" == typeof n || "string" == typeof n || "number" == typeof n),
            n.toString();
        case P.BYTES:
            return e(n instanceof Uint8Array),
            M.enc(n)
        }
    }
    var te;
    !function(e) {
        e[e.Varint = 0] = "Varint",
        e[e.Bit64 = 1] = "Bit64",
        e[e.LengthDelimited = 2] = "LengthDelimited",
        e[e.StartGroup = 3] = "StartGroup",
        e[e.EndGroup = 4] = "EndGroup",
        e[e.Bit32 = 5] = "Bit32"
    }(te || (te = {}));
    class ne {
        constructor(e) {
            this.stack = [],
            this.textEncoder = null != e ? e : new TextEncoder,
            this.chunks = [],
            this.buf = []
        }
        finish() {
            this.chunks.push(new Uint8Array(this.buf));
            let e = 0;
            for (let t = 0; t < this.chunks.length; t++)
                e += this.chunks[t].length;
            let t = new Uint8Array(e)
              , n = 0;
            for (let e = 0; e < this.chunks.length; e++)
                t.set(this.chunks[e], n),
                n += this.chunks[e].length;
            return this.chunks = [],
            t
        }
        fork() {
            return this.stack.push({
                chunks: this.chunks,
                buf: this.buf
            }),
            this.chunks = [],
            this.buf = [],
            this
        }
        join() {
            let e = this.finish()
              , t = this.stack.pop();
            if (!t)
                throw new Error("invalid state, fork stack empty");
            return this.chunks = t.chunks,
            this.buf = t.buf,
            this.uint32(e.byteLength),
            this.raw(e)
        }
        tag(e, t) {
            return this.uint32((e << 3 | t) >>> 0)
        }
        raw(e) {
            return this.buf.length && (this.chunks.push(new Uint8Array(this.buf)),
            this.buf = []),
            this.chunks.push(e),
            this
        }
        uint32(e) {
            for (o(e); e > 127; )
                this.buf.push(127 & e | 128),
                e >>>= 7;
            return this.buf.push(e),
            this
        }
        int32(e) {
            return i(e),
            g(e, this.buf),
            this
        }
        bool(e) {
            return this.buf.push(e ? 1 : 0),
            this
        }
        bytes(e) {
            return this.uint32(e.byteLength),
            this.raw(e)
        }
        string(e) {
            let t = this.textEncoder.encode(e);
            return this.uint32(t.byteLength),
            this.raw(t)
        }
        float(e) {
            m(e);
            let t = new Uint8Array(4);
            return new DataView(t.buffer).setFloat32(0, e, !0),
            this.raw(t)
        }
        double(e) {
            let t = new Uint8Array(8);
            return new DataView(t.buffer).setFloat64(0, e, !0),
            this.raw(t)
        }
        fixed32(e) {
            o(e);
            let t = new Uint8Array(4);
            return new DataView(t.buffer).setUint32(0, e, !0),
            this.raw(t)
        }
        sfixed32(e) {
            i(e);
            let t = new Uint8Array(4);
            return new DataView(t.buffer).setInt32(0, e, !0),
            this.raw(t)
        }
        sint32(e) {
            return i(e),
            g(e = (e << 1 ^ e >> 31) >>> 0, this.buf),
            this
        }
        sfixed64(e) {
            let t = new Uint8Array(8)
              , n = new DataView(t.buffer)
              , a = A.enc(e);
            return n.setInt32(0, a.lo, !0),
            n.setInt32(4, a.hi, !0),
            this.raw(t)
        }
        fixed64(e) {
            let t = new Uint8Array(8)
              , n = new DataView(t.buffer)
              , a = A.uEnc(e);
            return n.setInt32(0, a.lo, !0),
            n.setInt32(4, a.hi, !0),
            this.raw(t)
        }
        int64(e) {
            let t = A.enc(e);
            return T(t.lo, t.hi, this.buf),
            this
        }
        sint64(e) {
            let t = A.enc(e)
              , n = t.hi >> 31;
            return T(t.lo << 1 ^ n, (t.hi << 1 | t.lo >>> 31) ^ n, this.buf),
            this
        }
        uint64(e) {
            let t = A.uEnc(e);
            return T(t.lo, t.hi, this.buf),
            this
        }
    }
    class ae {
        constructor(e, t) {
            this.varint64 = d,
            this.uint32 = O,
            this.buf = e,
            this.len = e.length,
            this.pos = 0,
            this.view = new DataView(e.buffer,e.byteOffset,e.byteLength),
            this.textDecoder = null != t ? t : new TextDecoder
        }
        tag() {
            let e = this.uint32()
              , t = e >>> 3
              , n = 7 & e;
            if (t <= 0 || n < 0 || n > 5)
                throw new Error("illegal tag: field no " + t + " wire type " + n);
            return [t, n]
        }
        skip(e) {
            let t = this.pos;
            switch (e) {
            case te.Varint:
                for (; 128 & this.buf[this.pos++]; )
                    ;
                break;
            case te.Bit64:
                this.pos += 4;
            case te.Bit32:
                this.pos += 4;
                break;
            case te.LengthDelimited:
                let t = this.uint32();
                this.pos += t;
                break;
            case te.StartGroup:
                let n;
                for (; (n = this.tag()[1]) !== te.EndGroup; )
                    this.skip(n);
                break;
            default:
                throw new Error("cant skip wire type " + e)
            }
            return this.assertBounds(),
            this.buf.subarray(t, this.pos)
        }
        assertBounds() {
            if (this.pos > this.len)
                throw new RangeError("premature EOF")
        }
        int32() {
            return 0 | this.uint32()
        }
        sint32() {
            let e = this.uint32();
            return e >>> 1 ^ -(1 & e)
        }
        int64() {
            return A.dec(...this.varint64())
        }
        uint64() {
            return A.uDec(...this.varint64())
        }
        sint64() {
            let[e,t] = this.varint64()
              , n = -(1 & e);
            return e = (e >>> 1 | (1 & t) << 31) ^ n,
            t = t >>> 1 ^ n,
            A.dec(e, t)
        }
        bool() {
            let[e,t] = this.varint64();
            return 0 !== e || 0 !== t
        }
        fixed32() {
            return this.view.getUint32((this.pos += 4) - 4, !0)
        }
        sfixed32() {
            return this.view.getInt32((this.pos += 4) - 4, !0)
        }
        fixed64() {
            return A.uDec(this.sfixed32(), this.sfixed32())
        }
        sfixed64() {
            return A.dec(this.sfixed32(), this.sfixed32())
        }
        float() {
            return this.view.getFloat32((this.pos += 4) - 4, !0)
        }
        double() {
            return this.view.getFloat64((this.pos += 8) - 8, !0)
        }
        bytes() {
            let e = this.uint32()
              , t = this.pos;
            return this.pos += e,
            this.assertBounds(),
            this.buf.subarray(t, t + e)
        }
        string() {
            return this.textDecoder.decode(this.bytes())
        }
    }
    const re = Symbol("@bufbuild/protobuf/unknown-fields")
      , se = {
        readUnknownFields: !0,
        readerFactory: e => new ae(e)
    }
      , ie = {
        writeUnknownFields: !0,
        writerFactory: () => new ne
    };
    function oe(e, t, n, a, r) {
        let {repeated: s, localName: i} = n;
        switch (n.oneof && ((e = e[n.oneof.localName]).case != i && delete e.value,
        e.case = i,
        i = "value"),
        n.kind) {
        case "scalar":
        case "enum":
            const o = "enum" == n.kind ? P.INT32 : n.T;
            let m = ue;
            if ("scalar" == n.kind && n.L > 0 && (m = ce),
            s) {
                let n = e[i];
                if (a == te.LengthDelimited && o != P.STRING && o != P.BYTES) {
                    let e = t.uint32() + t.pos;
                    for (; t.pos < e; )
                        n.push(m(t, o))
                } else
                    n.push(m(t, o))
            } else
                e[i] = m(t, o);
            break;
        case "message":
            const c = n.T;
            s ? e[i].push(me(t, new c, r, n)) : q(e[i]) ? me(t, e[i], r, n) : (e[i] = me(t, new c, r, n),
            !c.fieldWrapper || n.oneof || n.repeated || (e[i] = c.fieldWrapper.unwrapField(e[i])));
            break;
        case "map":
            let[u,l] = function(e, t, n) {
                const a = t.uint32()
                  , r = t.pos + a;
                let s, i;
                for (; t.pos < r; ) {
                    const [a] = t.tag();
                    switch (a) {
                    case 1:
                        s = ue(t, e.K);
                        break;
                    case 2:
                        switch (e.V.kind) {
                        case "scalar":
                            i = ue(t, e.V.T);
                            break;
                        case "enum":
                            i = t.int32();
                            break;
                        case "message":
                            i = me(t, new e.V.T, n, void 0)
                        }
                    }
                }
                if (void 0 === s && (s = y(e.K, L.BIGINT)),
                "string" != typeof s && "number" != typeof s && (s = s.toString()),
                void 0 === i)
                    switch (e.V.kind) {
                    case "scalar":
                        i = y(e.V.T, L.BIGINT);
                        break;
                    case "enum":
                        i = e.V.T.values[0].no;
                        break;
                    case "message":
                        i = new e.V.T
                    }
                return [s, i]
            }(n, t, r);
            e[i][u] = l
        }
    }
    function me(e, t, n, a) {
        const r = t.getType().runtime.bin
          , s = null == a ? void 0 : a.delimited;
        return r.readMessage(t, e, s ? a.no : e.uint32(), n, s),
        t
    }
    function ce(e, t) {
        const n = ue(e, t);
        return "bigint" == typeof n ? n.toString() : n
    }
    function ue(e, t) {
        switch (t) {
        case P.STRING:
            return e.string();
        case P.BOOL:
            return e.bool();
        case P.DOUBLE:
            return e.double();
        case P.FLOAT:
            return e.float();
        case P.INT32:
            return e.int32();
        case P.INT64:
            return e.int64();
        case P.UINT64:
            return e.uint64();
        case P.FIXED64:
            return e.fixed64();
        case P.BYTES:
            return e.bytes();
        case P.FIXED32:
            return e.fixed32();
        case P.SFIXED32:
            return e.sfixed32();
        case P.SFIXED64:
            return e.sfixed64();
        case P.SINT64:
            return e.sint64();
        case P.UINT32:
            return e.uint32();
        case P.SINT32:
            return e.sint32()
        }
    }
    function le(t, n, a, r) {
        e(void 0 !== n);
        const s = t.repeated;
        switch (t.kind) {
        case "scalar":
        case "enum":
            let i = "enum" == t.kind ? P.INT32 : t.T;
            if (s)
                if (e(Array.isArray(n)),
                t.packed)
                    !function(e, t, n, a) {
                        if (!a.length)
                            return;
                        e.tag(n, te.LengthDelimited).fork();
                        let[,r] = Te(t);
                        for (let t = 0; t < a.length; t++)
                            e[r](a[t]);
                        e.join()
                    }(a, i, t.no, n);
                else
                    for (const e of n)
                        de(a, i, t.no, e);
            else
                de(a, i, t.no, n);
            break;
        case "message":
            if (s) {
                e(Array.isArray(n));
                for (const e of n)
                    Ee(a, r, t, e)
            } else
                Ee(a, r, t, n);
            break;
        case "map":
            e("object" == typeof n && null != n);
            for (const [e,s] of Object.entries(n))
                _e(a, r, t, e, s)
        }
    }
    function _e(t, n, a, r, s) {
        t.tag(a.no, te.LengthDelimited),
        t.fork();
        let i = r;
        switch (a.K) {
        case P.INT32:
        case P.FIXED32:
        case P.UINT32:
        case P.SFIXED32:
        case P.SINT32:
            i = Number.parseInt(r);
            break;
        case P.BOOL:
            e("true" == r || "false" == r),
            i = "true" == r
        }
        switch (de(t, a.K, 1, i),
        a.V.kind) {
        case "scalar":
            de(t, a.V.T, 2, s);
            break;
        case "enum":
            de(t, P.INT32, 2, s);
            break;
        case "message":
            e(void 0 !== s),
            t.tag(2, te.LengthDelimited).bytes(s.toBinary(n))
        }
        t.join()
    }
    function Ee(e, t, n, a) {
        const r = G(n.T, a);
        n.delimited ? e.tag(n.no, te.StartGroup).raw(r.toBinary(t)).tag(n.no, te.EndGroup) : e.tag(n.no, te.LengthDelimited).bytes(r.toBinary(t))
    }
    function de(t, n, a, r) {
        e(void 0 !== r);
        let[s,i] = Te(n);
        t.tag(a, s)[i](r)
    }
    function Te(e) {
        let t = te.Varint;
        switch (e) {
        case P.BYTES:
        case P.STRING:
            t = te.LengthDelimited;
            break;
        case P.DOUBLE:
        case P.FIXED64:
        case P.SFIXED64:
            t = te.Bit64;
            break;
        case P.FIXED32:
        case P.SFIXED32:
        case P.FLOAT:
            t = te.Bit32
        }
        return [t, P[e].toLowerCase()]
    }
    function fe(e) {
        if (void 0 === e)
            return e;
        if (q(e))
            return e.clone();
        if (e instanceof Uint8Array) {
            const t = new Uint8Array(e.byteLength);
            return t.set(e),
            t
        }
        return e
    }
    function pe(e) {
        return e instanceof Uint8Array ? e : new Uint8Array(e)
    }
    class Se {
        constructor(e, t) {
            this._fields = e,
            this._normalizer = t
        }
        findJsonName(e) {
            if (!this.jsonNames) {
                const e = {};
                for (const t of this.list())
                    e[t.jsonName] = e[t.name] = t;
                this.jsonNames = e
            }
            return this.jsonNames[e]
        }
        find(e) {
            if (!this.numbers) {
                const e = {};
                for (const t of this.list())
                    e[t.no] = t;
                this.numbers = e
            }
            return this.numbers[e]
        }
        list() {
            return this.all || (this.all = this._normalizer(this._fields)),
            this.all
        }
        byNumber() {
            return this.numbersAsc || (this.numbersAsc = this.list().concat().sort(( (e, t) => e.no - t.no))),
            this.numbersAsc
        }
        byMember() {
            if (!this.members) {
                this.members = [];
                const e = this.members;
                let t;
                for (const n of this.list())
                    n.oneof ? n.oneof !== t && (t = n.oneof,
                    e.push(t)) : e.push(n)
            }
            return this.members
        }
    }
    function Ne(e, t) {
        const n = Ie(e);
        return t ? n : Le(Pe(n))
    }
    const Ce = Ie;
    function Ie(e) {
        let t = !1;
        const n = [];
        for (let a = 0; a < e.length; a++) {
            let r = e.charAt(a);
            switch (r) {
            case "_":
                t = !0;
                break;
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
                n.push(r),
                t = !1;
                break;
            default:
                t && (t = !1,
                r = r.toUpperCase()),
                n.push(r)
            }
        }
        return n.join("")
    }
    new Set(["break", "case", "catch", "class", "const", "continue", "debugger", "default", "delete", "do", "else", "export", "extends", "false", "finally", "for", "function", "if", "import", "in", "instanceof", "new", "null", "return", "super", "switch", "this", "throw", "true", "try", "typeof", "var", "void", "while", "with", "yield", "enum", "implements", "interface", "let", "package", "private", "protected", "public", "static", "Object", "bigint", "number", "boolean", "string", "object", "globalThis", "Uint8Array", "Partial"]);
    const ge = new Set(["constructor", "toString", "toJSON", "valueOf"])
      , Oe = new Set(["getType", "clone", "equals", "fromBinary", "fromJson", "fromJsonString", "toBinary", "toJson", "toJsonString", "toObject"])
      , Ae = e => `${e}$`
      , Pe = e => Oe.has(e) ? Ae(e) : e
      , Le = e => ge.has(e) ? Ae(e) : e;
    class Re {
        constructor(e) {
            this.kind = "oneof",
            this.repeated = !1,
            this.packed = !1,
            this.opt = !1,
            this.req = !1,
            this.default = void 0,
            this.fields = [],
            this.name = e,
            this.localName = Ne(e, !1)
        }
        addField(t) {
            e(t.oneof === this, `field ${t.name} not one of ${this.name}`),
            this.fields.push(t)
        }
        findField(e) {
            if (!this._lookup) {
                this._lookup = Object.create(null);
                for (let e = 0; e < this.fields.length; e++)
                    this._lookup[this.fields[e].localName] = this.fields[e]
            }
            return this._lookup[e]
        }
    }
    const ye = (we = e => new Se(e,(e => function(e, t) {
        var n, a, r, s, i, o;
        const m = [];
        let c;
        for (const t of "function" == typeof e ? e() : e) {
            const e = t;
            if (e.localName = Ne(t.name, void 0 !== t.oneof),
            e.jsonName = null !== (n = t.jsonName) && void 0 !== n ? n : Ce(t.name),
            e.repeated = null !== (a = t.repeated) && void 0 !== a && a,
            "scalar" == t.kind && (e.L = null !== (r = t.L) && void 0 !== r ? r : L.BIGINT),
            e.delimited = null !== (s = t.delimited) && void 0 !== s && s,
            e.req = null !== (i = t.req) && void 0 !== i && i,
            e.opt = null !== (o = t.opt) && void 0 !== o && o,
            void 0 === t.packed && (e.packed = "enum" == t.kind || "scalar" == t.kind && t.T != P.BYTES && t.T != P.STRING),
            void 0 !== t.oneof) {
                const n = "string" == typeof t.oneof ? t.oneof : t.oneof.name;
                c && c.name == n || (c = new Re(n)),
                e.oneof = c,
                c.addField(e)
            }
            m.push(e)
        }
        return m
    }(e))),
    ke = e => {
        for (const t of e.getType().fields.byMember()) {
            if (t.opt)
                continue;
            const n = t.localName
              , a = e;
            if (t.repeated)
                a[n] = [];
            else
                switch (t.kind) {
                case "oneof":
                    a[n] = {
                        case: void 0
                    };
                    break;
                case "enum":
                    a[n] = 0;
                    break;
                case "map":
                    a[n] = {};
                    break;
                case "scalar":
                    a[n] = y(t.T, t.L)
                }
        }
    }
    ,
    {
        syntax: "proto3",
        json: {
            makeReadOptions: function(e) {
                return e ? Object.assign(Object.assign({}, H), e) : H
            },
            makeWriteOptions: function(e) {
                return e ? Object.assign(Object.assign({}, v), e) : v
            },
            readMessage(e, t, n, a) {
                if (null == t || Array.isArray(t) || "object" != typeof t)
                    throw new Error(`cannot decode message ${e.typeName} from JSON: ${X(t)}`);
                a = null != a ? a : new e;
                const r = new Map
                  , s = n.typeRegistry;
                for (const [i,o] of Object.entries(t)) {
                    const t = e.fields.findJsonName(i);
                    if (t) {
                        if (t.oneof) {
                            if (null === o && "scalar" == t.kind)
                                continue;
                            const n = r.get(t.oneof);
                            if (void 0 !== n)
                                throw new Error(`cannot decode message ${e.typeName} from JSON: multiple keys for oneof "${t.oneof.name}" present: "${n}", "${i}"`);
                            r.set(t.oneof, i)
                        }
                        K(a, o, t, n, e)
                    } else {
                        let t = !1;
                        if ((null == s ? void 0 : s.findExtension) && i.startsWith("[") && i.endsWith("]")) {
                            const r = s.findExtension(i.substring(1, i.length - 1));
                            if (r && r.extendee.typeName == e.typeName) {
                                t = !0;
                                const [e,s] = k(r);
                                K(e, o, r.field, n, r),
                                x(a, r, s(), n)
                            }
                        }
                        if (!t && !n.ignoreUnknownFields)
                            throw new Error(`cannot decode message ${e.typeName} from JSON: key "${i}" is unknown`)
                    }
                }
                return a
            },
            writeMessage(e, t) {
                const n = e.getType()
                  , a = {};
                let r;
                try {
                    for (r of n.fields.byNumber()) {
                        if (!F(r, e)) {
                            if (r.req)
                                throw "required field not set";
                            if (!t.emitDefaultValues)
                                continue;
                            if (!Q(r))
                                continue
                        }
                        const n = $(r, r.oneof ? e[r.oneof.localName].value : e[r.localName], t);
                        void 0 !== n && (a[t.useProtoFieldName ? r.name : r.jsonName] = n)
                    }
                    const s = t.typeRegistry;
                    if (null == s ? void 0 : s.findExtensionFor)
                        for (const r of n.runtime.bin.listUnknownFields(e)) {
                            const i = s.findExtensionFor(n.typeName, r.no);
                            if (i && B(e, i)) {
                                const n = U(e, i, t)
                                  , r = $(i.field, n, t);
                                void 0 !== r && (a[i.field.jsonName] = r)
                            }
                        }
                } catch (e) {
                    const t = r ? `cannot encode field ${n.typeName}.${r.name} to JSON` : `cannot encode message ${n.typeName} to JSON`
                      , a = e instanceof Error ? e.message : String(e);
                    throw new Error(t + (a.length > 0 ? `: ${a}` : ""))
                }
                return a
            },
            readScalar: (e, t, n) => z(e, t, null != n ? n : L.BIGINT, !0),
            writeScalar(e, t, n) {
                if (void 0 !== t)
                    return n || w(e, t) ? ee(e, t) : void 0
            },
            debug: X
        },
        bin: {
            makeReadOptions: function(e) {
                return e ? Object.assign(Object.assign({}, se), e) : se
            },
            makeWriteOptions: function(e) {
                return e ? Object.assign(Object.assign({}, ie), e) : ie
            },
            listUnknownFields(e) {
                var t;
                return null !== (t = e[re]) && void 0 !== t ? t : []
            },
            discardUnknownFields(e) {
                delete e[re]
            },
            writeUnknownFields(e, t) {
                const n = e[re];
                if (n)
                    for (const e of n)
                        t.tag(e.no, e.wireType).raw(e.data)
            },
            onUnknownField(e, t, n, a) {
                const r = e;
                Array.isArray(r[re]) || (r[re] = []),
                r[re].push({
                    no: t,
                    wireType: n,
                    data: a
                })
            },
            readMessage(e, t, n, a, r) {
                const s = e.getType()
                  , i = r ? t.len : t.pos + n;
                let o, m;
                for (; t.pos < i && ([o,m] = t.tag(),
                m != te.EndGroup); ) {
                    const n = s.fields.find(o);
                    if (n)
                        oe(e, t, n, m, a);
                    else {
                        const n = t.skip(m);
                        a.readUnknownFields && this.onUnknownField(e, o, m, n)
                    }
                }
                if (r && (m != te.EndGroup || o !== n))
                    throw new Error("invalid end group tag")
            },
            readField: oe,
            writeMessage(e, t, n) {
                const a = e.getType();
                for (const r of a.fields.byNumber())
                    if (F(r, e))
                        le(r, r.oneof ? e[r.oneof.localName].value : e[r.localName], t, n);
                    else if (r.req)
                        throw new Error(`cannot encode field ${a.typeName}.${r.name} to binary: required field not set`);
                return n.writeUnknownFields && this.writeUnknownFields(e, t),
                t
            },
            writeField(e, t, n, a) {
                void 0 !== t && le(e, t, n, a)
            }
        },
        util: Object.assign(Object.assign({}, {
            setEnumType: u,
            initPartial(e, t) {
                if (void 0 === e)
                    return;
                const n = t.getType();
                for (const a of n.fields.byMember()) {
                    const n = a.localName
                      , r = t
                      , s = e;
                    if (void 0 !== s[n])
                        switch (a.kind) {
                        case "oneof":
                            const e = s[n].case;
                            if (void 0 === e)
                                continue;
                            const t = a.findField(e);
                            let i = s[n].value;
                            t && "message" == t.kind && !q(i, t.T) ? i = new t.T(i) : t && "scalar" === t.kind && t.T === P.BYTES && (i = pe(i)),
                            r[n] = {
                                case: e,
                                value: i
                            };
                            break;
                        case "scalar":
                        case "enum":
                            let o = s[n];
                            a.T === P.BYTES && (o = a.repeated ? o.map(pe) : pe(o)),
                            r[n] = o;
                            break;
                        case "map":
                            switch (a.V.kind) {
                            case "scalar":
                            case "enum":
                                if (a.V.T === P.BYTES)
                                    for (const [e,t] of Object.entries(s[n]))
                                        r[n][e] = pe(t);
                                else
                                    Object.assign(r[n], s[n]);
                                break;
                            case "message":
                                const e = a.V.T;
                                for (const t of Object.keys(s[n])) {
                                    let a = s[n][t];
                                    e.fieldWrapper || (a = new e(a)),
                                    r[n][t] = a
                                }
                            }
                            break;
                        case "message":
                            const m = a.T;
                            if (a.repeated)
                                r[n] = s[n].map((e => q(e, m) ? e : new m(e)));
                            else {
                                const e = s[n];
                                m.fieldWrapper ? "google.protobuf.BytesValue" === m.typeName ? r[n] = pe(e) : r[n] = e : r[n] = q(e, m) ? e : new m(e)
                            }
                        }
                }
            },
            equals: (e, t, n) => t === n || !(!t || !n) && e.fields.byMember().every((e => {
                const a = t[e.localName]
                  , r = n[e.localName];
                if (e.repeated) {
                    if (a.length !== r.length)
                        return !1;
                    switch (e.kind) {
                    case "message":
                        return a.every(( (t, n) => e.T.equals(t, r[n])));
                    case "scalar":
                        return a.every(( (t, n) => R(e.T, t, r[n])));
                    case "enum":
                        return a.every(( (e, t) => R(P.INT32, e, r[t])))
                    }
                    throw new Error(`repeated cannot contain ${e.kind}`)
                }
                switch (e.kind) {
                case "message":
                    return e.T.equals(a, r);
                case "enum":
                    return R(P.INT32, a, r);
                case "scalar":
                    return R(e.T, a, r);
                case "oneof":
                    if (a.case !== r.case)
                        return !1;
                    const t = e.findField(a.case);
                    if (void 0 === t)
                        return !0;
                    switch (t.kind) {
                    case "message":
                        return t.T.equals(a.value, r.value);
                    case "enum":
                        return R(P.INT32, a.value, r.value);
                    case "scalar":
                        return R(t.T, a.value, r.value)
                    }
                    throw new Error(`oneof cannot contain ${t.kind}`);
                case "map":
                    const n = Object.keys(a).concat(Object.keys(r));
                    switch (e.V.kind) {
                    case "message":
                        const t = e.V.T;
                        return n.every((e => t.equals(a[e], r[e])));
                    case "enum":
                        return n.every((e => R(P.INT32, a[e], r[e])));
                    case "scalar":
                        const s = e.V.T;
                        return n.every((e => R(s, a[e], r[e])))
                    }
                }
            }
            )),
            clone(e) {
                const t = e.getType()
                  , n = new t
                  , a = n;
                for (const n of t.fields.byMember()) {
                    const t = e[n.localName];
                    let r;
                    if (n.repeated)
                        r = t.map(fe);
                    else if ("map" == n.kind) {
                        r = a[n.localName];
                        for (const [e,n] of Object.entries(t))
                            r[e] = fe(n)
                    } else
                        r = "oneof" == n.kind ? n.findField(t.case) ? {
                            case: t.case,
                            value: fe(t.value)
                        } : {
                            case: void 0
                        } : fe(t);
                    a[n.localName] = r
                }
                for (const n of t.runtime.bin.listUnknownFields(e))
                    t.runtime.bin.onUnknownField(a, n.no, n.wireType, n.data);
                return n
            }
        }), {
            newFieldList: we,
            initFields: ke
        }),
        makeMessageType(e, t, n) {
            return function(e, t, n, a) {
                var r;
                const s = null !== (r = null == a ? void 0 : a.localName) && void 0 !== r ? r : t.substring(t.lastIndexOf(".") + 1)
                  , i = {
                    [s]: function(t) {
                        e.util.initFields(this),
                        e.util.initPartial(t, this)
                    }
                }[s];
                return Object.setPrototypeOf(i.prototype, new E),
                Object.assign(i, {
                    runtime: e,
                    typeName: t,
                    fields: e.util.newFieldList(n),
                    fromBinary: (e, t) => (new i).fromBinary(e, t),
                    fromJson: (e, t) => (new i).fromJson(e, t),
                    fromJsonString: (e, t) => (new i).fromJsonString(e, t),
                    equals: (t, n) => e.util.equals(i, t, n)
                }),
                i
            }(this, e, t, n)
        },
        makeEnum: function(e, t, n) {
            const a = {};
            for (const e of t) {
                const t = _(e);
                a[t.localName] = t.no,
                a[t.no] = t.localName
            }
            return u(a, e, t),
            a
        },
        makeEnumType: l,
        getEnumType: function(t) {
            const n = t[c];
            return e(n, "missing enum type on enum object"),
            n
        },
        makeExtension(e, t, n) {
            return function(e, t, n, a) {
                let r;
                return {
                    typeName: t,
                    extendee: n,
                    get field() {
                        if (!r) {
                            const n = "function" == typeof a ? a() : a;
                            n.name = t.split(".").pop(),
                            n.jsonName = `[${t}]`,
                            r = e.util.newFieldList([n]).list()[0]
                        }
                        return r
                    },
                    runtime: e
                }
            }(this, e, t, n)
        }
    });
    var we, ke;
    class De extends E {
        constructor(e) {
            super(),
            this.seconds = A.zero,
            this.nanos = 0,
            ye.util.initPartial(e, this)
        }
        fromJson(e, t) {
            if ("string" != typeof e)
                throw new Error(`cannot decode google.protobuf.Timestamp from JSON: ${ye.json.debug(e)}`);
            const n = e.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);
            if (!n)
                throw new Error("cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string");
            const a = Date.parse(n[1] + "-" + n[2] + "-" + n[3] + "T" + n[4] + ":" + n[5] + ":" + n[6] + (n[8] ? n[8] : "Z"));
            if (Number.isNaN(a))
                throw new Error("cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string");
            if (a < Date.parse("0001-01-01T00:00:00Z") || a > Date.parse("9999-12-31T23:59:59Z"))
                throw new Error("cannot decode message google.protobuf.Timestamp from JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive");
            return this.seconds = A.parse(a / 1e3),
            this.nanos = 0,
            n[7] && (this.nanos = parseInt("1" + n[7] + "0".repeat(9 - n[7].length)) - 1e9),
            this
        }
        toJson(e) {
            const t = 1e3 * Number(this.seconds);
            if (t < Date.parse("0001-01-01T00:00:00Z") || t > Date.parse("9999-12-31T23:59:59Z"))
                throw new Error("cannot encode google.protobuf.Timestamp to JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive");
            if (this.nanos < 0)
                throw new Error("cannot encode google.protobuf.Timestamp to JSON: nanos must not be negative");
            let n = "Z";
            if (this.nanos > 0) {
                const e = (this.nanos + 1e9).toString().substring(1);
                n = "000000" === e.substring(3) ? "." + e.substring(0, 3) + "Z" : "000" === e.substring(6) ? "." + e.substring(0, 6) + "Z" : "." + e + "Z"
            }
            return new Date(t).toISOString().replace(".000Z", n)
        }
        toDate() {
            return new Date(1e3 * Number(this.seconds) + Math.ceil(this.nanos / 1e6))
        }
        static now() {
            return De.fromDate(new Date)
        }
        static fromDate(e) {
            const t = e.getTime();
            return new De({
                seconds: A.parse(Math.floor(t / 1e3)),
                nanos: t % 1e3 * 1e6
            })
        }
        static fromBinary(e, t) {
            return (new De).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new De).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new De).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(De, e, t)
        }
    }
    De.runtime = ye,
    De.typeName = "google.protobuf.Timestamp",
    De.fields = ye.util.newFieldList(( () => [{
        no: 1,
        name: "seconds",
        kind: "scalar",
        T: 3
    }, {
        no: 2,
        name: "nanos",
        kind: "scalar",
        T: 5
    }]));
    class Je extends E {
        constructor(e) {
            super(),
            this.seconds = A.zero,
            this.nanos = 0,
            ye.util.initPartial(e, this)
        }
        fromJson(e, t) {
            if ("string" != typeof e)
                throw new Error(`cannot decode google.protobuf.Duration from JSON: ${ye.json.debug(e)}`);
            const n = e.match(/^(-?[0-9]+)(?:\.([0-9]+))?s/);
            if (null === n)
                throw new Error(`cannot decode google.protobuf.Duration from JSON: ${ye.json.debug(e)}`);
            const a = Number(n[1]);
            if (a > 315576e6 || a < -315576e6)
                throw new Error(`cannot decode google.protobuf.Duration from JSON: ${ye.json.debug(e)}`);
            if (this.seconds = A.parse(a),
            "string" == typeof n[2]) {
                const e = n[2] + "0".repeat(9 - n[2].length);
                this.nanos = parseInt(e),
                (a < 0 || Object.is(a, -0)) && (this.nanos = -this.nanos)
            }
            return this
        }
        toJson(e) {
            if (Number(this.seconds) > 315576e6 || Number(this.seconds) < -315576e6)
                throw new Error("cannot encode google.protobuf.Duration to JSON: value out of range");
            let t = this.seconds.toString();
            if (0 !== this.nanos) {
                let e = Math.abs(this.nanos).toString();
                e = "0".repeat(9 - e.length) + e,
                "000000" === e.substring(3) ? e = e.substring(0, 3) : "000" === e.substring(6) && (e = e.substring(0, 6)),
                t += "." + e,
                this.nanos < 0 && 0 == Number(this.seconds) && (t = "-" + t)
            }
            return t + "s"
        }
        static fromBinary(e, t) {
            return (new Je).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Je).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Je).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Je, e, t)
        }
    }
    let Me, Ue, xe, Be, he, Fe, be, qe, Ge, He, ve, Ve, Ye, Xe, Ke, We, ze, je, Qe, $e, Ze, et, tt, nt, at, rt, st, it, ot, mt, ct, ut, lt, _t, Et, dt, Tt, ft, pt, St, Nt, Ct, It, gt, Ot, At, Pt, Lt, Rt, yt, wt, kt, Dt, Jt, Mt, Ut, xt, Bt, ht, Ft, bt, qt, Gt, Ht, vt;
    Je.runtime = ye,
    Je.typeName = "google.protobuf.Duration",
    Je.fields = ye.util.newFieldList(( () => [{
        no: 1,
        name: "seconds",
        kind: "scalar",
        T: 3
    }, {
        no: 2,
        name: "nanos",
        kind: "scalar",
        T: 5
    }])),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.AUTOCOMPLETE = 1] = "AUTOCOMPLETE",
        e[e.CHAT = 2] = "CHAT",
        e[e.COMMAND_GENERATE = 4] = "COMMAND_GENERATE",
        e[e.COMMAND_EDIT = 5] = "COMMAND_EDIT",
        e[e.SUPERCOMPLETE = 6] = "SUPERCOMPLETE",
        e[e.COMMAND_PLAN = 7] = "COMMAND_PLAN",
        e[e.QUERY = 8] = "QUERY",
        e[e.FAST_APPLY = 9] = "FAST_APPLY",
        e[e.COMMAND_TERMINAL = 10] = "COMMAND_TERMINAL",
        e[e.TAB_JUMP = 11] = "TAB_JUMP"
    }(Me || (Me = {})),
    ye.util.setEnumType(Me, "exa.codeium_common_pb.ProviderSource", [{
        no: 0,
        name: "PROVIDER_SOURCE_UNSPECIFIED"
    }, {
        no: 1,
        name: "PROVIDER_SOURCE_AUTOCOMPLETE"
    }, {
        no: 2,
        name: "PROVIDER_SOURCE_CHAT"
    }, {
        no: 4,
        name: "PROVIDER_SOURCE_COMMAND_GENERATE"
    }, {
        no: 5,
        name: "PROVIDER_SOURCE_COMMAND_EDIT"
    }, {
        no: 6,
        name: "PROVIDER_SOURCE_SUPERCOMPLETE"
    }, {
        no: 7,
        name: "PROVIDER_SOURCE_COMMAND_PLAN"
    }, {
        no: 8,
        name: "PROVIDER_SOURCE_QUERY"
    }, {
        no: 9,
        name: "PROVIDER_SOURCE_FAST_APPLY"
    }, {
        no: 10,
        name: "PROVIDER_SOURCE_COMMAND_TERMINAL"
    }, {
        no: 11,
        name: "PROVIDER_SOURCE_TAB_JUMP"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.FILE_MARKER = 2] = "FILE_MARKER",
        e[e.OTHER_DOCUMENT = 4] = "OTHER_DOCUMENT",
        e[e.BEFORE_CURSOR = 5] = "BEFORE_CURSOR",
        e[e.AFTER_CURSOR = 7] = "AFTER_CURSOR",
        e[e.FIM = 8] = "FIM",
        e[e.SOT = 9] = "SOT",
        e[e.EOT = 10] = "EOT",
        e[e.CODE_CONTEXT_ITEM = 13] = "CODE_CONTEXT_ITEM",
        e[e.INSTRUCTION = 14] = "INSTRUCTION",
        e[e.SELECTION = 15] = "SELECTION",
        e[e.TRAJECTORY_STEP = 16] = "TRAJECTORY_STEP",
        e[e.ACTIVE_DOCUMENT = 17] = "ACTIVE_DOCUMENT",
        e[e.CACHED_MESSAGE = 18] = "CACHED_MESSAGE"
    }(Ue || (Ue = {})),
    ye.util.setEnumType(Ue, "exa.codeium_common_pb.PromptElementKind", [{
        no: 0,
        name: "PROMPT_ELEMENT_KIND_UNSPECIFIED"
    }, {
        no: 2,
        name: "PROMPT_ELEMENT_KIND_FILE_MARKER"
    }, {
        no: 4,
        name: "PROMPT_ELEMENT_KIND_OTHER_DOCUMENT"
    }, {
        no: 5,
        name: "PROMPT_ELEMENT_KIND_BEFORE_CURSOR"
    }, {
        no: 7,
        name: "PROMPT_ELEMENT_KIND_AFTER_CURSOR"
    }, {
        no: 8,
        name: "PROMPT_ELEMENT_KIND_FIM"
    }, {
        no: 9,
        name: "PROMPT_ELEMENT_KIND_SOT"
    }, {
        no: 10,
        name: "PROMPT_ELEMENT_KIND_EOT"
    }, {
        no: 13,
        name: "PROMPT_ELEMENT_KIND_CODE_CONTEXT_ITEM"
    }, {
        no: 14,
        name: "PROMPT_ELEMENT_KIND_INSTRUCTION"
    }, {
        no: 15,
        name: "PROMPT_ELEMENT_KIND_SELECTION"
    }, {
        no: 16,
        name: "PROMPT_ELEMENT_KIND_TRAJECTORY_STEP"
    }, {
        no: 17,
        name: "PROMPT_ELEMENT_KIND_ACTIVE_DOCUMENT"
    }, {
        no: 18,
        name: "PROMPT_ELEMENT_KIND_CACHED_MESSAGE"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.COPY = 1] = "COPY",
        e[e.PROMPT_CACHE = 2] = "PROMPT_CACHE"
    }(xe || (xe = {})),
    ye.util.setEnumType(xe, "exa.codeium_common_pb.PromptAnnotationKind", [{
        no: 0,
        name: "PROMPT_ANNOTATION_KIND_UNSPECIFIED"
    }, {
        no: 1,
        name: "PROMPT_ANNOTATION_KIND_COPY"
    }, {
        no: 2,
        name: "PROMPT_ANNOTATION_KIND_PROMPT_CACHE"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.OTHER_DOCUMENTS = 3] = "OTHER_DOCUMENTS",
        e[e.ONLY_STOP_EOT = 13] = "ONLY_STOP_EOT",
        e[e.INCREASE_MAX_NUM_TOKENS = 27] = "INCREASE_MAX_NUM_TOKENS",
        e[e.BLOCKING_REFRESH = 35] = "BLOCKING_REFRESH",
        e[e.USE_INTERNAL_CHAT_MODEL = 36] = "USE_INTERNAL_CHAT_MODEL",
        e[e.INCREASE_MAX_NUM_TOKENS_MORE = 39] = "INCREASE_MAX_NUM_TOKENS_MORE",
        e[e.USE_CONTEXT_TOKEN = 44] = "USE_CONTEXT_TOKEN",
        e[e.RECORD_FILES = 47] = "RECORD_FILES",
        e[e.NO_SAMPLER_EARLY_STOP = 48] = "NO_SAMPLER_EARLY_STOP",
        e[e.CM_MEMORY_TELEMETRY = 53] = "CM_MEMORY_TELEMETRY",
        e[e.ACTIVITY_CONTEXT_WEIGHT = 54] = "ACTIVITY_CONTEXT_WEIGHT",
        e[e.LANGUAGE_SERVER_VERSION = 55] = "LANGUAGE_SERVER_VERSION",
        e[e.LANGUAGE_SERVER_AUTO_RELOAD = 56] = "LANGUAGE_SERVER_AUTO_RELOAD",
        e[e.ONLY_MULTILINE = 60] = "ONLY_MULTILINE",
        e[e.USE_CHAT_MODEL_7984 = 61] = "USE_CHAT_MODEL_7984",
        e[e.CONTEXT_FOR_NONGENERIC_CHAT = 62] = "CONTEXT_FOR_NONGENERIC_CHAT",
        e[e.USE_AUTOCOMPLETE_MODEL = 64] = "USE_AUTOCOMPLETE_MODEL",
        e[e.USE_ATTRIBUTION_FOR_INDIVIDUAL_TIER = 68] = "USE_ATTRIBUTION_FOR_INDIVIDUAL_TIER",
        e[e.USE_GPT_4_TURBO = 73] = "USE_GPT_4_TURBO",
        e[e.CHAT_MODEL_CONFIG = 78] = "CHAT_MODEL_CONFIG",
        e[e.COMMAND_MODEL_CONFIG = 79] = "COMMAND_MODEL_CONFIG",
        e[e.MIDDLE_MODE_TOKEN_VARIANT = 80] = "MIDDLE_MODE_TOKEN_VARIANT",
        e[e.MIN_IDE_VERSION = 81] = "MIN_IDE_VERSION",
        e[e.API_SERVER_VERBOSE_ERRORS = 84] = "API_SERVER_VERBOSE_ERRORS",
        e[e.DEFAULT_ENABLE_SEARCH = 86] = "DEFAULT_ENABLE_SEARCH",
        e[e.COLLECT_ONBOARDING_EVENTS = 87] = "COLLECT_ONBOARDING_EVENTS",
        e[e.COLLECT_EXAMPLE_COMPLETIONS = 88] = "COLLECT_EXAMPLE_COMPLETIONS",
        e[e.USE_MULTILINE_MODEL = 89] = "USE_MULTILINE_MODEL",
        e[e.OPEN_UNIVERSITY_ON_STARTUP = 91] = "OPEN_UNIVERSITY_ON_STARTUP",
        e[e.ATTRIBUTION_KILL_SWITCH = 92] = "ATTRIBUTION_KILL_SWITCH",
        e[e.FAST_MULTILINE = 94] = "FAST_MULTILINE",
        e[e.SINGLE_COMPLETION = 95] = "SINGLE_COMPLETION",
        e[e.STOP_FIRST_NON_WHITESPACE_LINE = 96] = "STOP_FIRST_NON_WHITESPACE_LINE",
        e[e.TEAMS_UPGRADE_FOR_NONGENERIC_CHAT = 98] = "TEAMS_UPGRADE_FOR_NONGENERIC_CHAT",
        e[e.MODEL_8341_VARIANTS = 99] = "MODEL_8341_VARIANTS",
        e[e.CORTEX_CONFIG = 102] = "CORTEX_CONFIG",
        e[e.MODEL_CHAT_11121_VARIANTS = 103] = "MODEL_CHAT_11121_VARIANTS",
        e[e.INCLUDE_PROMPT_COMPONENTS = 105] = "INCLUDE_PROMPT_COMPONENTS",
        e[e.NON_TEAMS_KILL_SWITCH = 106] = "NON_TEAMS_KILL_SWITCH",
        e[e.PERSIST_CODE_TRACKER = 108] = "PERSIST_CODE_TRACKER",
        e[e.RUN_RESEARCH_STATE_PROVIDER = 110] = "RUN_RESEARCH_STATE_PROVIDER",
        e[e.API_SERVER_LIVENESS_PROBE = 112] = "API_SERVER_LIVENESS_PROBE",
        e[e.IMPLICIT_PLAN = 113] = "IMPLICIT_PLAN",
        e[e.CHAT_COMPLETION_TOKENS_SOFT_LIMIT = 114] = "CHAT_COMPLETION_TOKENS_SOFT_LIMIT",
        e[e.CHAT_TOKENS_SOFT_LIMIT = 115] = "CHAT_TOKENS_SOFT_LIMIT",
        e[e.MQUERY_SCORER_WITH_FALLBACK = 117] = "MQUERY_SCORER_WITH_FALLBACK",
        e[e.DISABLE_COMPLETIONS_CACHE = 118] = "DISABLE_COMPLETIONS_CACHE",
        e[e.LLAMA3_405B_KILL_SWITCH = 119] = "LLAMA3_405B_KILL_SWITCH",
        e[e.USE_IMPLICIT_TRAJECTORY = 120] = "USE_IMPLICIT_TRAJECTORY",
        e[e.USE_COMMAND_DOCSTRING_GENERATION = 121] = "USE_COMMAND_DOCSTRING_GENERATION",
        e[e.JETBRAINS_USE_COMMAND_DOCSTRING_GENERATION = 122] = "JETBRAINS_USE_COMMAND_DOCSTRING_GENERATION",
        e[e.ENABLE_SUPERCOMPLETE = 123] = "ENABLE_SUPERCOMPLETE",
        e[e.JETBRAINS_ENABLE_AUTOUPDATE = 124] = "JETBRAINS_ENABLE_AUTOUPDATE",
        e[e.SENTRY = 136] = "SENTRY",
        e[e.DISABLE_INFERENCE_API_SERVER = 139] = "DISABLE_INFERENCE_API_SERVER",
        e[e.FAST_SINGLELINE = 144] = "FAST_SINGLELINE",
        e[e.R2_LANGUAGE_SERVER_DOWNLOAD = 147] = "R2_LANGUAGE_SERVER_DOWNLOAD",
        e[e.SPLIT_MODEL = 152] = "SPLIT_MODEL",
        e[e.PIN_RECENT_FILES = 153] = "PIN_RECENT_FILES",
        e[e.COMMIT_GRAPH = 164] = "COMMIT_GRAPH",
        e[e.WINDSURF_SENTRY_SAMPLE_RATE = 198] = "WINDSURF_SENTRY_SAMPLE_RATE",
        e[e.MODEL_15133_VARIANTS = 199] = "MODEL_15133_VARIANTS",
        e[e.MODEL_14602_TOKENS = 142] = "MODEL_14602_TOKENS",
        e[e.MODEL_15133_TOKENS = 173] = "MODEL_15133_TOKENS",
        e[e.MODEL_15302_TOKENS = 174] = "MODEL_15302_TOKENS",
        e[e.MODEL_15335_TOKENS = 175] = "MODEL_15335_TOKENS",
        e[e.MODEL_15931_TOKENS = 180] = "MODEL_15931_TOKENS",
        e[e.MODEL_CHAT_15729_TOKENS = 186] = "MODEL_CHAT_15729_TOKENS",
        e[e.MODEL_CHAT_16579_TOKENS = 195] = "MODEL_CHAT_16579_TOKENS",
        e[e.MODEL_CHAT_16579_CRUSOE_TOKENS = 196] = "MODEL_CHAT_16579_CRUSOE_TOKENS",
        e[e.MODEL_CHAT_18805_TOKENS = 235] = "MODEL_CHAT_18805_TOKENS",
        e[e.MODEL_CHAT_19040_TOKENS = 257] = "MODEL_CHAT_19040_TOKENS",
        e[e.MODEL_CHAT_19820_TOKENS = 280] = "MODEL_CHAT_19820_TOKENS",
        e[e.MODEL_CHAT_19821_TOKENS = 281] = "MODEL_CHAT_19821_TOKENS",
        e[e.MODEL_CHAT_19821_CRUSOE_TOKENS = 318] = "MODEL_CHAT_19821_CRUSOE_TOKENS",
        e[e.MODEL_CHAT_19822_TOKENS = 282] = "MODEL_CHAT_19822_TOKENS",
        e[e.MODEL_CHAT_15305_TOKENS = 167] = "MODEL_CHAT_15305_TOKENS",
        e[e.MODEL_CHAT_15600_TOKENS = 229] = "MODEL_CHAT_15600_TOKENS",
        e[e.MODEL_CHAT_16801_TOKENS = 230] = "MODEL_CHAT_16801_TOKENS",
        e[e.MODEL_CHAT_18468_TOKENS = 277] = "MODEL_CHAT_18468_TOKENS",
        e[e.MODEL_CHAT_19484_TOKENS = 291] = "MODEL_CHAT_19484_TOKENS",
        e[e.MODEL_CHAT_20706_TOKENS = 302] = "MODEL_CHAT_20706_TOKENS",
        e[e.API_SERVER_CUTOFF = 158] = "API_SERVER_CUTOFF",
        e[e.FAST_SPEED_KILL_SWITCH = 159] = "FAST_SPEED_KILL_SWITCH",
        e[e.PREDICTIVE_MULTILINE = 160] = "PREDICTIVE_MULTILINE",
        e[e.SUPERCOMPLETE_FILTER_REVERT = 125] = "SUPERCOMPLETE_FILTER_REVERT",
        e[e.SUPERCOMPLETE_FILTER_PREFIX_MATCH = 126] = "SUPERCOMPLETE_FILTER_PREFIX_MATCH",
        e[e.SUPERCOMPLETE_FILTER_SCORE_THRESHOLD = 127] = "SUPERCOMPLETE_FILTER_SCORE_THRESHOLD",
        e[e.SUPERCOMPLETE_FILTER_INSERTION_CAP = 128] = "SUPERCOMPLETE_FILTER_INSERTION_CAP",
        e[e.SUPERCOMPLETE_FILTER_DELETION_CAP = 133] = "SUPERCOMPLETE_FILTER_DELETION_CAP",
        e[e.SUPERCOMPLETE_FILTER_WHITESPACE_ONLY = 156] = "SUPERCOMPLETE_FILTER_WHITESPACE_ONLY",
        e[e.SUPERCOMPLETE_FILTER_NO_OP = 170] = "SUPERCOMPLETE_FILTER_NO_OP",
        e[e.SUPERCOMPLETE_FILTER_SUFFIX_MATCH = 176] = "SUPERCOMPLETE_FILTER_SUFFIX_MATCH",
        e[e.SUPERCOMPLETE_FILTER_PREVIOUSLY_SHOWN = 182] = "SUPERCOMPLETE_FILTER_PREVIOUSLY_SHOWN",
        e[e.SUPERCOMPLETE_MIN_SCORE = 129] = "SUPERCOMPLETE_MIN_SCORE",
        e[e.SUPERCOMPLETE_MAX_INSERTIONS = 130] = "SUPERCOMPLETE_MAX_INSERTIONS",
        e[e.SUPERCOMPLETE_LINE_RADIUS = 131] = "SUPERCOMPLETE_LINE_RADIUS",
        e[e.SUPERCOMPLETE_MAX_DELETIONS = 132] = "SUPERCOMPLETE_MAX_DELETIONS",
        e[e.SUPERCOMPLETE_USE_CURRENT_LINE = 135] = "SUPERCOMPLETE_USE_CURRENT_LINE",
        e[e.SUPERCOMPLETE_RECENT_STEPS_DURATION = 138] = "SUPERCOMPLETE_RECENT_STEPS_DURATION",
        e[e.SUPERCOMPLETE_USE_CODE_DIAGNOSTICS = 143] = "SUPERCOMPLETE_USE_CODE_DIAGNOSTICS",
        e[e.SUPERCOMPLETE_DIAGNOSTIC_SEVERITY_THRESHOLD = 223] = "SUPERCOMPLETE_DIAGNOSTIC_SEVERITY_THRESHOLD",
        e[e.SUPERCOMPLETE_CODE_DIAGNOSTICS_TOP_K = 232] = "SUPERCOMPLETE_CODE_DIAGNOSTICS_TOP_K",
        e[e.SUPERCOMPLETE_MAX_TRAJECTORY_STEPS = 154] = "SUPERCOMPLETE_MAX_TRAJECTORY_STEPS",
        e[e.SUPERCOMPLETE_ON_ACCEPT_ONLY = 157] = "SUPERCOMPLETE_ON_ACCEPT_ONLY",
        e[e.SUPERCOMPLETE_TEMPERATURE = 183] = "SUPERCOMPLETE_TEMPERATURE",
        e[e.SUPERCOMPLETE_MAX_TRAJECTORY_STEP_SIZE = 203] = "SUPERCOMPLETE_MAX_TRAJECTORY_STEP_SIZE",
        e[e.SUPERCOMPLETE_DISABLE_TYPING_CACHE = 231] = "SUPERCOMPLETE_DISABLE_TYPING_CACHE",
        e[e.SUPERCOMPLETE_ALWAYS_USE_CACHE_ON_EQUAL_STATE = 293] = "SUPERCOMPLETE_ALWAYS_USE_CACHE_ON_EQUAL_STATE",
        e[e.SUPERCOMPLETE_CACHE_ON_PARENT_ID_KILL_SWITCH = 297] = "SUPERCOMPLETE_CACHE_ON_PARENT_ID_KILL_SWITCH",
        e[e.SUPERCOMPLETE_PRUNE_RESPONSE = 140] = "SUPERCOMPLETE_PRUNE_RESPONSE",
        e[e.SUPERCOMPLETE_PRUNE_MAX_INSERT_DELETE_LINE_DELTA = 141] = "SUPERCOMPLETE_PRUNE_MAX_INSERT_DELETE_LINE_DELTA",
        e[e.SUPERCOMPLETE_MODEL_CONFIG = 145] = "SUPERCOMPLETE_MODEL_CONFIG",
        e[e.SUPERCOMPLETE_ON_TAB = 151] = "SUPERCOMPLETE_ON_TAB",
        e[e.SUPERCOMPLETE_INLINE_PURE_DELETE = 171] = "SUPERCOMPLETE_INLINE_PURE_DELETE",
        e[e.SUPERCOMPLETE_INLINE_RICH_GHOST_TEXT_INSERTIONS = 218] = "SUPERCOMPLETE_INLINE_RICH_GHOST_TEXT_INSERTIONS",
        e[e.MODEL_CHAT_15305_VARIANTS = 267] = "MODEL_CHAT_15305_VARIANTS",
        e[e.MODEL_CHAT_19821_VARIANTS = 308] = "MODEL_CHAT_19821_VARIANTS",
        e[e.SUPERCOMPLETE_MAX_CONCURRENT_REQUESTS = 284] = "SUPERCOMPLETE_MAX_CONCURRENT_REQUESTS",
        e[e.COMMAND_PROMPT_CACHE_CONFIG = 255] = "COMMAND_PROMPT_CACHE_CONFIG",
        e[e.CUMULATIVE_PROMPT_CONFIG = 256] = "CUMULATIVE_PROMPT_CONFIG",
        e[e.CUMULATIVE_PROMPT_CASCADE_CONFIG = 279] = "CUMULATIVE_PROMPT_CASCADE_CONFIG",
        e[e.TAB_JUMP_CUMULATIVE_PROMPT_CONFIG = 301] = "TAB_JUMP_CUMULATIVE_PROMPT_CONFIG",
        e[e.COMPLETION_SPEED_SUPERCOMPLETE_RETENTION = 206] = "COMPLETION_SPEED_SUPERCOMPLETE_RETENTION",
        e[e.COMPLETION_SPEED_SUPERCOMPLETE_CACHE = 207] = "COMPLETION_SPEED_SUPERCOMPLETE_CACHE",
        e[e.COMPLETION_SPEED_PREDICTIVE_SUPERCOMPLETE = 208] = "COMPLETION_SPEED_PREDICTIVE_SUPERCOMPLETE",
        e[e.COMPLETION_SPEED_TAB_JUMP_CACHE = 209] = "COMPLETION_SPEED_TAB_JUMP_CACHE",
        e[e.COMPLETION_SPEED_PREDICTIVE_TAB_JUMP = 210] = "COMPLETION_SPEED_PREDICTIVE_TAB_JUMP",
        e[e.COMPLETION_SPEED_BLOCK_TAB_JUMP_ON_PREDICTIVE_SUPERCOMPLETE = 294] = "COMPLETION_SPEED_BLOCK_TAB_JUMP_ON_PREDICTIVE_SUPERCOMPLETE",
        e[e.JETBRAINS_USE_LEXICAL_EDITOR = 134] = "JETBRAINS_USE_LEXICAL_EDITOR",
        e[e.JETBRAINS_ENABLE_ONBOARDING = 137] = "JETBRAINS_ENABLE_ONBOARDING",
        e[e.ENABLE_AUTOCOMPLETE_DURING_INTELLISENSE = 146] = "ENABLE_AUTOCOMPLETE_DURING_INTELLISENSE",
        e[e.COMMAND_BOX_ON_TOP = 155] = "COMMAND_BOX_ON_TOP",
        e[e.CONTEXT_DOCUMENT_OUTLINE = 148] = "CONTEXT_DOCUMENT_OUTLINE",
        e[e.CONTEXT_ACTIVE_DOCUMENT_FRACTION = 149] = "CONTEXT_ACTIVE_DOCUMENT_FRACTION",
        e[e.CONTEXT_COMMAND_TRAJECTORY_PROMPT_CONFIG = 150] = "CONTEXT_COMMAND_TRAJECTORY_PROMPT_CONFIG",
        e[e.CONTEXT_FORCE_LOCAL_CONTEXT = 178] = "CONTEXT_FORCE_LOCAL_CONTEXT",
        e[e.CROSS_SELL_EXTENSION_DOWNLOAD_WINDSURF = 220] = "CROSS_SELL_EXTENSION_DOWNLOAD_WINDSURF",
        e[e.MODEL_LLAMA_3_1_70B_INSTRUCT_LONG_CONTEXT_VARIANTS = 295] = "MODEL_LLAMA_3_1_70B_INSTRUCT_LONG_CONTEXT_VARIANTS",
        e[e.KNOWLEDGE_BASE_PROMPT_FRACTION = 162] = "KNOWLEDGE_BASE_PROMPT_FRACTION",
        e[e.USE_AUTOCOMPLETE_MODEL_SERVER_SIDE = 163] = "USE_AUTOCOMPLETE_MODEL_SERVER_SIDE",
        e[e.SUPERCOMPLETE_NO_CONTEXT = 165] = "SUPERCOMPLETE_NO_CONTEXT",
        e[e.SUPERCOMPLETE_NO_ACTIVE_NODE = 166] = "SUPERCOMPLETE_NO_ACTIVE_NODE",
        e[e.TAB_JUMP_ENABLED = 168] = "TAB_JUMP_ENABLED",
        e[e.TAB_JUMP_ACCEPT_ENABLED = 169] = "TAB_JUMP_ACCEPT_ENABLED",
        e[e.TAB_JUMP_LINE_RADIUS = 177] = "TAB_JUMP_LINE_RADIUS",
        e[e.TAB_JUMP_MIN_FILTER_RADIUS = 197] = "TAB_JUMP_MIN_FILTER_RADIUS",
        e[e.TAB_JUMP_ON_ACCEPT_ONLY = 205] = "TAB_JUMP_ON_ACCEPT_ONLY",
        e[e.TAB_JUMP_FILTER_IN_SELECTION = 215] = "TAB_JUMP_FILTER_IN_SELECTION",
        e[e.TAB_JUMP_MODEL_CONFIG = 237] = "TAB_JUMP_MODEL_CONFIG",
        e[e.TAB_JUMP_FILTER_NO_OP = 238] = "TAB_JUMP_FILTER_NO_OP",
        e[e.TAB_JUMP_FILTER_REVERT = 239] = "TAB_JUMP_FILTER_REVERT",
        e[e.TAB_JUMP_FILTER_SCORE_THRESHOLD = 240] = "TAB_JUMP_FILTER_SCORE_THRESHOLD",
        e[e.TAB_JUMP_FILTER_WHITESPACE_ONLY = 241] = "TAB_JUMP_FILTER_WHITESPACE_ONLY",
        e[e.TAB_JUMP_FILTER_INSERTION_CAP = 242] = "TAB_JUMP_FILTER_INSERTION_CAP",
        e[e.TAB_JUMP_FILTER_DELETION_CAP = 243] = "TAB_JUMP_FILTER_DELETION_CAP",
        e[e.TAB_JUMP_PRUNE_RESPONSE = 260] = "TAB_JUMP_PRUNE_RESPONSE",
        e[e.TAB_JUMP_PRUNE_MAX_INSERT_DELETE_LINE_DELTA = 261] = "TAB_JUMP_PRUNE_MAX_INSERT_DELETE_LINE_DELTA",
        e[e.TAB_JUMP_STOP_TOKEN_MIDSTREAM = 317] = "TAB_JUMP_STOP_TOKEN_MIDSTREAM",
        e[e.VIEWED_FILE_TRACKER_CONFIG = 211] = "VIEWED_FILE_TRACKER_CONFIG",
        e[e.SNAPSHOT_TO_STEP_OPTIONS_OVERRIDE = 305] = "SNAPSHOT_TO_STEP_OPTIONS_OVERRIDE",
        e[e.STREAMING_EXTERNAL_COMMAND = 172] = "STREAMING_EXTERNAL_COMMAND",
        e[e.USE_SPECIAL_EDIT_CODE_BLOCK = 179] = "USE_SPECIAL_EDIT_CODE_BLOCK",
        e[e.ENABLE_BACKGROUND_RESEARCH = 184] = "ENABLE_BACKGROUND_RESEARCH",
        e[e.ENABLE_SUGGESTED_RESPONSES = 187] = "ENABLE_SUGGESTED_RESPONSES",
        e[e.ENABLE_RUN_COMMAND = 188] = "ENABLE_RUN_COMMAND",
        e[e.ENABLE_SHELL_COMMAND_TRAJECTORY = 189] = "ENABLE_SHELL_COMMAND_TRAJECTORY",
        e[e.CASCADE_BASE_MODEL_ID = 190] = "CASCADE_BASE_MODEL_ID",
        e[e.CASCADE_PLAN_BASED_CONFIG_OVERRIDE = 266] = "CASCADE_PLAN_BASED_CONFIG_OVERRIDE",
        e[e.CASCADE_GLOBAL_CONFIG_OVERRIDE = 212] = "CASCADE_GLOBAL_CONFIG_OVERRIDE",
        e[e.CASCADE_BACKGROUND_RESEARCH_CONFIG_OVERRIDE = 193] = "CASCADE_BACKGROUND_RESEARCH_CONFIG_OVERRIDE",
        e[e.CASCADE_ENFORCE_QUOTA = 204] = "CASCADE_ENFORCE_QUOTA",
        e[e.CASCADE_ENABLE_IDE_TERMINAL_EXECUTION = 217] = "CASCADE_ENABLE_IDE_TERMINAL_EXECUTION",
        e[e.CASCADE_ENABLE_AUTOMATED_MEMORIES = 224] = "CASCADE_ENABLE_AUTOMATED_MEMORIES",
        e[e.CASCADE_MEMORY_CONFIG_OVERRIDE = 314] = "CASCADE_MEMORY_CONFIG_OVERRIDE",
        e[e.CASCADE_USE_REPLACE_CONTENT_EDIT_TOOL = 228] = "CASCADE_USE_REPLACE_CONTENT_EDIT_TOOL",
        e[e.CASCADE_VIEW_FILE_TOOL_CONFIG_OVERRIDE = 258] = "CASCADE_VIEW_FILE_TOOL_CONFIG_OVERRIDE",
        e[e.CASCADE_USE_EXPERIMENT_CHECKPOINTER = 247] = "CASCADE_USE_EXPERIMENT_CHECKPOINTER",
        e[e.CASCADE_ENABLE_CUSTOM_RECIPES = 236] = "CASCADE_ENABLE_CUSTOM_RECIPES",
        e[e.CASCADE_ENABLE_MCP_TOOLS = 245] = "CASCADE_ENABLE_MCP_TOOLS",
        e[e.CASCADE_MODEL_CREDIT_MULTIPLIER = 248] = "CASCADE_MODEL_CREDIT_MULTIPLIER",
        e[e.CASCADE_AUTO_FIX_LINTS = 275] = "CASCADE_AUTO_FIX_LINTS",
        e[e.USE_ANTHROPIC_TOKEN_EFFICIENT_TOOLS_BETA = 296] = "USE_ANTHROPIC_TOKEN_EFFICIENT_TOOLS_BETA",
        e[e.CASCADE_USER_MEMORIES_IN_SYS_PROMPT = 289] = "CASCADE_USER_MEMORIES_IN_SYS_PROMPT",
        e[e.CASCADE_ENABLE_PROXY_WEB_SERVER = 290] = "CASCADE_ENABLE_PROXY_WEB_SERVER",
        e[e.COLLAPSE_ASSISTANT_MESSAGES = 312] = "COLLAPSE_ASSISTANT_MESSAGES",
        e[e.MODEL_CASCADE_20064_VARIANTS = 315] = "MODEL_CASCADE_20064_VARIANTS",
        e[e.CASCADE_WEB_SEARCH_ENABLED = 221] = "CASCADE_WEB_SEARCH_ENABLED",
        e[e.ENABLE_SMART_COPY = 181] = "ENABLE_SMART_COPY",
        e[e.ENABLE_COMMIT_MESSAGE_GENERATION = 185] = "ENABLE_COMMIT_MESSAGE_GENERATION",
        e[e.SKIP_CONSISTENCY_MANAGER = 194] = "SKIP_CONSISTENCY_MANAGER",
        e[e.FIREWORKS_ON_DEMAND_DEPLOYMENT = 276] = "FIREWORKS_ON_DEMAND_DEPLOYMENT",
        e[e.API_SERVER_CLIENT_USE_HTTP_2 = 202] = "API_SERVER_CLIENT_USE_HTTP_2",
        e[e.AUTOCOMPLETE_DEFAULT_DEBOUNCE_MS = 213] = "AUTOCOMPLETE_DEFAULT_DEBOUNCE_MS",
        e[e.AUTOCOMPLETE_FAST_DEBOUNCE_MS = 214] = "AUTOCOMPLETE_FAST_DEBOUNCE_MS",
        e[e.PROFILING_TELEMETRY_SAMPLE_RATE = 219] = "PROFILING_TELEMETRY_SAMPLE_RATE",
        e[e.STREAM_USER_SHELL_COMMANDS = 225] = "STREAM_USER_SHELL_COMMANDS",
        e[e.CASCADE_FILE_OVERVIEW_POPOVER_USE_IDE_STATE = 227] = "CASCADE_FILE_OVERVIEW_POPOVER_USE_IDE_STATE",
        e[e.CASCADE_USE_EVERGREEN_TOOLBAR = 244] = "CASCADE_USE_EVERGREEN_TOOLBAR",
        e[e.API_SERVER_PROMPT_CACHE_REPLICAS = 307] = "API_SERVER_PROMPT_CACHE_REPLICAS",
        e[e.API_SERVER_ENABLE_MORE_LOGGING = 272] = "API_SERVER_ENABLE_MORE_LOGGING",
        e[e.COMMAND_INJECT_USER_MEMORIES = 233] = "COMMAND_INJECT_USER_MEMORIES",
        e[e.AUTOCOMPLETE_HIDDEN_ERROR_REGEX = 234] = "AUTOCOMPLETE_HIDDEN_ERROR_REGEX",
        e[e.DISABLE_IDE_COMPLETIONS_DEBOUNCE = 278] = "DISABLE_IDE_COMPLETIONS_DEBOUNCE",
        e[e.COMPLETIONS_USE_COMBINED_MODEL = 249] = "COMPLETIONS_USE_COMBINED_MODEL",
        e[e.COMBINED_MODEL_USE_FULL_INSTRUCTION_FOR_RETRIEVAL = 264] = "COMBINED_MODEL_USE_FULL_INSTRUCTION_FOR_RETRIEVAL",
        e[e.MAX_PAST_TRAJECTORY_TOKENS_FOR_RETRIEVAL = 265] = "MAX_PAST_TRAJECTORY_TOKENS_FOR_RETRIEVAL",
        e[e.ENABLE_QUICK_ACTIONS = 250] = "ENABLE_QUICK_ACTIONS",
        e[e.QUICK_ACTIONS_WHITELIST_REGEX = 251] = "QUICK_ACTIONS_WHITELIST_REGEX",
        e[e.CASCADE_DEEPSEEK_R1_ACCESS = 252] = "CASCADE_DEEPSEEK_R1_ACCESS",
        e[e.CASCADE_DEEPSEEK_V3_ACCESS = 253] = "CASCADE_DEEPSEEK_V3_ACCESS",
        e[e.CASCADE_OPENAI_O3_MINI_ACCESS = 254] = "CASCADE_OPENAI_O3_MINI_ACCESS",
        e[e.CASCADE_NEW_MODELS_NUX = 259] = "CASCADE_NEW_MODELS_NUX",
        e[e.CASCADE_NEW_WAVE_2_MODELS_NUX = 270] = "CASCADE_NEW_WAVE_2_MODELS_NUX",
        e[e.SUPERCOMPLETE_FAST_DEBOUNCE = 262] = "SUPERCOMPLETE_FAST_DEBOUNCE",
        e[e.SUPERCOMPLETE_REGULAR_DEBOUNCE = 263] = "SUPERCOMPLETE_REGULAR_DEBOUNCE",
        e[e.XML_TOOL_PARSING_MODELS = 268] = "XML_TOOL_PARSING_MODELS",
        e[e.SUPERCOMPLETE_DONT_FILTER_MID_STREAMED = 269] = "SUPERCOMPLETE_DONT_FILTER_MID_STREAMED",
        e[e.COMPLETIONS_CCI_REFRESH_TIMEOUT_MS = 283] = "COMPLETIONS_CCI_REFRESH_TIMEOUT_MS",
        e[e.ANNOYANCE_MANAGER_MAX_NAVIGATION_RENDERS = 285] = "ANNOYANCE_MANAGER_MAX_NAVIGATION_RENDERS",
        e[e.ANNOYANCE_MANAGER_INLINE_PREVENTION_THRESHOLD_MS = 286] = "ANNOYANCE_MANAGER_INLINE_PREVENTION_THRESHOLD_MS",
        e[e.ANNOYANCE_MANAGER_INLINE_PREVENTION_MAX_INTENTIONAL_REJECTIONS = 287] = "ANNOYANCE_MANAGER_INLINE_PREVENTION_MAX_INTENTIONAL_REJECTIONS",
        e[e.ANNOYANCE_MANAGER_INLINE_PREVENTION_MAX_AUTO_REJECTIONS = 288] = "ANNOYANCE_MANAGER_INLINE_PREVENTION_MAX_AUTO_REJECTIONS",
        e[e.USE_CUSTOM_CHARACTER_DIFF = 292] = "USE_CUSTOM_CHARACTER_DIFF",
        e[e.CASCADE_TOOL_CALL_NUX = 299] = "CASCADE_TOOL_CALL_NUX",
        e[e.FORCE_NON_OPTIMIZED_DIFF = 298] = "FORCE_NON_OPTIMIZED_DIFF",
        e[e.CASCADE_WEB_APP_DEPLOYMENTS_ENABLED = 300] = "CASCADE_WEB_APP_DEPLOYMENTS_ENABLED",
        e[e.CASCADE_RECIPES_AT_MENTION_VISIBILITY = 316] = "CASCADE_RECIPES_AT_MENTION_VISIBILITY",
        e[e.IMPLICIT_USES_CLIPBOARD = 310] = "IMPLICIT_USES_CLIPBOARD",
        e[e.CASCADE_ADD_TO_IMPLICIT_TRAJECTORY = 306] = "CASCADE_ADD_TO_IMPLICIT_TRAJECTORY",
        e[e.DISABLE_SUPERCOMPLETE_PCW = 303] = "DISABLE_SUPERCOMPLETE_PCW",
        e[e.BLOCK_TAB_ON_SHOWN_AUTOCOMPLETE = 304] = "BLOCK_TAB_ON_SHOWN_AUTOCOMPLETE",
        e[e.CASCADE_WEB_SEARCH_NUX = 311] = "CASCADE_WEB_SEARCH_NUX"
    }(Be || (Be = {})),
    ye.util.setEnumType(Be, "exa.codeium_common_pb.ExperimentKey", [{
        no: 0,
        name: "UNSPECIFIED"
    }, {
        no: 3,
        name: "OTHER_DOCUMENTS"
    }, {
        no: 13,
        name: "ONLY_STOP_EOT"
    }, {
        no: 27,
        name: "INCREASE_MAX_NUM_TOKENS"
    }, {
        no: 35,
        name: "BLOCKING_REFRESH"
    }, {
        no: 36,
        name: "USE_INTERNAL_CHAT_MODEL"
    }, {
        no: 39,
        name: "INCREASE_MAX_NUM_TOKENS_MORE"
    }, {
        no: 44,
        name: "USE_CONTEXT_TOKEN"
    }, {
        no: 47,
        name: "RECORD_FILES"
    }, {
        no: 48,
        name: "NO_SAMPLER_EARLY_STOP"
    }, {
        no: 53,
        name: "CM_MEMORY_TELEMETRY"
    }, {
        no: 54,
        name: "ACTIVITY_CONTEXT_WEIGHT"
    }, {
        no: 55,
        name: "LANGUAGE_SERVER_VERSION"
    }, {
        no: 56,
        name: "LANGUAGE_SERVER_AUTO_RELOAD"
    }, {
        no: 60,
        name: "ONLY_MULTILINE"
    }, {
        no: 61,
        name: "USE_CHAT_MODEL_7984"
    }, {
        no: 62,
        name: "CONTEXT_FOR_NONGENERIC_CHAT"
    }, {
        no: 64,
        name: "USE_AUTOCOMPLETE_MODEL"
    }, {
        no: 68,
        name: "USE_ATTRIBUTION_FOR_INDIVIDUAL_TIER"
    }, {
        no: 73,
        name: "USE_GPT_4_TURBO"
    }, {
        no: 78,
        name: "CHAT_MODEL_CONFIG"
    }, {
        no: 79,
        name: "COMMAND_MODEL_CONFIG"
    }, {
        no: 80,
        name: "MIDDLE_MODE_TOKEN_VARIANT"
    }, {
        no: 81,
        name: "MIN_IDE_VERSION"
    }, {
        no: 84,
        name: "API_SERVER_VERBOSE_ERRORS"
    }, {
        no: 86,
        name: "DEFAULT_ENABLE_SEARCH"
    }, {
        no: 87,
        name: "COLLECT_ONBOARDING_EVENTS"
    }, {
        no: 88,
        name: "COLLECT_EXAMPLE_COMPLETIONS"
    }, {
        no: 89,
        name: "USE_MULTILINE_MODEL"
    }, {
        no: 91,
        name: "OPEN_UNIVERSITY_ON_STARTUP"
    }, {
        no: 92,
        name: "ATTRIBUTION_KILL_SWITCH"
    }, {
        no: 94,
        name: "FAST_MULTILINE"
    }, {
        no: 95,
        name: "SINGLE_COMPLETION"
    }, {
        no: 96,
        name: "STOP_FIRST_NON_WHITESPACE_LINE"
    }, {
        no: 98,
        name: "TEAMS_UPGRADE_FOR_NONGENERIC_CHAT"
    }, {
        no: 99,
        name: "MODEL_8341_VARIANTS"
    }, {
        no: 102,
        name: "CORTEX_CONFIG"
    }, {
        no: 103,
        name: "MODEL_CHAT_11121_VARIANTS"
    }, {
        no: 105,
        name: "INCLUDE_PROMPT_COMPONENTS"
    }, {
        no: 106,
        name: "NON_TEAMS_KILL_SWITCH"
    }, {
        no: 108,
        name: "PERSIST_CODE_TRACKER"
    }, {
        no: 110,
        name: "RUN_RESEARCH_STATE_PROVIDER"
    }, {
        no: 112,
        name: "API_SERVER_LIVENESS_PROBE"
    }, {
        no: 113,
        name: "IMPLICIT_PLAN"
    }, {
        no: 114,
        name: "CHAT_COMPLETION_TOKENS_SOFT_LIMIT"
    }, {
        no: 115,
        name: "CHAT_TOKENS_SOFT_LIMIT"
    }, {
        no: 117,
        name: "MQUERY_SCORER_WITH_FALLBACK"
    }, {
        no: 118,
        name: "DISABLE_COMPLETIONS_CACHE"
    }, {
        no: 119,
        name: "LLAMA3_405B_KILL_SWITCH"
    }, {
        no: 120,
        name: "USE_IMPLICIT_TRAJECTORY"
    }, {
        no: 121,
        name: "USE_COMMAND_DOCSTRING_GENERATION"
    }, {
        no: 122,
        name: "JETBRAINS_USE_COMMAND_DOCSTRING_GENERATION"
    }, {
        no: 123,
        name: "ENABLE_SUPERCOMPLETE"
    }, {
        no: 124,
        name: "JETBRAINS_ENABLE_AUTOUPDATE"
    }, {
        no: 136,
        name: "SENTRY"
    }, {
        no: 139,
        name: "DISABLE_INFERENCE_API_SERVER"
    }, {
        no: 144,
        name: "FAST_SINGLELINE"
    }, {
        no: 147,
        name: "R2_LANGUAGE_SERVER_DOWNLOAD"
    }, {
        no: 152,
        name: "SPLIT_MODEL"
    }, {
        no: 153,
        name: "PIN_RECENT_FILES"
    }, {
        no: 164,
        name: "COMMIT_GRAPH"
    }, {
        no: 198,
        name: "WINDSURF_SENTRY_SAMPLE_RATE"
    }, {
        no: 199,
        name: "MODEL_15133_VARIANTS"
    }, {
        no: 142,
        name: "MODEL_14602_TOKENS"
    }, {
        no: 173,
        name: "MODEL_15133_TOKENS"
    }, {
        no: 174,
        name: "MODEL_15302_TOKENS"
    }, {
        no: 175,
        name: "MODEL_15335_TOKENS"
    }, {
        no: 180,
        name: "MODEL_15931_TOKENS"
    }, {
        no: 186,
        name: "MODEL_CHAT_15729_TOKENS"
    }, {
        no: 195,
        name: "MODEL_CHAT_16579_TOKENS"
    }, {
        no: 196,
        name: "MODEL_CHAT_16579_CRUSOE_TOKENS"
    }, {
        no: 235,
        name: "MODEL_CHAT_18805_TOKENS"
    }, {
        no: 257,
        name: "MODEL_CHAT_19040_TOKENS"
    }, {
        no: 280,
        name: "MODEL_CHAT_19820_TOKENS"
    }, {
        no: 281,
        name: "MODEL_CHAT_19821_TOKENS"
    }, {
        no: 318,
        name: "MODEL_CHAT_19821_CRUSOE_TOKENS"
    }, {
        no: 282,
        name: "MODEL_CHAT_19822_TOKENS"
    }, {
        no: 167,
        name: "MODEL_CHAT_15305_TOKENS"
    }, {
        no: 229,
        name: "MODEL_CHAT_15600_TOKENS"
    }, {
        no: 230,
        name: "MODEL_CHAT_16801_TOKENS"
    }, {
        no: 277,
        name: "MODEL_CHAT_18468_TOKENS"
    }, {
        no: 291,
        name: "MODEL_CHAT_19484_TOKENS"
    }, {
        no: 302,
        name: "MODEL_CHAT_20706_TOKENS"
    }, {
        no: 158,
        name: "API_SERVER_CUTOFF"
    }, {
        no: 159,
        name: "FAST_SPEED_KILL_SWITCH"
    }, {
        no: 160,
        name: "PREDICTIVE_MULTILINE"
    }, {
        no: 125,
        name: "SUPERCOMPLETE_FILTER_REVERT"
    }, {
        no: 126,
        name: "SUPERCOMPLETE_FILTER_PREFIX_MATCH"
    }, {
        no: 127,
        name: "SUPERCOMPLETE_FILTER_SCORE_THRESHOLD"
    }, {
        no: 128,
        name: "SUPERCOMPLETE_FILTER_INSERTION_CAP"
    }, {
        no: 133,
        name: "SUPERCOMPLETE_FILTER_DELETION_CAP"
    }, {
        no: 156,
        name: "SUPERCOMPLETE_FILTER_WHITESPACE_ONLY"
    }, {
        no: 170,
        name: "SUPERCOMPLETE_FILTER_NO_OP"
    }, {
        no: 176,
        name: "SUPERCOMPLETE_FILTER_SUFFIX_MATCH"
    }, {
        no: 182,
        name: "SUPERCOMPLETE_FILTER_PREVIOUSLY_SHOWN"
    }, {
        no: 129,
        name: "SUPERCOMPLETE_MIN_SCORE"
    }, {
        no: 130,
        name: "SUPERCOMPLETE_MAX_INSERTIONS"
    }, {
        no: 131,
        name: "SUPERCOMPLETE_LINE_RADIUS"
    }, {
        no: 132,
        name: "SUPERCOMPLETE_MAX_DELETIONS"
    }, {
        no: 135,
        name: "SUPERCOMPLETE_USE_CURRENT_LINE"
    }, {
        no: 138,
        name: "SUPERCOMPLETE_RECENT_STEPS_DURATION"
    }, {
        no: 143,
        name: "SUPERCOMPLETE_USE_CODE_DIAGNOSTICS"
    }, {
        no: 223,
        name: "SUPERCOMPLETE_DIAGNOSTIC_SEVERITY_THRESHOLD"
    }, {
        no: 232,
        name: "SUPERCOMPLETE_CODE_DIAGNOSTICS_TOP_K"
    }, {
        no: 154,
        name: "SUPERCOMPLETE_MAX_TRAJECTORY_STEPS"
    }, {
        no: 157,
        name: "SUPERCOMPLETE_ON_ACCEPT_ONLY"
    }, {
        no: 183,
        name: "SUPERCOMPLETE_TEMPERATURE"
    }, {
        no: 203,
        name: "SUPERCOMPLETE_MAX_TRAJECTORY_STEP_SIZE"
    }, {
        no: 231,
        name: "SUPERCOMPLETE_DISABLE_TYPING_CACHE"
    }, {
        no: 293,
        name: "SUPERCOMPLETE_ALWAYS_USE_CACHE_ON_EQUAL_STATE"
    }, {
        no: 297,
        name: "SUPERCOMPLETE_CACHE_ON_PARENT_ID_KILL_SWITCH"
    }, {
        no: 140,
        name: "SUPERCOMPLETE_PRUNE_RESPONSE"
    }, {
        no: 141,
        name: "SUPERCOMPLETE_PRUNE_MAX_INSERT_DELETE_LINE_DELTA"
    }, {
        no: 145,
        name: "SUPERCOMPLETE_MODEL_CONFIG"
    }, {
        no: 151,
        name: "SUPERCOMPLETE_ON_TAB"
    }, {
        no: 171,
        name: "SUPERCOMPLETE_INLINE_PURE_DELETE"
    }, {
        no: 218,
        name: "SUPERCOMPLETE_INLINE_RICH_GHOST_TEXT_INSERTIONS"
    }, {
        no: 267,
        name: "MODEL_CHAT_15305_VARIANTS"
    }, {
        no: 308,
        name: "MODEL_CHAT_19821_VARIANTS"
    }, {
        no: 284,
        name: "SUPERCOMPLETE_MAX_CONCURRENT_REQUESTS"
    }, {
        no: 255,
        name: "COMMAND_PROMPT_CACHE_CONFIG"
    }, {
        no: 256,
        name: "CUMULATIVE_PROMPT_CONFIG"
    }, {
        no: 279,
        name: "CUMULATIVE_PROMPT_CASCADE_CONFIG"
    }, {
        no: 301,
        name: "TAB_JUMP_CUMULATIVE_PROMPT_CONFIG"
    }, {
        no: 206,
        name: "COMPLETION_SPEED_SUPERCOMPLETE_RETENTION"
    }, {
        no: 207,
        name: "COMPLETION_SPEED_SUPERCOMPLETE_CACHE"
    }, {
        no: 208,
        name: "COMPLETION_SPEED_PREDICTIVE_SUPERCOMPLETE"
    }, {
        no: 209,
        name: "COMPLETION_SPEED_TAB_JUMP_CACHE"
    }, {
        no: 210,
        name: "COMPLETION_SPEED_PREDICTIVE_TAB_JUMP"
    }, {
        no: 294,
        name: "COMPLETION_SPEED_BLOCK_TAB_JUMP_ON_PREDICTIVE_SUPERCOMPLETE"
    }, {
        no: 134,
        name: "JETBRAINS_USE_LEXICAL_EDITOR"
    }, {
        no: 137,
        name: "JETBRAINS_ENABLE_ONBOARDING"
    }, {
        no: 146,
        name: "ENABLE_AUTOCOMPLETE_DURING_INTELLISENSE"
    }, {
        no: 155,
        name: "COMMAND_BOX_ON_TOP"
    }, {
        no: 148,
        name: "CONTEXT_DOCUMENT_OUTLINE"
    }, {
        no: 149,
        name: "CONTEXT_ACTIVE_DOCUMENT_FRACTION"
    }, {
        no: 150,
        name: "CONTEXT_COMMAND_TRAJECTORY_PROMPT_CONFIG"
    }, {
        no: 178,
        name: "CONTEXT_FORCE_LOCAL_CONTEXT"
    }, {
        no: 220,
        name: "CROSS_SELL_EXTENSION_DOWNLOAD_WINDSURF"
    }, {
        no: 295,
        name: "MODEL_LLAMA_3_1_70B_INSTRUCT_LONG_CONTEXT_VARIANTS"
    }, {
        no: 162,
        name: "KNOWLEDGE_BASE_PROMPT_FRACTION"
    }, {
        no: 163,
        name: "USE_AUTOCOMPLETE_MODEL_SERVER_SIDE"
    }, {
        no: 165,
        name: "SUPERCOMPLETE_NO_CONTEXT"
    }, {
        no: 166,
        name: "SUPERCOMPLETE_NO_ACTIVE_NODE"
    }, {
        no: 168,
        name: "TAB_JUMP_ENABLED"
    }, {
        no: 169,
        name: "TAB_JUMP_ACCEPT_ENABLED"
    }, {
        no: 177,
        name: "TAB_JUMP_LINE_RADIUS"
    }, {
        no: 197,
        name: "TAB_JUMP_MIN_FILTER_RADIUS"
    }, {
        no: 205,
        name: "TAB_JUMP_ON_ACCEPT_ONLY"
    }, {
        no: 215,
        name: "TAB_JUMP_FILTER_IN_SELECTION"
    }, {
        no: 237,
        name: "TAB_JUMP_MODEL_CONFIG"
    }, {
        no: 238,
        name: "TAB_JUMP_FILTER_NO_OP"
    }, {
        no: 239,
        name: "TAB_JUMP_FILTER_REVERT"
    }, {
        no: 240,
        name: "TAB_JUMP_FILTER_SCORE_THRESHOLD"
    }, {
        no: 241,
        name: "TAB_JUMP_FILTER_WHITESPACE_ONLY"
    }, {
        no: 242,
        name: "TAB_JUMP_FILTER_INSERTION_CAP"
    }, {
        no: 243,
        name: "TAB_JUMP_FILTER_DELETION_CAP"
    }, {
        no: 260,
        name: "TAB_JUMP_PRUNE_RESPONSE"
    }, {
        no: 261,
        name: "TAB_JUMP_PRUNE_MAX_INSERT_DELETE_LINE_DELTA"
    }, {
        no: 317,
        name: "TAB_JUMP_STOP_TOKEN_MIDSTREAM"
    }, {
        no: 211,
        name: "VIEWED_FILE_TRACKER_CONFIG"
    }, {
        no: 305,
        name: "SNAPSHOT_TO_STEP_OPTIONS_OVERRIDE"
    }, {
        no: 172,
        name: "STREAMING_EXTERNAL_COMMAND"
    }, {
        no: 179,
        name: "USE_SPECIAL_EDIT_CODE_BLOCK"
    }, {
        no: 184,
        name: "ENABLE_BACKGROUND_RESEARCH"
    }, {
        no: 187,
        name: "ENABLE_SUGGESTED_RESPONSES"
    }, {
        no: 188,
        name: "ENABLE_RUN_COMMAND"
    }, {
        no: 189,
        name: "ENABLE_SHELL_COMMAND_TRAJECTORY"
    }, {
        no: 190,
        name: "CASCADE_BASE_MODEL_ID"
    }, {
        no: 266,
        name: "CASCADE_PLAN_BASED_CONFIG_OVERRIDE"
    }, {
        no: 212,
        name: "CASCADE_GLOBAL_CONFIG_OVERRIDE"
    }, {
        no: 193,
        name: "CASCADE_BACKGROUND_RESEARCH_CONFIG_OVERRIDE"
    }, {
        no: 204,
        name: "CASCADE_ENFORCE_QUOTA"
    }, {
        no: 217,
        name: "CASCADE_ENABLE_IDE_TERMINAL_EXECUTION"
    }, {
        no: 224,
        name: "CASCADE_ENABLE_AUTOMATED_MEMORIES"
    }, {
        no: 314,
        name: "CASCADE_MEMORY_CONFIG_OVERRIDE"
    }, {
        no: 228,
        name: "CASCADE_USE_REPLACE_CONTENT_EDIT_TOOL"
    }, {
        no: 258,
        name: "CASCADE_VIEW_FILE_TOOL_CONFIG_OVERRIDE"
    }, {
        no: 247,
        name: "CASCADE_USE_EXPERIMENT_CHECKPOINTER"
    }, {
        no: 236,
        name: "CASCADE_ENABLE_CUSTOM_RECIPES"
    }, {
        no: 245,
        name: "CASCADE_ENABLE_MCP_TOOLS"
    }, {
        no: 248,
        name: "CASCADE_MODEL_CREDIT_MULTIPLIER"
    }, {
        no: 275,
        name: "CASCADE_AUTO_FIX_LINTS"
    }, {
        no: 296,
        name: "USE_ANTHROPIC_TOKEN_EFFICIENT_TOOLS_BETA"
    }, {
        no: 289,
        name: "CASCADE_USER_MEMORIES_IN_SYS_PROMPT"
    }, {
        no: 290,
        name: "CASCADE_ENABLE_PROXY_WEB_SERVER"
    }, {
        no: 312,
        name: "COLLAPSE_ASSISTANT_MESSAGES"
    }, {
        no: 315,
        name: "MODEL_CASCADE_20064_VARIANTS"
    }, {
        no: 221,
        name: "CASCADE_WEB_SEARCH_ENABLED"
    }, {
        no: 181,
        name: "ENABLE_SMART_COPY"
    }, {
        no: 185,
        name: "ENABLE_COMMIT_MESSAGE_GENERATION"
    }, {
        no: 194,
        name: "SKIP_CONSISTENCY_MANAGER"
    }, {
        no: 276,
        name: "FIREWORKS_ON_DEMAND_DEPLOYMENT"
    }, {
        no: 202,
        name: "API_SERVER_CLIENT_USE_HTTP_2"
    }, {
        no: 213,
        name: "AUTOCOMPLETE_DEFAULT_DEBOUNCE_MS"
    }, {
        no: 214,
        name: "AUTOCOMPLETE_FAST_DEBOUNCE_MS"
    }, {
        no: 219,
        name: "PROFILING_TELEMETRY_SAMPLE_RATE"
    }, {
        no: 225,
        name: "STREAM_USER_SHELL_COMMANDS"
    }, {
        no: 227,
        name: "CASCADE_FILE_OVERVIEW_POPOVER_USE_IDE_STATE"
    }, {
        no: 244,
        name: "CASCADE_USE_EVERGREEN_TOOLBAR"
    }, {
        no: 307,
        name: "API_SERVER_PROMPT_CACHE_REPLICAS"
    }, {
        no: 272,
        name: "API_SERVER_ENABLE_MORE_LOGGING"
    }, {
        no: 233,
        name: "COMMAND_INJECT_USER_MEMORIES"
    }, {
        no: 234,
        name: "AUTOCOMPLETE_HIDDEN_ERROR_REGEX"
    }, {
        no: 278,
        name: "DISABLE_IDE_COMPLETIONS_DEBOUNCE"
    }, {
        no: 249,
        name: "COMPLETIONS_USE_COMBINED_MODEL"
    }, {
        no: 264,
        name: "COMBINED_MODEL_USE_FULL_INSTRUCTION_FOR_RETRIEVAL"
    }, {
        no: 265,
        name: "MAX_PAST_TRAJECTORY_TOKENS_FOR_RETRIEVAL"
    }, {
        no: 250,
        name: "ENABLE_QUICK_ACTIONS"
    }, {
        no: 251,
        name: "QUICK_ACTIONS_WHITELIST_REGEX"
    }, {
        no: 252,
        name: "CASCADE_DEEPSEEK_R1_ACCESS"
    }, {
        no: 253,
        name: "CASCADE_DEEPSEEK_V3_ACCESS"
    }, {
        no: 254,
        name: "CASCADE_OPENAI_O3_MINI_ACCESS"
    }, {
        no: 259,
        name: "CASCADE_NEW_MODELS_NUX"
    }, {
        no: 270,
        name: "CASCADE_NEW_WAVE_2_MODELS_NUX"
    }, {
        no: 262,
        name: "SUPERCOMPLETE_FAST_DEBOUNCE"
    }, {
        no: 263,
        name: "SUPERCOMPLETE_REGULAR_DEBOUNCE"
    }, {
        no: 268,
        name: "XML_TOOL_PARSING_MODELS"
    }, {
        no: 269,
        name: "SUPERCOMPLETE_DONT_FILTER_MID_STREAMED"
    }, {
        no: 283,
        name: "COMPLETIONS_CCI_REFRESH_TIMEOUT_MS"
    }, {
        no: 285,
        name: "ANNOYANCE_MANAGER_MAX_NAVIGATION_RENDERS"
    }, {
        no: 286,
        name: "ANNOYANCE_MANAGER_INLINE_PREVENTION_THRESHOLD_MS"
    }, {
        no: 287,
        name: "ANNOYANCE_MANAGER_INLINE_PREVENTION_MAX_INTENTIONAL_REJECTIONS"
    }, {
        no: 288,
        name: "ANNOYANCE_MANAGER_INLINE_PREVENTION_MAX_AUTO_REJECTIONS"
    }, {
        no: 292,
        name: "USE_CUSTOM_CHARACTER_DIFF"
    }, {
        no: 299,
        name: "CASCADE_TOOL_CALL_NUX"
    }, {
        no: 298,
        name: "FORCE_NON_OPTIMIZED_DIFF"
    }, {
        no: 300,
        name: "CASCADE_WEB_APP_DEPLOYMENTS_ENABLED"
    }, {
        no: 316,
        name: "CASCADE_RECIPES_AT_MENTION_VISIBILITY"
    }, {
        no: 310,
        name: "IMPLICIT_USES_CLIPBOARD"
    }, {
        no: 306,
        name: "CASCADE_ADD_TO_IMPLICIT_TRAJECTORY"
    }, {
        no: 303,
        name: "DISABLE_SUPERCOMPLETE_PCW"
    }, {
        no: 304,
        name: "BLOCK_TAB_ON_SHOWN_AUTOCOMPLETE"
    }, {
        no: 311,
        name: "CASCADE_WEB_SEARCH_NUX"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.EXTENSION = 1] = "EXTENSION",
        e[e.LANGUAGE_SERVER = 2] = "LANGUAGE_SERVER",
        e[e.API_SERVER = 3] = "API_SERVER"
    }(he || (he = {})),
    ye.util.setEnumType(he, "exa.codeium_common_pb.ExperimentSource", [{
        no: 0,
        name: "EXPERIMENT_SOURCE_UNSPECIFIED"
    }, {
        no: 1,
        name: "EXPERIMENT_SOURCE_EXTENSION"
    }, {
        no: 2,
        name: "EXPERIMENT_SOURCE_LANGUAGE_SERVER"
    }, {
        no: 3,
        name: "EXPERIMENT_SOURCE_API_SERVER"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.CASCADE_BASE = 1] = "CASCADE_BASE"
    }(Fe || (Fe = {})),
    ye.util.setEnumType(Fe, "exa.codeium_common_pb.ModelAlias", [{
        no: 0,
        name: "MODEL_ALIAS_UNSPECIFIED"
    }, {
        no: 1,
        name: "MODEL_ALIAS_CASCADE_BASE"
    }]),
    function(e) {
        e[e.MODEL_UNSPECIFIED = 0] = "MODEL_UNSPECIFIED",
        e[e.MODEL_EMBED_6591 = 20] = "MODEL_EMBED_6591",
        e[e.MODEL_8341 = 33] = "MODEL_8341",
        e[e.MODEL_8528 = 42] = "MODEL_8528",
        e[e.MODEL_9024 = 41] = "MODEL_9024",
        e[e.MODEL_14602 = 112] = "MODEL_14602",
        e[e.MODEL_15133 = 115] = "MODEL_15133",
        e[e.MODEL_15302 = 119] = "MODEL_15302",
        e[e.MODEL_15335 = 121] = "MODEL_15335",
        e[e.MODEL_15336 = 122] = "MODEL_15336",
        e[e.MODEL_15931 = 167] = "MODEL_15931",
        e[e.MODEL_QUERY_9905 = 48] = "MODEL_QUERY_9905",
        e[e.MODEL_QUERY_11791 = 66] = "MODEL_QUERY_11791",
        e[e.MODEL_CHAT_11120 = 57] = "MODEL_CHAT_11120",
        e[e.MODEL_CHAT_11121 = 58] = "MODEL_CHAT_11121",
        e[e.MODEL_CHAT_12119 = 70] = "MODEL_CHAT_12119",
        e[e.MODEL_CHAT_12121 = 69] = "MODEL_CHAT_12121",
        e[e.MODEL_CHAT_12437 = 74] = "MODEL_CHAT_12437",
        e[e.MODEL_CHAT_12491 = 76] = "MODEL_CHAT_12491",
        e[e.MODEL_CHAT_12623 = 78] = "MODEL_CHAT_12623",
        e[e.MODEL_CHAT_12950 = 79] = "MODEL_CHAT_12950",
        e[e.MODEL_CHAT_12968 = 101] = "MODEL_CHAT_12968",
        e[e.MODEL_CHAT_13404 = 102] = "MODEL_CHAT_13404",
        e[e.MODEL_CHAT_13566 = 103] = "MODEL_CHAT_13566",
        e[e.MODEL_CHAT_13930 = 108] = "MODEL_CHAT_13930",
        e[e.MODEL_CHAT_14255 = 110] = "MODEL_CHAT_14255",
        e[e.MODEL_CHAT_14256 = 111] = "MODEL_CHAT_14256",
        e[e.MODEL_CHAT_14942 = 114] = "MODEL_CHAT_14942",
        e[e.MODEL_CHAT_15305 = 120] = "MODEL_CHAT_15305",
        e[e.MODEL_CHAT_15600 = 123] = "MODEL_CHAT_15600",
        e[e.MODEL_CHAT_16801 = 124] = "MODEL_CHAT_16801",
        e[e.MODEL_CHAT_16718 = 175] = "MODEL_CHAT_16718",
        e[e.MODEL_CHAT_15729 = 168] = "MODEL_CHAT_15729",
        e[e.MODEL_CHAT_16579 = 173] = "MODEL_CHAT_16579",
        e[e.MODEL_CHAT_16579_CRUSOE = 174] = "MODEL_CHAT_16579_CRUSOE",
        e[e.MODEL_CHAT_18805 = 181] = "MODEL_CHAT_18805",
        e[e.MODEL_CHAT_18468 = 210] = "MODEL_CHAT_18468",
        e[e.MODEL_CHAT_19484 = 233] = "MODEL_CHAT_19484",
        e[e.MODEL_CHAT_20706 = 235] = "MODEL_CHAT_20706",
        e[e.MODEL_CHAT_21779 = 245] = "MODEL_CHAT_21779",
        e[e.MODEL_CHAT_19040 = 211] = "MODEL_CHAT_19040",
        e[e.MODEL_CHAT_19820 = 229] = "MODEL_CHAT_19820",
        e[e.MODEL_CHAT_19821 = 230] = "MODEL_CHAT_19821",
        e[e.MODEL_CHAT_19821_CRUSOE = 244] = "MODEL_CHAT_19821_CRUSOE",
        e[e.MODEL_CHAT_19822 = 231] = "MODEL_CHAT_19822",
        e[e.MODEL_CASCADE_20064 = 225] = "MODEL_CASCADE_20064",
        e[e.MODEL_CASCADE_20065 = 236] = "MODEL_CASCADE_20065",
        e[e.MODEL_CASCADE_20066 = 237] = "MODEL_CASCADE_20066",
        e[e.MODEL_CASCADE_20067 = 238] = "MODEL_CASCADE_20067",
        e[e.MODEL_CASCADE_20068 = 239] = "MODEL_CASCADE_20068",
        e[e.MODEL_CASCADE_20069 = 240] = "MODEL_CASCADE_20069",
        e[e.MODEL_DEEPSEEK_V3_INTERNAL = 247] = "MODEL_DEEPSEEK_V3_INTERNAL",
        e[e.MODEL_DEEPSEEK_V3_0324_INTERNAL = 248] = "MODEL_DEEPSEEK_V3_0324_INTERNAL",
        e[e.MODEL_DEEPSEEK_R1_INTERNAL = 249] = "MODEL_DEEPSEEK_R1_INTERNAL",
        e[e.MODEL_ANTHROPIC_WINDSURF_RESEARCH = 241] = "MODEL_ANTHROPIC_WINDSURF_RESEARCH",
        e[e.MODEL_ANTHROPIC_WINDSURF_RESEARCH_THINKING = 242] = "MODEL_ANTHROPIC_WINDSURF_RESEARCH_THINKING",
        e[e.MODEL_DRAFT_11408 = 65] = "MODEL_DRAFT_11408",
        e[e.MODEL_DRAFT_CHAT_11883 = 67] = "MODEL_DRAFT_CHAT_11883",
        e[e.MODEL_DRAFT_CHAT_12196 = 72] = "MODEL_DRAFT_CHAT_12196",
        e[e.MODEL_DRAFT_CHAT_12413 = 73] = "MODEL_DRAFT_CHAT_12413",
        e[e.MODEL_DRAFT_CHAT_13175 = 104] = "MODEL_DRAFT_CHAT_13175",
        e[e.MODEL_DRAFT_CHAT_19823 = 232] = "MODEL_DRAFT_CHAT_19823",
        e[e.MODEL_DRAFT_CHAT_20707 = 243] = "MODEL_DRAFT_CHAT_20707",
        e[e.MODEL_CHAT_3_5_TURBO = 28] = "MODEL_CHAT_3_5_TURBO",
        e[e.MODEL_CHAT_GPT_4 = 30] = "MODEL_CHAT_GPT_4",
        e[e.MODEL_CHAT_GPT_4_1106_PREVIEW = 37] = "MODEL_CHAT_GPT_4_1106_PREVIEW",
        e[e.MODEL_TEXT_EMBEDDING_OPENAI_ADA = 91] = "MODEL_TEXT_EMBEDDING_OPENAI_ADA",
        e[e.MODEL_TEXT_EMBEDDING_OPENAI_3_SMALL = 163] = "MODEL_TEXT_EMBEDDING_OPENAI_3_SMALL",
        e[e.MODEL_TEXT_EMBEDDING_OPENAI_3_LARGE = 164] = "MODEL_TEXT_EMBEDDING_OPENAI_3_LARGE",
        e[e.MODEL_CHAT_GPT_4O_2024_05_13 = 71] = "MODEL_CHAT_GPT_4O_2024_05_13",
        e[e.MODEL_CHAT_GPT_4O_2024_08_06 = 109] = "MODEL_CHAT_GPT_4O_2024_08_06",
        e[e.MODEL_CHAT_GPT_4O_MINI_2024_07_18 = 113] = "MODEL_CHAT_GPT_4O_MINI_2024_07_18",
        e[e.MODEL_CHAT_O1_PREVIEW = 117] = "MODEL_CHAT_O1_PREVIEW",
        e[e.MODEL_CHAT_O1_MINI = 118] = "MODEL_CHAT_O1_MINI",
        e[e.MODEL_CHAT_O1 = 170] = "MODEL_CHAT_O1",
        e[e.MODEL_CHAT_O3_MINI = 207] = "MODEL_CHAT_O3_MINI",
        e[e.MODEL_CHAT_O3_MINI_LOW = 213] = "MODEL_CHAT_O3_MINI_LOW",
        e[e.MODEL_CHAT_O3_MINI_HIGH = 214] = "MODEL_CHAT_O3_MINI_HIGH",
        e[e.MODEL_CHAT_O3 = 218] = "MODEL_CHAT_O3",
        e[e.MODEL_CHAT_GPT_4_5 = 228] = "MODEL_CHAT_GPT_4_5",
        e[e.MODEL_GOOGLE_GEMINI_1_0_PRO = 61] = "MODEL_GOOGLE_GEMINI_1_0_PRO",
        e[e.MODEL_GOOGLE_GEMINI_1_5_PRO = 62] = "MODEL_GOOGLE_GEMINI_1_5_PRO",
        e[e.MODEL_GOOGLE_GEMINI_EXP_1206 = 183] = "MODEL_GOOGLE_GEMINI_EXP_1206",
        e[e.MODEL_GOOGLE_GEMINI_2_0_FLASH = 184] = "MODEL_GOOGLE_GEMINI_2_0_FLASH",
        e[e.MODEL_GOOGLE_GEMINI_2_5_PRO = 246] = "MODEL_GOOGLE_GEMINI_2_5_PRO",
        e[e.MODEL_CLAUDE_3_OPUS_20240229 = 63] = "MODEL_CLAUDE_3_OPUS_20240229",
        e[e.MODEL_CLAUDE_3_SONNET_20240229 = 64] = "MODEL_CLAUDE_3_SONNET_20240229",
        e[e.MODEL_CLAUDE_3_5_SONNET_20240620 = 80] = "MODEL_CLAUDE_3_5_SONNET_20240620",
        e[e.MODEL_CLAUDE_3_5_SONNET_20241022 = 166] = "MODEL_CLAUDE_3_5_SONNET_20241022",
        e[e.MODEL_CLAUDE_3_5_HAIKU_20241022 = 171] = "MODEL_CLAUDE_3_5_HAIKU_20241022",
        e[e.MODEL_CLAUDE_3_HAIKU_20240307 = 172] = "MODEL_CLAUDE_3_HAIKU_20240307",
        e[e.MODEL_CLAUDE_3_7_SONNET_20250219 = 226] = "MODEL_CLAUDE_3_7_SONNET_20250219",
        e[e.MODEL_CLAUDE_3_7_SONNET_20250219_THINKING = 227] = "MODEL_CLAUDE_3_7_SONNET_20250219_THINKING",
        e[e.MODEL_TOGETHERAI_TEXT_EMBEDDING_M2_BERT = 81] = "MODEL_TOGETHERAI_TEXT_EMBEDDING_M2_BERT",
        e[e.MODEL_TOGETHERAI_LLAMA_3_1_8B_INSTRUCT = 165] = "MODEL_TOGETHERAI_LLAMA_3_1_8B_INSTRUCT",
        e[e.MODEL_HUGGING_FACE_TEXT_EMBEDDING_M2_BERT = 82] = "MODEL_HUGGING_FACE_TEXT_EMBEDDING_M2_BERT",
        e[e.MODEL_HUGGING_FACE_TEXT_EMBEDDING_UAE_CODE = 83] = "MODEL_HUGGING_FACE_TEXT_EMBEDDING_UAE_CODE",
        e[e.MODEL_HUGGING_FACE_TEXT_EMBEDDING_BGE = 84] = "MODEL_HUGGING_FACE_TEXT_EMBEDDING_BGE",
        e[e.MODEL_HUGGING_FACE_TEXT_EMBEDDING_BLADE = 85] = "MODEL_HUGGING_FACE_TEXT_EMBEDDING_BLADE",
        e[e.MODEL_HUGGING_FACE_TEXT_EMBEDDING_ARCTIC_LARGE = 86] = "MODEL_HUGGING_FACE_TEXT_EMBEDDING_ARCTIC_LARGE",
        e[e.MODEL_HUGGING_FACE_TEXT_EMBEDDING_E5_BASE = 87] = "MODEL_HUGGING_FACE_TEXT_EMBEDDING_E5_BASE",
        e[e.MODEL_HUGGING_FACE_TEXT_EMBEDDING_MXBAI = 88] = "MODEL_HUGGING_FACE_TEXT_EMBEDDING_MXBAI",
        e[e.MODEL_LLAMA_3_1_8B_INSTRUCT = 106] = "MODEL_LLAMA_3_1_8B_INSTRUCT",
        e[e.MODEL_LLAMA_3_1_70B_INSTRUCT = 107] = "MODEL_LLAMA_3_1_70B_INSTRUCT",
        e[e.MODEL_LLAMA_3_1_405B_INSTRUCT = 105] = "MODEL_LLAMA_3_1_405B_INSTRUCT",
        e[e.MODEL_LLAMA_3_3_70B_INSTRUCT = 208] = "MODEL_LLAMA_3_3_70B_INSTRUCT",
        e[e.MODEL_LLAMA_3_3_70B_INSTRUCT_R1 = 209] = "MODEL_LLAMA_3_3_70B_INSTRUCT_R1",
        e[e.MODEL_LLAMA_3_1_70B_INSTRUCT_LONG_CONTEXT = 116] = "MODEL_LLAMA_3_1_70B_INSTRUCT_LONG_CONTEXT",
        e[e.MODEL_LLAMA_3_1_8B_HERMES_3 = 176] = "MODEL_LLAMA_3_1_8B_HERMES_3",
        e[e.MODEL_LLAMA_3_1_70B_HERMES_3 = 177] = "MODEL_LLAMA_3_1_70B_HERMES_3",
        e[e.MODEL_QWEN_2_5_7B_INSTRUCT = 178] = "MODEL_QWEN_2_5_7B_INSTRUCT",
        e[e.MODEL_QWEN_2_5_32B_INSTRUCT = 179] = "MODEL_QWEN_2_5_32B_INSTRUCT",
        e[e.MODEL_QWEN_2_5_72B_INSTRUCT = 180] = "MODEL_QWEN_2_5_72B_INSTRUCT",
        e[e.MODEL_QWEN_2_5_32B_INSTRUCT_R1 = 224] = "MODEL_QWEN_2_5_32B_INSTRUCT_R1",
        e[e.MODEL_NOMIC_TEXT_EMBEDDING_V1 = 89] = "MODEL_NOMIC_TEXT_EMBEDDING_V1",
        e[e.MODEL_NOMIC_TEXT_EMBEDDING_V1_5 = 90] = "MODEL_NOMIC_TEXT_EMBEDDING_V1_5",
        e[e.MODEL_MISTRAL_7B = 77] = "MODEL_MISTRAL_7B",
        e[e.MODEL_SALESFORCE_EMBEDDING_2R = 99] = "MODEL_SALESFORCE_EMBEDDING_2R",
        e[e.MODEL_CUSTOM_VLLM = 182] = "MODEL_CUSTOM_VLLM",
        e[e.MODEL_TEI_BGE_M3 = 92] = "MODEL_TEI_BGE_M3",
        e[e.MODEL_TEI_NOMIC_EMBED_TEXT_V1 = 93] = "MODEL_TEI_NOMIC_EMBED_TEXT_V1",
        e[e.MODEL_TEI_INTFLOAT_E5_LARGE_INSTRUCT = 94] = "MODEL_TEI_INTFLOAT_E5_LARGE_INSTRUCT",
        e[e.MODEL_TEI_SNOWFLAKE_ARCTIC_EMBED_L = 95] = "MODEL_TEI_SNOWFLAKE_ARCTIC_EMBED_L",
        e[e.MODEL_TEI_UAE_CODE_LARGE_V1 = 96] = "MODEL_TEI_UAE_CODE_LARGE_V1",
        e[e.MODEL_TEI_B1ADE = 97] = "MODEL_TEI_B1ADE",
        e[e.MODEL_TEI_WHEREISAI_UAE_LARGE_V1 = 98] = "MODEL_TEI_WHEREISAI_UAE_LARGE_V1",
        e[e.MODEL_TEI_WHEREISAI_UAE_CODE_LARGE_V1 = 100] = "MODEL_TEI_WHEREISAI_UAE_CODE_LARGE_V1",
        e[e.MODEL_OPENAI_COMPATIBLE = 200] = "MODEL_OPENAI_COMPATIBLE",
        e[e.MODEL_ANTHROPIC_COMPATIBLE = 201] = "MODEL_ANTHROPIC_COMPATIBLE",
        e[e.MODEL_VERTEX_COMPATIBLE = 202] = "MODEL_VERTEX_COMPATIBLE",
        e[e.MODEL_BEDROCK_COMPATIBLE = 203] = "MODEL_BEDROCK_COMPATIBLE",
        e[e.MODEL_AZURE_COMPATIBLE = 204] = "MODEL_AZURE_COMPATIBLE",
        e[e.MODEL_DEEPSEEK_V3 = 205] = "MODEL_DEEPSEEK_V3",
        e[e.MODEL_DEEPSEEK_R1 = 206] = "MODEL_DEEPSEEK_R1",
        e[e.MODEL_DEEPSEEK_R1_SLOW = 215] = "MODEL_DEEPSEEK_R1_SLOW",
        e[e.MODEL_DEEPSEEK_R1_FAST = 216] = "MODEL_DEEPSEEK_R1_FAST",
        e[e.MODEL_CUSTOM_OPEN_ROUTER = 185] = "MODEL_CUSTOM_OPEN_ROUTER",
        e[e.MODEL_XAI_GROK_2 = 212] = "MODEL_XAI_GROK_2",
        e[e.MODEL_XAI_GROK_3 = 217] = "MODEL_XAI_GROK_3",
        e[e.MODEL_XAI_GROK_3_MINI_REASONING = 234] = "MODEL_XAI_GROK_3_MINI_REASONING",
        e[e.MODEL_PRIVATE_1 = 219] = "MODEL_PRIVATE_1",
        e[e.MODEL_PRIVATE_2 = 220] = "MODEL_PRIVATE_2",
        e[e.MODEL_PRIVATE_3 = 221] = "MODEL_PRIVATE_3",
        e[e.MODEL_PRIVATE_4 = 222] = "MODEL_PRIVATE_4",
        e[e.MODEL_PRIVATE_5 = 223] = "MODEL_PRIVATE_5"
    }(be || (be = {})),
    ye.util.setEnumType(be, "exa.codeium_common_pb.Model", [{
        no: 0,
        name: "MODEL_UNSPECIFIED"
    }, {
        no: 20,
        name: "MODEL_EMBED_6591"
    }, {
        no: 33,
        name: "MODEL_8341"
    }, {
        no: 42,
        name: "MODEL_8528"
    }, {
        no: 41,
        name: "MODEL_9024"
    }, {
        no: 112,
        name: "MODEL_14602"
    }, {
        no: 115,
        name: "MODEL_15133"
    }, {
        no: 119,
        name: "MODEL_15302"
    }, {
        no: 121,
        name: "MODEL_15335"
    }, {
        no: 122,
        name: "MODEL_15336"
    }, {
        no: 167,
        name: "MODEL_15931"
    }, {
        no: 48,
        name: "MODEL_QUERY_9905"
    }, {
        no: 66,
        name: "MODEL_QUERY_11791"
    }, {
        no: 57,
        name: "MODEL_CHAT_11120"
    }, {
        no: 58,
        name: "MODEL_CHAT_11121"
    }, {
        no: 70,
        name: "MODEL_CHAT_12119"
    }, {
        no: 69,
        name: "MODEL_CHAT_12121"
    }, {
        no: 74,
        name: "MODEL_CHAT_12437"
    }, {
        no: 76,
        name: "MODEL_CHAT_12491"
    }, {
        no: 78,
        name: "MODEL_CHAT_12623"
    }, {
        no: 79,
        name: "MODEL_CHAT_12950"
    }, {
        no: 101,
        name: "MODEL_CHAT_12968"
    }, {
        no: 102,
        name: "MODEL_CHAT_13404"
    }, {
        no: 103,
        name: "MODEL_CHAT_13566"
    }, {
        no: 108,
        name: "MODEL_CHAT_13930"
    }, {
        no: 110,
        name: "MODEL_CHAT_14255"
    }, {
        no: 111,
        name: "MODEL_CHAT_14256"
    }, {
        no: 114,
        name: "MODEL_CHAT_14942"
    }, {
        no: 120,
        name: "MODEL_CHAT_15305"
    }, {
        no: 123,
        name: "MODEL_CHAT_15600"
    }, {
        no: 124,
        name: "MODEL_CHAT_16801"
    }, {
        no: 175,
        name: "MODEL_CHAT_16718"
    }, {
        no: 168,
        name: "MODEL_CHAT_15729"
    }, {
        no: 173,
        name: "MODEL_CHAT_16579"
    }, {
        no: 174,
        name: "MODEL_CHAT_16579_CRUSOE"
    }, {
        no: 181,
        name: "MODEL_CHAT_18805"
    }, {
        no: 210,
        name: "MODEL_CHAT_18468"
    }, {
        no: 233,
        name: "MODEL_CHAT_19484"
    }, {
        no: 235,
        name: "MODEL_CHAT_20706"
    }, {
        no: 245,
        name: "MODEL_CHAT_21779"
    }, {
        no: 211,
        name: "MODEL_CHAT_19040"
    }, {
        no: 229,
        name: "MODEL_CHAT_19820"
    }, {
        no: 230,
        name: "MODEL_CHAT_19821"
    }, {
        no: 244,
        name: "MODEL_CHAT_19821_CRUSOE"
    }, {
        no: 231,
        name: "MODEL_CHAT_19822"
    }, {
        no: 225,
        name: "MODEL_CASCADE_20064"
    }, {
        no: 236,
        name: "MODEL_CASCADE_20065"
    }, {
        no: 237,
        name: "MODEL_CASCADE_20066"
    }, {
        no: 238,
        name: "MODEL_CASCADE_20067"
    }, {
        no: 239,
        name: "MODEL_CASCADE_20068"
    }, {
        no: 240,
        name: "MODEL_CASCADE_20069"
    }, {
        no: 247,
        name: "MODEL_DEEPSEEK_V3_INTERNAL"
    }, {
        no: 248,
        name: "MODEL_DEEPSEEK_V3_0324_INTERNAL"
    }, {
        no: 249,
        name: "MODEL_DEEPSEEK_R1_INTERNAL"
    }, {
        no: 241,
        name: "MODEL_ANTHROPIC_WINDSURF_RESEARCH"
    }, {
        no: 242,
        name: "MODEL_ANTHROPIC_WINDSURF_RESEARCH_THINKING"
    }, {
        no: 65,
        name: "MODEL_DRAFT_11408"
    }, {
        no: 67,
        name: "MODEL_DRAFT_CHAT_11883"
    }, {
        no: 72,
        name: "MODEL_DRAFT_CHAT_12196"
    }, {
        no: 73,
        name: "MODEL_DRAFT_CHAT_12413"
    }, {
        no: 104,
        name: "MODEL_DRAFT_CHAT_13175"
    }, {
        no: 232,
        name: "MODEL_DRAFT_CHAT_19823"
    }, {
        no: 243,
        name: "MODEL_DRAFT_CHAT_20707"
    }, {
        no: 28,
        name: "MODEL_CHAT_3_5_TURBO"
    }, {
        no: 30,
        name: "MODEL_CHAT_GPT_4"
    }, {
        no: 37,
        name: "MODEL_CHAT_GPT_4_1106_PREVIEW"
    }, {
        no: 91,
        name: "MODEL_TEXT_EMBEDDING_OPENAI_ADA"
    }, {
        no: 163,
        name: "MODEL_TEXT_EMBEDDING_OPENAI_3_SMALL"
    }, {
        no: 164,
        name: "MODEL_TEXT_EMBEDDING_OPENAI_3_LARGE"
    }, {
        no: 71,
        name: "MODEL_CHAT_GPT_4O_2024_05_13"
    }, {
        no: 109,
        name: "MODEL_CHAT_GPT_4O_2024_08_06"
    }, {
        no: 113,
        name: "MODEL_CHAT_GPT_4O_MINI_2024_07_18"
    }, {
        no: 117,
        name: "MODEL_CHAT_O1_PREVIEW"
    }, {
        no: 118,
        name: "MODEL_CHAT_O1_MINI"
    }, {
        no: 170,
        name: "MODEL_CHAT_O1"
    }, {
        no: 207,
        name: "MODEL_CHAT_O3_MINI"
    }, {
        no: 213,
        name: "MODEL_CHAT_O3_MINI_LOW"
    }, {
        no: 214,
        name: "MODEL_CHAT_O3_MINI_HIGH"
    }, {
        no: 218,
        name: "MODEL_CHAT_O3"
    }, {
        no: 228,
        name: "MODEL_CHAT_GPT_4_5"
    }, {
        no: 61,
        name: "MODEL_GOOGLE_GEMINI_1_0_PRO"
    }, {
        no: 62,
        name: "MODEL_GOOGLE_GEMINI_1_5_PRO"
    }, {
        no: 183,
        name: "MODEL_GOOGLE_GEMINI_EXP_1206"
    }, {
        no: 184,
        name: "MODEL_GOOGLE_GEMINI_2_0_FLASH"
    }, {
        no: 246,
        name: "MODEL_GOOGLE_GEMINI_2_5_PRO"
    }, {
        no: 63,
        name: "MODEL_CLAUDE_3_OPUS_20240229"
    }, {
        no: 64,
        name: "MODEL_CLAUDE_3_SONNET_20240229"
    }, {
        no: 80,
        name: "MODEL_CLAUDE_3_5_SONNET_20240620"
    }, {
        no: 166,
        name: "MODEL_CLAUDE_3_5_SONNET_20241022"
    }, {
        no: 171,
        name: "MODEL_CLAUDE_3_5_HAIKU_20241022"
    }, {
        no: 172,
        name: "MODEL_CLAUDE_3_HAIKU_20240307"
    }, {
        no: 226,
        name: "MODEL_CLAUDE_3_7_SONNET_20250219"
    }, {
        no: 227,
        name: "MODEL_CLAUDE_3_7_SONNET_20250219_THINKING"
    }, {
        no: 81,
        name: "MODEL_TOGETHERAI_TEXT_EMBEDDING_M2_BERT"
    }, {
        no: 165,
        name: "MODEL_TOGETHERAI_LLAMA_3_1_8B_INSTRUCT"
    }, {
        no: 82,
        name: "MODEL_HUGGING_FACE_TEXT_EMBEDDING_M2_BERT"
    }, {
        no: 83,
        name: "MODEL_HUGGING_FACE_TEXT_EMBEDDING_UAE_CODE"
    }, {
        no: 84,
        name: "MODEL_HUGGING_FACE_TEXT_EMBEDDING_BGE"
    }, {
        no: 85,
        name: "MODEL_HUGGING_FACE_TEXT_EMBEDDING_BLADE"
    }, {
        no: 86,
        name: "MODEL_HUGGING_FACE_TEXT_EMBEDDING_ARCTIC_LARGE"
    }, {
        no: 87,
        name: "MODEL_HUGGING_FACE_TEXT_EMBEDDING_E5_BASE"
    }, {
        no: 88,
        name: "MODEL_HUGGING_FACE_TEXT_EMBEDDING_MXBAI"
    }, {
        no: 106,
        name: "MODEL_LLAMA_3_1_8B_INSTRUCT"
    }, {
        no: 107,
        name: "MODEL_LLAMA_3_1_70B_INSTRUCT"
    }, {
        no: 105,
        name: "MODEL_LLAMA_3_1_405B_INSTRUCT"
    }, {
        no: 208,
        name: "MODEL_LLAMA_3_3_70B_INSTRUCT"
    }, {
        no: 209,
        name: "MODEL_LLAMA_3_3_70B_INSTRUCT_R1"
    }, {
        no: 116,
        name: "MODEL_LLAMA_3_1_70B_INSTRUCT_LONG_CONTEXT"
    }, {
        no: 176,
        name: "MODEL_LLAMA_3_1_8B_HERMES_3"
    }, {
        no: 177,
        name: "MODEL_LLAMA_3_1_70B_HERMES_3"
    }, {
        no: 178,
        name: "MODEL_QWEN_2_5_7B_INSTRUCT"
    }, {
        no: 179,
        name: "MODEL_QWEN_2_5_32B_INSTRUCT"
    }, {
        no: 180,
        name: "MODEL_QWEN_2_5_72B_INSTRUCT"
    }, {
        no: 224,
        name: "MODEL_QWEN_2_5_32B_INSTRUCT_R1"
    }, {
        no: 89,
        name: "MODEL_NOMIC_TEXT_EMBEDDING_V1"
    }, {
        no: 90,
        name: "MODEL_NOMIC_TEXT_EMBEDDING_V1_5"
    }, {
        no: 77,
        name: "MODEL_MISTRAL_7B"
    }, {
        no: 99,
        name: "MODEL_SALESFORCE_EMBEDDING_2R"
    }, {
        no: 182,
        name: "MODEL_CUSTOM_VLLM"
    }, {
        no: 92,
        name: "MODEL_TEI_BGE_M3"
    }, {
        no: 93,
        name: "MODEL_TEI_NOMIC_EMBED_TEXT_V1"
    }, {
        no: 94,
        name: "MODEL_TEI_INTFLOAT_E5_LARGE_INSTRUCT"
    }, {
        no: 95,
        name: "MODEL_TEI_SNOWFLAKE_ARCTIC_EMBED_L"
    }, {
        no: 96,
        name: "MODEL_TEI_UAE_CODE_LARGE_V1"
    }, {
        no: 97,
        name: "MODEL_TEI_B1ADE"
    }, {
        no: 98,
        name: "MODEL_TEI_WHEREISAI_UAE_LARGE_V1"
    }, {
        no: 100,
        name: "MODEL_TEI_WHEREISAI_UAE_CODE_LARGE_V1"
    }, {
        no: 200,
        name: "MODEL_OPENAI_COMPATIBLE"
    }, {
        no: 201,
        name: "MODEL_ANTHROPIC_COMPATIBLE"
    }, {
        no: 202,
        name: "MODEL_VERTEX_COMPATIBLE"
    }, {
        no: 203,
        name: "MODEL_BEDROCK_COMPATIBLE"
    }, {
        no: 204,
        name: "MODEL_AZURE_COMPATIBLE"
    }, {
        no: 205,
        name: "MODEL_DEEPSEEK_V3"
    }, {
        no: 206,
        name: "MODEL_DEEPSEEK_R1"
    }, {
        no: 215,
        name: "MODEL_DEEPSEEK_R1_SLOW"
    }, {
        no: 216,
        name: "MODEL_DEEPSEEK_R1_FAST"
    }, {
        no: 185,
        name: "MODEL_CUSTOM_OPEN_ROUTER"
    }, {
        no: 212,
        name: "MODEL_XAI_GROK_2"
    }, {
        no: 217,
        name: "MODEL_XAI_GROK_3"
    }, {
        no: 234,
        name: "MODEL_XAI_GROK_3_MINI_REASONING"
    }, {
        no: 219,
        name: "MODEL_PRIVATE_1"
    }, {
        no: 220,
        name: "MODEL_PRIVATE_2"
    }, {
        no: 221,
        name: "MODEL_PRIVATE_3"
    }, {
        no: 222,
        name: "MODEL_PRIVATE_4"
    }, {
        no: 223,
        name: "MODEL_PRIVATE_5"
    }]),
    function(e) {
        e[e.EXCLUSION_UNSPECIFIED = 0] = "EXCLUSION_UNSPECIFIED",
        e[e.EXCLUSION_ELEMENT_KIND_DISABLED = 1] = "EXCLUSION_ELEMENT_KIND_DISABLED",
        e[e.EXCLUSION_ELEMENT_MISSING_DEPENDENCY = 2] = "EXCLUSION_ELEMENT_MISSING_DEPENDENCY",
        e[e.EXCLUSION_TOKEN_BUDGET = 3] = "EXCLUSION_TOKEN_BUDGET",
        e[e.EXCLUSION_ACTIVE_SOURCE_OVERLAP = 4] = "EXCLUSION_ACTIVE_SOURCE_OVERLAP"
    }(qe || (qe = {})),
    ye.util.setEnumType(qe, "exa.codeium_common_pb.PromptElementExclusionReason", [{
        no: 0,
        name: "EXCLUSION_UNSPECIFIED"
    }, {
        no: 1,
        name: "EXCLUSION_ELEMENT_KIND_DISABLED"
    }, {
        no: 2,
        name: "EXCLUSION_ELEMENT_MISSING_DEPENDENCY"
    }, {
        no: 3,
        name: "EXCLUSION_TOKEN_BUDGET"
    }, {
        no: 4,
        name: "EXCLUSION_ACTIVE_SOURCE_OVERLAP"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.INCOMPLETE = 1] = "INCOMPLETE",
        e[e.STOP_PATTERN = 2] = "STOP_PATTERN",
        e[e.MAX_TOKENS = 3] = "MAX_TOKENS",
        e[e.MIN_LOG_PROB = 4] = "MIN_LOG_PROB",
        e[e.MAX_NEWLINES = 5] = "MAX_NEWLINES",
        e[e.EXIT_SCOPE = 6] = "EXIT_SCOPE",
        e[e.NONFINITE_LOGIT_OR_PROB = 7] = "NONFINITE_LOGIT_OR_PROB",
        e[e.FIRST_NON_WHITESPACE_LINE = 8] = "FIRST_NON_WHITESPACE_LINE",
        e[e.PARTIAL = 9] = "PARTIAL",
        e[e.FUNCTION_CALL = 10] = "FUNCTION_CALL",
        e[e.CONTENT_FILTER = 11] = "CONTENT_FILTER",
        e[e.NON_INSERTION = 12] = "NON_INSERTION"
    }(Ge || (Ge = {})),
    ye.util.setEnumType(Ge, "exa.codeium_common_pb.StopReason", [{
        no: 0,
        name: "STOP_REASON_UNSPECIFIED"
    }, {
        no: 1,
        name: "STOP_REASON_INCOMPLETE"
    }, {
        no: 2,
        name: "STOP_REASON_STOP_PATTERN"
    }, {
        no: 3,
        name: "STOP_REASON_MAX_TOKENS"
    }, {
        no: 4,
        name: "STOP_REASON_MIN_LOG_PROB"
    }, {
        no: 5,
        name: "STOP_REASON_MAX_NEWLINES"
    }, {
        no: 6,
        name: "STOP_REASON_EXIT_SCOPE"
    }, {
        no: 7,
        name: "STOP_REASON_NONFINITE_LOGIT_OR_PROB"
    }, {
        no: 8,
        name: "STOP_REASON_FIRST_NON_WHITESPACE_LINE"
    }, {
        no: 9,
        name: "STOP_REASON_PARTIAL"
    }, {
        no: 10,
        name: "STOP_REASON_FUNCTION_CALL"
    }, {
        no: 11,
        name: "STOP_REASON_CONTENT_FILTER"
    }, {
        no: 12,
        name: "STOP_REASON_NON_INSERTION"
    }]),
    function(e) {
        e[e.NONE = 0] = "NONE",
        e[e.INCOMPLETE = 1] = "INCOMPLETE",
        e[e.EMPTY = 2] = "EMPTY",
        e[e.REPETITIVE = 3] = "REPETITIVE",
        e[e.DUPLICATE = 4] = "DUPLICATE",
        e[e.LONG_LINE = 5] = "LONG_LINE",
        e[e.COMPLETIONS_CUTOFF = 6] = "COMPLETIONS_CUTOFF",
        e[e.ATTRIBUTION = 7] = "ATTRIBUTION",
        e[e.NON_MATCHING = 8] = "NON_MATCHING",
        e[e.NON_INSERTION = 9] = "NON_INSERTION"
    }(He || (He = {})),
    ye.util.setEnumType(He, "exa.codeium_common_pb.FilterReason", [{
        no: 0,
        name: "FILTER_REASON_NONE"
    }, {
        no: 1,
        name: "FILTER_REASON_INCOMPLETE"
    }, {
        no: 2,
        name: "FILTER_REASON_EMPTY"
    }, {
        no: 3,
        name: "FILTER_REASON_REPETITIVE"
    }, {
        no: 4,
        name: "FILTER_REASON_DUPLICATE"
    }, {
        no: 5,
        name: "FILTER_REASON_LONG_LINE"
    }, {
        no: 6,
        name: "FILTER_REASON_COMPLETIONS_CUTOFF"
    }, {
        no: 7,
        name: "FILTER_REASON_ATTRIBUTION"
    }, {
        no: 8,
        name: "FILTER_REASON_NON_MATCHING"
    }, {
        no: 9,
        name: "FILTER_REASON_NON_INSERTION"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.NEW_CODE = 1] = "NEW_CODE",
        e[e.NO_LICENSE = 2] = "NO_LICENSE",
        e[e.NONPERMISSIVE = 3] = "NONPERMISSIVE",
        e[e.PERMISSIVE = 4] = "PERMISSIVE",
        e[e.PERMISSIVE_BLOCKED = 5] = "PERMISSIVE_BLOCKED"
    }(ve || (ve = {})),
    ye.util.setEnumType(ve, "exa.codeium_common_pb.AttributionStatus", [{
        no: 0,
        name: "ATTRIBUTION_STATUS_UNSPECIFIED"
    }, {
        no: 1,
        name: "ATTRIBUTION_STATUS_NEW_CODE"
    }, {
        no: 2,
        name: "ATTRIBUTION_STATUS_NO_LICENSE"
    }, {
        no: 3,
        name: "ATTRIBUTION_STATUS_NONPERMISSIVE"
    }, {
        no: 4,
        name: "ATTRIBUTION_STATUS_PERMISSIVE"
    }, {
        no: 5,
        name: "ATTRIBUTION_STATUS_PERMISSIVE_BLOCKED"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.HIGH = 1] = "HIGH",
        e[e.LOW = 2] = "LOW"
    }(Ve || (Ve = {})),
    ye.util.setEnumType(Ve, "exa.codeium_common_pb.EmbeddingPriority", [{
        no: 0,
        name: "EMBEDDING_PRIORITY_UNSPECIFIED"
    }, {
        no: 1,
        name: "EMBEDDING_PRIORITY_HIGH"
    }, {
        no: 2,
        name: "EMBEDDING_PRIORITY_LOW"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.NOMIC_DOCUMENT = 1] = "NOMIC_DOCUMENT",
        e[e.NOMIC_SEARCH = 2] = "NOMIC_SEARCH",
        e[e.NOMIC_CLASSIFICATION = 3] = "NOMIC_CLASSIFICATION",
        e[e.NOMIC_CLUSTERING = 4] = "NOMIC_CLUSTERING"
    }(Ye || (Ye = {})),
    ye.util.setEnumType(Ye, "exa.codeium_common_pb.EmbeddingPrefix", [{
        no: 0,
        name: "EMBEDDING_PREFIX_UNSPECIFIED"
    }, {
        no: 1,
        name: "EMBEDDING_PREFIX_NOMIC_DOCUMENT"
    }, {
        no: 2,
        name: "EMBEDDING_PREFIX_NOMIC_SEARCH"
    }, {
        no: 3,
        name: "EMBEDDING_PREFIX_NOMIC_CLASSIFICATION"
    }, {
        no: 4,
        name: "EMBEDDING_PREFIX_NOMIC_CLUSTERING"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.CODE_CONTEXT_ITEM = 1] = "CODE_CONTEXT_ITEM",
        e[e.COMMIT_INTENT = 2] = "COMMIT_INTENT"
    }(Xe || (Xe = {})),
    ye.util.setEnumType(Xe, "exa.codeium_common_pb.EmbeddingSource", [{
        no: 0,
        name: "EMBEDDING_SOURCE_UNSPECIFIED"
    }, {
        no: 1,
        name: "EMBEDDING_SOURCE_CODE_CONTEXT_ITEM"
    }, {
        no: 2,
        name: "EMBEDDING_SOURCE_COMMIT_INTENT"
    }]),
    function(e) {
        e[e.CODEIUM = 0] = "CODEIUM",
        e[e.DEEPNOTE = 1] = "DEEPNOTE",
        e[e.CODESANDBOX = 2] = "CODESANDBOX",
        e[e.STACKBLITZ = 3] = "STACKBLITZ",
        e[e.VALTOWN = 4] = "VALTOWN",
        e[e.HEX = 5] = "HEX",
        e[e.ZAPIER = 6] = "ZAPIER",
        e[e.SUPERBLOCKS = 7] = "SUPERBLOCKS",
        e[e.EMBARCADERO = 8] = "EMBARCADERO"
    }(Ke || (Ke = {})),
    ye.util.setEnumType(Ke, "exa.codeium_common_pb.AuthSource", [{
        no: 0,
        name: "AUTH_SOURCE_CODEIUM"
    }, {
        no: 1,
        name: "AUTH_SOURCE_DEEPNOTE"
    }, {
        no: 2,
        name: "AUTH_SOURCE_CODESANDBOX"
    }, {
        no: 3,
        name: "AUTH_SOURCE_STACKBLITZ"
    }, {
        no: 4,
        name: "AUTH_SOURCE_VALTOWN"
    }, {
        no: 5,
        name: "AUTH_SOURCE_HEX"
    }, {
        no: 6,
        name: "AUTH_SOURCE_ZAPIER"
    }, {
        no: 7,
        name: "AUTH_SOURCE_SUPERBLOCKS"
    }, {
        no: 8,
        name: "AUTH_SOURCE_EMBARCADERO"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.ENABLE_CODEIUM = 1] = "ENABLE_CODEIUM",
        e[e.DISABLE_CODEIUM = 2] = "DISABLE_CODEIUM",
        e[e.SHOW_PREVIOUS_COMPLETION = 3] = "SHOW_PREVIOUS_COMPLETION",
        e[e.SHOW_NEXT_COMPLETION = 4] = "SHOW_NEXT_COMPLETION",
        e[e.COPILOT_STATUS = 5] = "COPILOT_STATUS",
        e[e.COMPLETION_SUPPRESSED = 6] = "COMPLETION_SUPPRESSED",
        e[e.MEMORY_STATS = 8] = "MEMORY_STATS",
        e[e.LOCAL_CONTEXT_RELEVANCE_CHECK = 9] = "LOCAL_CONTEXT_RELEVANCE_CHECK",
        e[e.ACTIVE_EDITOR_CHANGED = 10] = "ACTIVE_EDITOR_CHANGED",
        e[e.SHOW_PREVIOUS_CORTEX_STEP = 11] = "SHOW_PREVIOUS_CORTEX_STEP",
        e[e.SHOW_NEXT_CORTEX_STEP = 12] = "SHOW_NEXT_CORTEX_STEP",
        e[e.INDEXER_STATS = 13] = "INDEXER_STATS"
    }(We || (We = {})),
    ye.util.setEnumType(We, "exa.codeium_common_pb.EventType", [{
        no: 0,
        name: "EVENT_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "EVENT_TYPE_ENABLE_CODEIUM"
    }, {
        no: 2,
        name: "EVENT_TYPE_DISABLE_CODEIUM"
    }, {
        no: 3,
        name: "EVENT_TYPE_SHOW_PREVIOUS_COMPLETION"
    }, {
        no: 4,
        name: "EVENT_TYPE_SHOW_NEXT_COMPLETION"
    }, {
        no: 5,
        name: "EVENT_TYPE_COPILOT_STATUS"
    }, {
        no: 6,
        name: "EVENT_TYPE_COMPLETION_SUPPRESSED"
    }, {
        no: 8,
        name: "EVENT_TYPE_MEMORY_STATS"
    }, {
        no: 9,
        name: "EVENT_TYPE_LOCAL_CONTEXT_RELEVANCE_CHECK"
    }, {
        no: 10,
        name: "EVENT_TYPE_ACTIVE_EDITOR_CHANGED"
    }, {
        no: 11,
        name: "EVENT_TYPE_SHOW_PREVIOUS_CORTEX_STEP"
    }, {
        no: 12,
        name: "EVENT_TYPE_SHOW_NEXT_CORTEX_STEP"
    }, {
        no: 13,
        name: "EVENT_TYPE_INDEXER_STATS"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.CLUSTER = 1] = "CLUSTER",
        e[e.EXACT = 2] = "EXACT"
    }(ze || (ze = {})),
    ye.util.setEnumType(ze, "exa.codeium_common_pb.SearchResultType", [{
        no: 0,
        name: "SEARCH_RESULT_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "SEARCH_RESULT_TYPE_CLUSTER"
    }, {
        no: 2,
        name: "SEARCH_RESULT_TYPE_EXACT"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.RAW_SOURCE = 1] = "RAW_SOURCE",
        e[e.DOCSTRING = 2] = "DOCSTRING",
        e[e.FUNCTION = 3] = "FUNCTION",
        e[e.NODEPATH = 4] = "NODEPATH",
        e[e.DECLARATION = 5] = "DECLARATION",
        e[e.NAIVE_CHUNK = 6] = "NAIVE_CHUNK",
        e[e.SIGNATURE = 7] = "SIGNATURE"
    }(je || (je = {})),
    ye.util.setEnumType(je, "exa.codeium_common_pb.EmbedType", [{
        no: 0,
        name: "EMBED_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "EMBED_TYPE_RAW_SOURCE"
    }, {
        no: 2,
        name: "EMBED_TYPE_DOCSTRING"
    }, {
        no: 3,
        name: "EMBED_TYPE_FUNCTION"
    }, {
        no: 4,
        name: "EMBED_TYPE_NODEPATH"
    }, {
        no: 5,
        name: "EMBED_TYPE_DECLARATION"
    }, {
        no: 6,
        name: "EMBED_TYPE_NAIVE_CHUNK"
    }, {
        no: 7,
        name: "EMBED_TYPE_SIGNATURE"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.TYPING_AS_SUGGESTED = 1] = "TYPING_AS_SUGGESTED",
        e[e.CACHE = 2] = "CACHE",
        e[e.NETWORK = 3] = "NETWORK"
    }(Qe || (Qe = {})),
    ye.util.setEnumType(Qe, "exa.codeium_common_pb.CompletionSource", [{
        no: 0,
        name: "COMPLETION_SOURCE_UNSPECIFIED"
    }, {
        no: 1,
        name: "COMPLETION_SOURCE_TYPING_AS_SUGGESTED"
    }, {
        no: 2,
        name: "COMPLETION_SOURCE_CACHE"
    }, {
        no: 3,
        name: "COMPLETION_SOURCE_NETWORK"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.SINGLE = 1] = "SINGLE",
        e[e.MULTI = 2] = "MULTI",
        e[e.INLINE_FIM = 3] = "INLINE_FIM"
    }($e || ($e = {})),
    ye.util.setEnumType($e, "exa.codeium_common_pb.CompletionType", [{
        no: 0,
        name: "COMPLETION_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "COMPLETION_TYPE_SINGLE"
    }, {
        no: 2,
        name: "COMPLETION_TYPE_MULTI"
    }, {
        no: 3,
        name: "COMPLETION_TYPE_INLINE_FIM"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.C = 1] = "C",
        e[e.CLOJURE = 2] = "CLOJURE",
        e[e.COFFEESCRIPT = 3] = "COFFEESCRIPT",
        e[e.CPP = 4] = "CPP",
        e[e.CSHARP = 5] = "CSHARP",
        e[e.CSS = 6] = "CSS",
        e[e.CUDACPP = 7] = "CUDACPP",
        e[e.DOCKERFILE = 8] = "DOCKERFILE",
        e[e.GO = 9] = "GO",
        e[e.GROOVY = 10] = "GROOVY",
        e[e.HANDLEBARS = 11] = "HANDLEBARS",
        e[e.HASKELL = 12] = "HASKELL",
        e[e.HCL = 13] = "HCL",
        e[e.HTML = 14] = "HTML",
        e[e.INI = 15] = "INI",
        e[e.JAVA = 16] = "JAVA",
        e[e.JAVASCRIPT = 17] = "JAVASCRIPT",
        e[e.JSON = 18] = "JSON",
        e[e.JULIA = 19] = "JULIA",
        e[e.KOTLIN = 20] = "KOTLIN",
        e[e.LATEX = 21] = "LATEX",
        e[e.LESS = 22] = "LESS",
        e[e.LUA = 23] = "LUA",
        e[e.MAKEFILE = 24] = "MAKEFILE",
        e[e.MARKDOWN = 25] = "MARKDOWN",
        e[e.OBJECTIVEC = 26] = "OBJECTIVEC",
        e[e.OBJECTIVECPP = 27] = "OBJECTIVECPP",
        e[e.PERL = 28] = "PERL",
        e[e.PHP = 29] = "PHP",
        e[e.PLAINTEXT = 30] = "PLAINTEXT",
        e[e.PROTOBUF = 31] = "PROTOBUF",
        e[e.PBTXT = 32] = "PBTXT",
        e[e.PYTHON = 33] = "PYTHON",
        e[e.R = 34] = "R",
        e[e.RUBY = 35] = "RUBY",
        e[e.RUST = 36] = "RUST",
        e[e.SASS = 37] = "SASS",
        e[e.SCALA = 38] = "SCALA",
        e[e.SCSS = 39] = "SCSS",
        e[e.SHELL = 40] = "SHELL",
        e[e.SQL = 41] = "SQL",
        e[e.STARLARK = 42] = "STARLARK",
        e[e.SWIFT = 43] = "SWIFT",
        e[e.TSX = 44] = "TSX",
        e[e.TYPESCRIPT = 45] = "TYPESCRIPT",
        e[e.VISUALBASIC = 46] = "VISUALBASIC",
        e[e.VUE = 47] = "VUE",
        e[e.XML = 48] = "XML",
        e[e.XSL = 49] = "XSL",
        e[e.YAML = 50] = "YAML",
        e[e.SVELTE = 51] = "SVELTE",
        e[e.TOML = 52] = "TOML",
        e[e.DART = 53] = "DART",
        e[e.RST = 54] = "RST",
        e[e.OCAML = 55] = "OCAML",
        e[e.CMAKE = 56] = "CMAKE",
        e[e.PASCAL = 57] = "PASCAL",
        e[e.ELIXIR = 58] = "ELIXIR",
        e[e.FSHARP = 59] = "FSHARP",
        e[e.LISP = 60] = "LISP",
        e[e.MATLAB = 61] = "MATLAB",
        e[e.POWERSHELL = 62] = "POWERSHELL",
        e[e.SOLIDITY = 63] = "SOLIDITY",
        e[e.ADA = 64] = "ADA",
        e[e.OCAML_INTERFACE = 65] = "OCAML_INTERFACE",
        e[e.TREE_SITTER_QUERY = 66] = "TREE_SITTER_QUERY",
        e[e.APL = 67] = "APL",
        e[e.ASSEMBLY = 68] = "ASSEMBLY",
        e[e.COBOL = 69] = "COBOL",
        e[e.CRYSTAL = 70] = "CRYSTAL",
        e[e.EMACS_LISP = 71] = "EMACS_LISP",
        e[e.ERLANG = 72] = "ERLANG",
        e[e.FORTRAN = 73] = "FORTRAN",
        e[e.FREEFORM = 74] = "FREEFORM",
        e[e.GRADLE = 75] = "GRADLE",
        e[e.HACK = 76] = "HACK",
        e[e.MAVEN = 77] = "MAVEN",
        e[e.M68KASSEMBLY = 78] = "M68KASSEMBLY",
        e[e.SAS = 79] = "SAS",
        e[e.UNIXASSEMBLY = 80] = "UNIXASSEMBLY",
        e[e.VBA = 81] = "VBA",
        e[e.VIMSCRIPT = 82] = "VIMSCRIPT",
        e[e.WEBASSEMBLY = 83] = "WEBASSEMBLY",
        e[e.BLADE = 84] = "BLADE",
        e[e.ASTRO = 85] = "ASTRO",
        e[e.MUMPS = 86] = "MUMPS",
        e[e.GDSCRIPT = 87] = "GDSCRIPT",
        e[e.NIM = 88] = "NIM",
        e[e.PROLOG = 89] = "PROLOG",
        e[e.MARKDOWN_INLINE = 90] = "MARKDOWN_INLINE",
        e[e.APEX = 91] = "APEX"
    }(Ze || (Ze = {})),
    ye.util.setEnumType(Ze, "exa.codeium_common_pb.Language", [{
        no: 0,
        name: "LANGUAGE_UNSPECIFIED"
    }, {
        no: 1,
        name: "LANGUAGE_C"
    }, {
        no: 2,
        name: "LANGUAGE_CLOJURE"
    }, {
        no: 3,
        name: "LANGUAGE_COFFEESCRIPT"
    }, {
        no: 4,
        name: "LANGUAGE_CPP"
    }, {
        no: 5,
        name: "LANGUAGE_CSHARP"
    }, {
        no: 6,
        name: "LANGUAGE_CSS"
    }, {
        no: 7,
        name: "LANGUAGE_CUDACPP"
    }, {
        no: 8,
        name: "LANGUAGE_DOCKERFILE"
    }, {
        no: 9,
        name: "LANGUAGE_GO"
    }, {
        no: 10,
        name: "LANGUAGE_GROOVY"
    }, {
        no: 11,
        name: "LANGUAGE_HANDLEBARS"
    }, {
        no: 12,
        name: "LANGUAGE_HASKELL"
    }, {
        no: 13,
        name: "LANGUAGE_HCL"
    }, {
        no: 14,
        name: "LANGUAGE_HTML"
    }, {
        no: 15,
        name: "LANGUAGE_INI"
    }, {
        no: 16,
        name: "LANGUAGE_JAVA"
    }, {
        no: 17,
        name: "LANGUAGE_JAVASCRIPT"
    }, {
        no: 18,
        name: "LANGUAGE_JSON"
    }, {
        no: 19,
        name: "LANGUAGE_JULIA"
    }, {
        no: 20,
        name: "LANGUAGE_KOTLIN"
    }, {
        no: 21,
        name: "LANGUAGE_LATEX"
    }, {
        no: 22,
        name: "LANGUAGE_LESS"
    }, {
        no: 23,
        name: "LANGUAGE_LUA"
    }, {
        no: 24,
        name: "LANGUAGE_MAKEFILE"
    }, {
        no: 25,
        name: "LANGUAGE_MARKDOWN"
    }, {
        no: 26,
        name: "LANGUAGE_OBJECTIVEC"
    }, {
        no: 27,
        name: "LANGUAGE_OBJECTIVECPP"
    }, {
        no: 28,
        name: "LANGUAGE_PERL"
    }, {
        no: 29,
        name: "LANGUAGE_PHP"
    }, {
        no: 30,
        name: "LANGUAGE_PLAINTEXT"
    }, {
        no: 31,
        name: "LANGUAGE_PROTOBUF"
    }, {
        no: 32,
        name: "LANGUAGE_PBTXT"
    }, {
        no: 33,
        name: "LANGUAGE_PYTHON"
    }, {
        no: 34,
        name: "LANGUAGE_R"
    }, {
        no: 35,
        name: "LANGUAGE_RUBY"
    }, {
        no: 36,
        name: "LANGUAGE_RUST"
    }, {
        no: 37,
        name: "LANGUAGE_SASS"
    }, {
        no: 38,
        name: "LANGUAGE_SCALA"
    }, {
        no: 39,
        name: "LANGUAGE_SCSS"
    }, {
        no: 40,
        name: "LANGUAGE_SHELL"
    }, {
        no: 41,
        name: "LANGUAGE_SQL"
    }, {
        no: 42,
        name: "LANGUAGE_STARLARK"
    }, {
        no: 43,
        name: "LANGUAGE_SWIFT"
    }, {
        no: 44,
        name: "LANGUAGE_TSX"
    }, {
        no: 45,
        name: "LANGUAGE_TYPESCRIPT"
    }, {
        no: 46,
        name: "LANGUAGE_VISUALBASIC"
    }, {
        no: 47,
        name: "LANGUAGE_VUE"
    }, {
        no: 48,
        name: "LANGUAGE_XML"
    }, {
        no: 49,
        name: "LANGUAGE_XSL"
    }, {
        no: 50,
        name: "LANGUAGE_YAML"
    }, {
        no: 51,
        name: "LANGUAGE_SVELTE"
    }, {
        no: 52,
        name: "LANGUAGE_TOML"
    }, {
        no: 53,
        name: "LANGUAGE_DART"
    }, {
        no: 54,
        name: "LANGUAGE_RST"
    }, {
        no: 55,
        name: "LANGUAGE_OCAML"
    }, {
        no: 56,
        name: "LANGUAGE_CMAKE"
    }, {
        no: 57,
        name: "LANGUAGE_PASCAL"
    }, {
        no: 58,
        name: "LANGUAGE_ELIXIR"
    }, {
        no: 59,
        name: "LANGUAGE_FSHARP"
    }, {
        no: 60,
        name: "LANGUAGE_LISP"
    }, {
        no: 61,
        name: "LANGUAGE_MATLAB"
    }, {
        no: 62,
        name: "LANGUAGE_POWERSHELL"
    }, {
        no: 63,
        name: "LANGUAGE_SOLIDITY"
    }, {
        no: 64,
        name: "LANGUAGE_ADA"
    }, {
        no: 65,
        name: "LANGUAGE_OCAML_INTERFACE"
    }, {
        no: 66,
        name: "LANGUAGE_TREE_SITTER_QUERY"
    }, {
        no: 67,
        name: "LANGUAGE_APL"
    }, {
        no: 68,
        name: "LANGUAGE_ASSEMBLY"
    }, {
        no: 69,
        name: "LANGUAGE_COBOL"
    }, {
        no: 70,
        name: "LANGUAGE_CRYSTAL"
    }, {
        no: 71,
        name: "LANGUAGE_EMACS_LISP"
    }, {
        no: 72,
        name: "LANGUAGE_ERLANG"
    }, {
        no: 73,
        name: "LANGUAGE_FORTRAN"
    }, {
        no: 74,
        name: "LANGUAGE_FREEFORM"
    }, {
        no: 75,
        name: "LANGUAGE_GRADLE"
    }, {
        no: 76,
        name: "LANGUAGE_HACK"
    }, {
        no: 77,
        name: "LANGUAGE_MAVEN"
    }, {
        no: 78,
        name: "LANGUAGE_M68KASSEMBLY"
    }, {
        no: 79,
        name: "LANGUAGE_SAS"
    }, {
        no: 80,
        name: "LANGUAGE_UNIXASSEMBLY"
    }, {
        no: 81,
        name: "LANGUAGE_VBA"
    }, {
        no: 82,
        name: "LANGUAGE_VIMSCRIPT"
    }, {
        no: 83,
        name: "LANGUAGE_WEBASSEMBLY"
    }, {
        no: 84,
        name: "LANGUAGE_BLADE"
    }, {
        no: 85,
        name: "LANGUAGE_ASTRO"
    }, {
        no: 86,
        name: "LANGUAGE_MUMPS"
    }, {
        no: 87,
        name: "LANGUAGE_GDSCRIPT"
    }, {
        no: 88,
        name: "LANGUAGE_NIM"
    }, {
        no: 89,
        name: "LANGUAGE_PROLOG"
    }, {
        no: 90,
        name: "LANGUAGE_MARKDOWN_INLINE"
    }, {
        no: 91,
        name: "LANGUAGE_APEX"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.USER = 1] = "USER",
        e[e.SYSTEM = 2] = "SYSTEM",
        e[e.UNKNOWN = 3] = "UNKNOWN",
        e[e.TOOL = 4] = "TOOL",
        e[e.SYSTEM_PROMPT = 5] = "SYSTEM_PROMPT"
    }(et || (et = {})),
    ye.util.setEnumType(et, "exa.codeium_common_pb.ChatMessageSource", [{
        no: 0,
        name: "CHAT_MESSAGE_SOURCE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CHAT_MESSAGE_SOURCE_USER"
    }, {
        no: 2,
        name: "CHAT_MESSAGE_SOURCE_SYSTEM"
    }, {
        no: 3,
        name: "CHAT_MESSAGE_SOURCE_UNKNOWN"
    }, {
        no: 4,
        name: "CHAT_MESSAGE_SOURCE_TOOL"
    }, {
        no: 5,
        name: "CHAT_MESSAGE_SOURCE_SYSTEM_PROMPT"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.PENDING = 1] = "PENDING",
        e[e.APPROVED = 2] = "APPROVED",
        e[e.REJECTED = 3] = "REJECTED"
    }(tt || (tt = {})),
    ye.util.setEnumType(tt, "exa.codeium_common_pb.UserTeamStatus", [{
        no: 0,
        name: "USER_TEAM_STATUS_UNSPECIFIED"
    }, {
        no: 1,
        name: "USER_TEAM_STATUS_PENDING"
    }, {
        no: 2,
        name: "USER_TEAM_STATUS_APPROVED"
    }, {
        no: 3,
        name: "USER_TEAM_STATUS_REJECTED"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.SSO = 1] = "SSO",
        e[e.ATTRIBUTION = 2] = "ATTRIBUTION",
        e[e.PHI = 3] = "PHI",
        e[e.CORTEX = 4] = "CORTEX",
        e[e.OPENAI_DISABLED = 5] = "OPENAI_DISABLED",
        e[e.REMOTE_INDEXING_DISABLED = 6] = "REMOTE_INDEXING_DISABLED",
        e[e.API_KEY_ENABLED = 7] = "API_KEY_ENABLED"
    }(nt || (nt = {})),
    ye.util.setEnumType(nt, "exa.codeium_common_pb.TeamsFeatures", [{
        no: 0,
        name: "TEAMS_FEATURES_UNSPECIFIED"
    }, {
        no: 1,
        name: "TEAMS_FEATURES_SSO"
    }, {
        no: 2,
        name: "TEAMS_FEATURES_ATTRIBUTION"
    }, {
        no: 3,
        name: "TEAMS_FEATURES_PHI"
    }, {
        no: 4,
        name: "TEAMS_FEATURES_CORTEX"
    }, {
        no: 5,
        name: "TEAMS_FEATURES_OPENAI_DISABLED"
    }, {
        no: 6,
        name: "TEAMS_FEATURES_REMOTE_INDEXING_DISABLED"
    }, {
        no: 7,
        name: "TEAMS_FEATURES_API_KEY_ENABLED"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.CORTEX = 1] = "CORTEX",
        e[e.CORTEX_TEST = 2] = "CORTEX_TEST"
    }(at || (at = {})),
    ye.util.setEnumType(at, "exa.codeium_common_pb.UserFeatures", [{
        no: 0,
        name: "USER_FEATURES_UNSPECIFIED"
    }, {
        no: 1,
        name: "USER_FEATURES_CORTEX"
    }, {
        no: 2,
        name: "USER_FEATURES_CORTEX_TEST"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.ATTRIBUTION_READ = 1] = "ATTRIBUTION_READ",
        e[e.ANALYTICS_READ = 2] = "ANALYTICS_READ",
        e[e.LICENSE_READ = 3] = "LICENSE_READ",
        e[e.TEAM_USER_READ = 4] = "TEAM_USER_READ",
        e[e.TEAM_USER_UPDATE = 5] = "TEAM_USER_UPDATE",
        e[e.TEAM_USER_DELETE = 6] = "TEAM_USER_DELETE",
        e[e.TEAM_USER_INVITE = 17] = "TEAM_USER_INVITE",
        e[e.INDEXING_READ = 7] = "INDEXING_READ",
        e[e.INDEXING_CREATE = 8] = "INDEXING_CREATE",
        e[e.INDEXING_UPDATE = 9] = "INDEXING_UPDATE",
        e[e.INDEXING_DELETE = 10] = "INDEXING_DELETE",
        e[e.INDEXING_MANAGEMENT = 27] = "INDEXING_MANAGEMENT",
        e[e.FINETUNING_READ = 19] = "FINETUNING_READ",
        e[e.FINETUNING_CREATE = 20] = "FINETUNING_CREATE",
        e[e.FINETUNING_UPDATE = 21] = "FINETUNING_UPDATE",
        e[e.FINETUNING_DELETE = 22] = "FINETUNING_DELETE",
        e[e.SSO_READ = 11] = "SSO_READ",
        e[e.SSO_WRITE = 12] = "SSO_WRITE",
        e[e.SERVICE_KEY_READ = 13] = "SERVICE_KEY_READ",
        e[e.SERVICE_KEY_CREATE = 14] = "SERVICE_KEY_CREATE",
        e[e.SERVICE_KEY_UPDATE = 28] = "SERVICE_KEY_UPDATE",
        e[e.SERVICE_KEY_DELETE = 15] = "SERVICE_KEY_DELETE",
        e[e.ROLE_READ = 23] = "ROLE_READ",
        e[e.ROLE_CREATE = 24] = "ROLE_CREATE",
        e[e.ROLE_UPDATE = 25] = "ROLE_UPDATE",
        e[e.ROLE_DELETE = 26] = "ROLE_DELETE",
        e[e.BILLING_READ = 16] = "BILLING_READ",
        e[e.BILLING_WRITE = 18] = "BILLING_WRITE",
        e[e.EXTERNAL_CHAT_UPDATE = 29] = "EXTERNAL_CHAT_UPDATE",
        e[e.TEAM_SETTINGS_READ = 30] = "TEAM_SETTINGS_READ",
        e[e.TEAM_SETTINGS_UPDATE = 31] = "TEAM_SETTINGS_UPDATE"
    }(rt || (rt = {})),
    ye.util.setEnumType(rt, "exa.codeium_common_pb.Permission", [{
        no: 0,
        name: "PERMISSION_UNSPECIFIED"
    }, {
        no: 1,
        name: "PERMISSION_ATTRIBUTION_READ"
    }, {
        no: 2,
        name: "PERMISSION_ANALYTICS_READ"
    }, {
        no: 3,
        name: "PERMISSION_LICENSE_READ"
    }, {
        no: 4,
        name: "PERMISSION_TEAM_USER_READ"
    }, {
        no: 5,
        name: "PERMISSION_TEAM_USER_UPDATE"
    }, {
        no: 6,
        name: "PERMISSION_TEAM_USER_DELETE"
    }, {
        no: 17,
        name: "PERMISSION_TEAM_USER_INVITE"
    }, {
        no: 7,
        name: "PERMISSION_INDEXING_READ"
    }, {
        no: 8,
        name: "PERMISSION_INDEXING_CREATE"
    }, {
        no: 9,
        name: "PERMISSION_INDEXING_UPDATE"
    }, {
        no: 10,
        name: "PERMISSION_INDEXING_DELETE"
    }, {
        no: 27,
        name: "PERMISSION_INDEXING_MANAGEMENT"
    }, {
        no: 19,
        name: "PERMISSION_FINETUNING_READ"
    }, {
        no: 20,
        name: "PERMISSION_FINETUNING_CREATE"
    }, {
        no: 21,
        name: "PERMISSION_FINETUNING_UPDATE"
    }, {
        no: 22,
        name: "PERMISSION_FINETUNING_DELETE"
    }, {
        no: 11,
        name: "PERMISSION_SSO_READ"
    }, {
        no: 12,
        name: "PERMISSION_SSO_WRITE"
    }, {
        no: 13,
        name: "PERMISSION_SERVICE_KEY_READ"
    }, {
        no: 14,
        name: "PERMISSION_SERVICE_KEY_CREATE"
    }, {
        no: 28,
        name: "PERMISSION_SERVICE_KEY_UPDATE"
    }, {
        no: 15,
        name: "PERMISSION_SERVICE_KEY_DELETE"
    }, {
        no: 23,
        name: "PERMISSION_ROLE_READ"
    }, {
        no: 24,
        name: "PERMISSION_ROLE_CREATE"
    }, {
        no: 25,
        name: "PERMISSION_ROLE_UPDATE"
    }, {
        no: 26,
        name: "PERMISSION_ROLE_DELETE"
    }, {
        no: 16,
        name: "PERMISSION_BILLING_READ"
    }, {
        no: 18,
        name: "PERMISSION_BILLING_WRITE"
    }, {
        no: 29,
        name: "PERMISSION_EXTERNAL_CHAT_UPDATE"
    }, {
        no: 30,
        name: "PERMISSION_TEAM_SETTINGS_READ"
    }, {
        no: 31,
        name: "PERMISSION_TEAM_SETTINGS_UPDATE"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.TEAMS = 1] = "TEAMS",
        e[e.PRO = 2] = "PRO",
        e[e.TRIAL = 9] = "TRIAL",
        e[e.ENTERPRISE_SAAS = 3] = "ENTERPRISE_SAAS",
        e[e.HYBRID = 4] = "HYBRID",
        e[e.ENTERPRISE_SELF_HOSTED = 5] = "ENTERPRISE_SELF_HOSTED",
        e[e.WAITLIST_PRO = 6] = "WAITLIST_PRO",
        e[e.TEAMS_ULTIMATE = 7] = "TEAMS_ULTIMATE",
        e[e.PRO_ULTIMATE = 8] = "PRO_ULTIMATE"
    }(st || (st = {})),
    ye.util.setEnumType(st, "exa.codeium_common_pb.TeamsTier", [{
        no: 0,
        name: "TEAMS_TIER_UNSPECIFIED"
    }, {
        no: 1,
        name: "TEAMS_TIER_TEAMS"
    }, {
        no: 2,
        name: "TEAMS_TIER_PRO"
    }, {
        no: 9,
        name: "TEAMS_TIER_TRIAL"
    }, {
        no: 3,
        name: "TEAMS_TIER_ENTERPRISE_SAAS"
    }, {
        no: 4,
        name: "TEAMS_TIER_HYBRID"
    }, {
        no: 5,
        name: "TEAMS_TIER_ENTERPRISE_SELF_HOSTED"
    }, {
        no: 6,
        name: "TEAMS_TIER_WAITLIST_PRO"
    }, {
        no: 7,
        name: "TEAMS_TIER_TEAMS_ULTIMATE"
    }, {
        no: 8,
        name: "TEAMS_TIER_PRO_ULTIMATE"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.GITHUB = 1] = "GITHUB",
        e[e.GITLAB = 2] = "GITLAB",
        e[e.BITBUCKET = 3] = "BITBUCKET",
        e[e.AZURE_DEVOPS = 4] = "AZURE_DEVOPS"
    }(it || (it = {})),
    ye.util.setEnumType(it, "exa.codeium_common_pb.ScmProvider", [{
        no: 0,
        name: "SCM_PROVIDER_UNSPECIFIED"
    }, {
        no: 1,
        name: "SCM_PROVIDER_GITHUB"
    }, {
        no: 2,
        name: "SCM_PROVIDER_GITLAB"
    }, {
        no: 3,
        name: "SCM_PROVIDER_BITBUCKET"
    }, {
        no: 4,
        name: "SCM_PROVIDER_AZURE_DEVOPS"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.GIT = 1] = "GIT",
        e[e.PERFORCE = 2] = "PERFORCE"
    }(ot || (ot = {})),
    ye.util.setEnumType(ot, "exa.codeium_common_pb.ScmType", [{
        no: 0,
        name: "SCM_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "SCM_TYPE_GIT"
    }, {
        no: 2,
        name: "SCM_TYPE_PERFORCE"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.FUNCTION = 1] = "FUNCTION",
        e[e.CLASS = 2] = "CLASS",
        e[e.IMPORT = 3] = "IMPORT",
        e[e.NAIVE_LINECHUNK = 4] = "NAIVE_LINECHUNK",
        e[e.REFERENCE_FUNCTION = 5] = "REFERENCE_FUNCTION",
        e[e.REFERENCE_CLASS = 6] = "REFERENCE_CLASS",
        e[e.FILE = 7] = "FILE",
        e[e.TERMINAL = 8] = "TERMINAL"
    }(mt || (mt = {})),
    ye.util.setEnumType(mt, "exa.codeium_common_pb.CodeContextType", [{
        no: 0,
        name: "CODE_CONTEXT_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CODE_CONTEXT_TYPE_FUNCTION"
    }, {
        no: 2,
        name: "CODE_CONTEXT_TYPE_CLASS"
    }, {
        no: 3,
        name: "CODE_CONTEXT_TYPE_IMPORT"
    }, {
        no: 4,
        name: "CODE_CONTEXT_TYPE_NAIVE_LINECHUNK"
    }, {
        no: 5,
        name: "CODE_CONTEXT_TYPE_REFERENCE_FUNCTION"
    }, {
        no: 6,
        name: "CODE_CONTEXT_TYPE_REFERENCE_CLASS"
    }, {
        no: 7,
        name: "CODE_CONTEXT_TYPE_FILE"
    }, {
        no: 8,
        name: "CODE_CONTEXT_TYPE_TERMINAL"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.OPEN_DOCS = 1] = "OPEN_DOCS",
        e[e.SEARCH_RESULT = 2] = "SEARCH_RESULT",
        e[e.IMPORT = 3] = "IMPORT",
        e[e.LOCAL_DIRECTORY = 4] = "LOCAL_DIRECTORY",
        e[e.LAST_ACTIVE_DOC = 5] = "LAST_ACTIVE_DOC",
        e[e.ORACLE_ITEMS = 6] = "ORACLE_ITEMS",
        e[e.PINNED_CONTEXT = 7] = "PINNED_CONTEXT",
        e[e.RESEARCH_STATE = 8] = "RESEARCH_STATE",
        e[e.GROUND_TRUTH_PLAN_EDIT = 9] = "GROUND_TRUTH_PLAN_EDIT",
        e[e.COMMIT_GRAPH = 10] = "COMMIT_GRAPH"
    }(ct || (ct = {})),
    ye.util.setEnumType(ct, "exa.codeium_common_pb.CodeContextSource", [{
        no: 0,
        name: "CODE_CONTEXT_SOURCE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CODE_CONTEXT_SOURCE_OPEN_DOCS"
    }, {
        no: 2,
        name: "CODE_CONTEXT_SOURCE_SEARCH_RESULT"
    }, {
        no: 3,
        name: "CODE_CONTEXT_SOURCE_IMPORT"
    }, {
        no: 4,
        name: "CODE_CONTEXT_SOURCE_LOCAL_DIRECTORY"
    }, {
        no: 5,
        name: "CODE_CONTEXT_SOURCE_LAST_ACTIVE_DOC"
    }, {
        no: 6,
        name: "CODE_CONTEXT_SOURCE_ORACLE_ITEMS"
    }, {
        no: 7,
        name: "CODE_CONTEXT_SOURCE_PINNED_CONTEXT"
    }, {
        no: 8,
        name: "CODE_CONTEXT_SOURCE_RESEARCH_STATE"
    }, {
        no: 9,
        name: "CODE_CONTEXT_SOURCE_GROUND_TRUTH_PLAN_EDIT"
    }, {
        no: 10,
        name: "CODE_CONTEXT_SOURCE_COMMIT_GRAPH"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.RAW_SOURCE = 1] = "RAW_SOURCE",
        e[e.SIGNATURE = 2] = "SIGNATURE",
        e[e.NODEPATH = 3] = "NODEPATH"
    }(ut || (ut = {})),
    ye.util.setEnumType(ut, "exa.codeium_common_pb.ContextSnippetType", [{
        no: 0,
        name: "CONTEXT_SNIPPET_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CONTEXT_SNIPPET_TYPE_RAW_SOURCE"
    }, {
        no: 2,
        name: "CONTEXT_SNIPPET_TYPE_SIGNATURE"
    }, {
        no: 3,
        name: "CONTEXT_SNIPPET_TYPE_NODEPATH"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.COMMIT_MESSAGE = 1] = "COMMIT_MESSAGE"
    }(lt || (lt = {})),
    ye.util.setEnumType(lt, "exa.codeium_common_pb.CommitIntentType", [{
        no: 0,
        name: "COMMIT_INTENT_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "COMMIT_INTENT_TYPE_COMMIT_MESSAGE"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.L4 = 1] = "L4",
        e[e.T4 = 2] = "T4",
        e[e.A10 = 3] = "A10",
        e[e.A100 = 4] = "A100",
        e[e.V100 = 5] = "V100",
        e[e.A5000 = 6] = "A5000"
    }(_t || (_t = {})),
    ye.util.setEnumType(_t, "exa.codeium_common_pb.GpuType", [{
        no: 0,
        name: "GPU_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "GPU_TYPE_L4"
    }, {
        no: 2,
        name: "GPU_TYPE_T4"
    }, {
        no: 3,
        name: "GPU_TYPE_A10"
    }, {
        no: 4,
        name: "GPU_TYPE_A100"
    }, {
        no: 5,
        name: "GPU_TYPE_V100"
    }, {
        no: 6,
        name: "GPU_TYPE_A5000"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.INCLUDE = 1] = "INCLUDE",
        e[e.EXCLUDE = 2] = "EXCLUDE"
    }(Et || (Et = {})),
    ye.util.setEnumType(Et, "exa.codeium_common_pb.ContextInclusionType", [{
        no: 0,
        name: "CONTEXT_INCLUSION_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CONTEXT_INCLUSION_TYPE_INCLUDE"
    }, {
        no: 2,
        name: "CONTEXT_INCLUSION_TYPE_EXCLUDE"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.AUTO = 1] = "AUTO",
        e[e.LIGHT = 2] = "LIGHT",
        e[e.DARK = 3] = "DARK"
    }(dt || (dt = {})),
    ye.util.setEnumType(dt, "exa.codeium_common_pb.ThemePreference", [{
        no: 0,
        name: "THEME_PREFERENCE_UNSPECIFIED"
    }, {
        no: 1,
        name: "THEME_PREFERENCE_AUTO"
    }, {
        no: 2,
        name: "THEME_PREFERENCE_LIGHT"
    }, {
        no: 3,
        name: "THEME_PREFERENCE_DARK"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.SMALL = 1] = "SMALL",
        e[e.DEFAULT = 2] = "DEFAULT",
        e[e.LARGE = 3] = "LARGE"
    }(Tt || (Tt = {})),
    ye.util.setEnumType(Tt, "exa.codeium_common_pb.FontSize", [{
        no: 0,
        name: "FONT_SIZE_UNSPECIFIED"
    }, {
        no: 1,
        name: "FONT_SIZE_SMALL"
    }, {
        no: 2,
        name: "FONT_SIZE_DEFAULT"
    }, {
        no: 3,
        name: "FONT_SIZE_LARGE"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.SLOW = 1] = "SLOW",
        e[e.DEFAULT = 2] = "DEFAULT",
        e[e.FAST = 3] = "FAST"
    }(ft || (ft = {})),
    ye.util.setEnumType(ft, "exa.codeium_common_pb.AutocompleteSpeed", [{
        no: 0,
        name: "AUTOCOMPLETE_SPEED_UNSPECIFIED"
    }, {
        no: 1,
        name: "AUTOCOMPLETE_SPEED_SLOW"
    }, {
        no: 2,
        name: "AUTOCOMPLETE_SPEED_DEFAULT"
    }, {
        no: 3,
        name: "AUTOCOMPLETE_SPEED_FAST"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.OFF = 1] = "OFF",
        e[e.AUTO = 2] = "AUTO",
        e[e.EAGER = 3] = "EAGER"
    }(pt || (pt = {})),
    ye.util.setEnumType(pt, "exa.codeium_common_pb.CascadeCommandsAutoExecution", [{
        no: 0,
        name: "CASCADE_COMMANDS_AUTO_EXECUTION_UNSPECIFIED"
    }, {
        no: 1,
        name: "CASCADE_COMMANDS_AUTO_EXECUTION_OFF"
    }, {
        no: 2,
        name: "CASCADE_COMMANDS_AUTO_EXECUTION_AUTO"
    }, {
        no: 3,
        name: "CASCADE_COMMANDS_AUTO_EXECUTION_EAGER"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.CHAT = 1] = "CHAT",
        e[e.PROFILE = 2] = "PROFILE",
        e[e.BRAIN = 4] = "BRAIN",
        e[e.COMMAND = 5] = "COMMAND",
        e[e.CORTEX = 6] = "CORTEX",
        e[e.DEBUG = 7] = "DEBUG"
    }(St || (St = {})),
    ye.util.setEnumType(St, "exa.codeium_common_pb.ExtensionPanelTab", [{
        no: 0,
        name: "EXTENSION_PANEL_TAB_UNSPECIFIED"
    }, {
        no: 1,
        name: "EXTENSION_PANEL_TAB_CHAT"
    }, {
        no: 2,
        name: "EXTENSION_PANEL_TAB_PROFILE"
    }, {
        no: 4,
        name: "EXTENSION_PANEL_TAB_BRAIN"
    }, {
        no: 5,
        name: "EXTENSION_PANEL_TAB_COMMAND"
    }, {
        no: 6,
        name: "EXTENSION_PANEL_TAB_CORTEX"
    }, {
        no: 7,
        name: "EXTENSION_PANEL_TAB_DEBUG"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.ENABLED = 1] = "ENABLED",
        e[e.DISABLED = 2] = "DISABLED"
    }(Nt || (Nt = {})),
    ye.util.setEnumType(Nt, "exa.codeium_common_pb.RememberLastModelSelection", [{
        no: 0,
        name: "REMEMBER_LAST_MODEL_SELECTION_UNSPECIFIED"
    }, {
        no: 1,
        name: "REMEMBER_LAST_MODEL_SELECTION_ENABLED"
    }, {
        no: 2,
        name: "REMEMBER_LAST_MODEL_SELECTION_DISABLED"
    }]),
    function(e) {
        e[e.CASCADE_NUX_EVENT_UNSPECIFIED = 0] = "CASCADE_NUX_EVENT_UNSPECIFIED",
        e[e.CASCADE_NUX_EVENT_DIFF_OVERVIEW = 1] = "CASCADE_NUX_EVENT_DIFF_OVERVIEW",
        e[e.CASCADE_NUX_EVENT_WEB_SEARCH = 2] = "CASCADE_NUX_EVENT_WEB_SEARCH",
        e[e.CASCADE_NUX_EVENT_NEW_MODELS_WAVE2 = 3] = "CASCADE_NUX_EVENT_NEW_MODELS_WAVE2",
        e[e.CASCADE_NUX_EVENT_TOOL_CALL = 4] = "CASCADE_NUX_EVENT_TOOL_CALL"
    }(Ct || (Ct = {})),
    ye.util.setEnumType(Ct, "exa.codeium_common_pb.CascadeNUXEvent", [{
        no: 0,
        name: "CASCADE_NUX_EVENT_UNSPECIFIED"
    }, {
        no: 1,
        name: "CASCADE_NUX_EVENT_DIFF_OVERVIEW"
    }, {
        no: 2,
        name: "CASCADE_NUX_EVENT_WEB_SEARCH"
    }, {
        no: 3,
        name: "CASCADE_NUX_EVENT_NEW_MODELS_WAVE2"
    }, {
        no: 4,
        name: "CASCADE_NUX_EVENT_TOOL_CALL"
    }]),
    function(e) {
        e[e.USER_NUX_EVENT_UNSPECIFIED = 0] = "USER_NUX_EVENT_UNSPECIFIED",
        e[e.USER_NUX_EVENT_DISMISS_WINDSURF_CROSS_SELL = 1] = "USER_NUX_EVENT_DISMISS_WINDSURF_CROSS_SELL"
    }(It || (It = {})),
    ye.util.setEnumType(It, "exa.codeium_common_pb.UserNUXEvent", [{
        no: 0,
        name: "USER_NUX_EVENT_UNSPECIFIED"
    }, {
        no: 1,
        name: "USER_NUX_EVENT_DISMISS_WINDSURF_CROSS_SELL"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.DEFAULT = 1] = "DEFAULT",
        e[e.READ_ONLY = 2] = "READ_ONLY",
        e[e.NO_TOOL = 3] = "NO_TOOL"
    }(gt || (gt = {})),
    ye.util.setEnumType(gt, "exa.codeium_common_pb.ConversationalPlannerMode", [{
        no: 0,
        name: "CONVERSATIONAL_PLANNER_MODE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CONVERSATIONAL_PLANNER_MODE_DEFAULT"
    }, {
        no: 2,
        name: "CONVERSATIONAL_PLANNER_MODE_READ_ONLY"
    }, {
        no: 3,
        name: "CONVERSATIONAL_PLANNER_MODE_NO_TOOL"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.COMPLETION = 1] = "COMPLETION",
        e[e.CHAT = 2] = "CHAT",
        e[e.EMBED = 3] = "EMBED",
        e[e.QUERY = 4] = "QUERY"
    }(Ot || (Ot = {})),
    ye.util.setEnumType(Ot, "exa.codeium_common_pb.ModelType", [{
        no: 0,
        name: "MODEL_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "MODEL_TYPE_COMPLETION"
    }, {
        no: 2,
        name: "MODEL_TYPE_CHAT"
    }, {
        no: 3,
        name: "MODEL_TYPE_EMBED"
    }, {
        no: 4,
        name: "MODEL_TYPE_QUERY"
    }]),
    function(e) {
        e[e.API_PROVIDER_UNSPECIFIED = 0] = "API_PROVIDER_UNSPECIFIED",
        e[e.API_PROVIDER_INTERNAL = 1] = "API_PROVIDER_INTERNAL",
        e[e.API_PROVIDER_OPENAI = 2] = "API_PROVIDER_OPENAI",
        e[e.API_PROVIDER_GOOGLE_VERTEX = 3] = "API_PROVIDER_GOOGLE_VERTEX",
        e[e.API_PROVIDER_ANTHROPIC = 4] = "API_PROVIDER_ANTHROPIC",
        e[e.API_PROVIDER_VLLM = 5] = "API_PROVIDER_VLLM",
        e[e.API_PROVIDER_TOGETHER_AI = 6] = "API_PROVIDER_TOGETHER_AI",
        e[e.API_PROVIDER_HUGGING_FACE = 7] = "API_PROVIDER_HUGGING_FACE",
        e[e.API_PROVIDER_NOMIC = 8] = "API_PROVIDER_NOMIC",
        e[e.API_PROVIDER_TEI = 9] = "API_PROVIDER_TEI",
        e[e.API_PROVIDER_OPENAI_COMPATIBLE_EXTERNAL = 10] = "API_PROVIDER_OPENAI_COMPATIBLE_EXTERNAL",
        e[e.API_PROVIDER_ANTHROPIC_COMPATIBLE_EXTERNAL = 11] = "API_PROVIDER_ANTHROPIC_COMPATIBLE_EXTERNAL",
        e[e.API_PROVIDER_VERTEX_COMPATIBLE_EXTERNAL = 12] = "API_PROVIDER_VERTEX_COMPATIBLE_EXTERNAL",
        e[e.API_PROVIDER_BEDROCK_COMPATIBLE_EXTERNAL = 13] = "API_PROVIDER_BEDROCK_COMPATIBLE_EXTERNAL",
        e[e.API_PROVIDER_AZURE_COMPATIBLE_EXTERNAL = 14] = "API_PROVIDER_AZURE_COMPATIBLE_EXTERNAL",
        e[e.API_PROVIDER_ANTHROPIC_BEDROCK = 15] = "API_PROVIDER_ANTHROPIC_BEDROCK",
        e[e.API_PROVIDER_FIREWORKS = 16] = "API_PROVIDER_FIREWORKS",
        e[e.API_PROVIDER_OPEN_ROUTER = 17] = "API_PROVIDER_OPEN_ROUTER",
        e[e.API_PROVIDER_XAI = 18] = "API_PROVIDER_XAI",
        e[e.API_PROVIDER_ANTHROPIC_BYOK = 20] = "API_PROVIDER_ANTHROPIC_BYOK",
        e[e.API_PROVIDER_CEREBRAS = 21] = "API_PROVIDER_CEREBRAS",
        e[e.API_PROVIDER_XAI_BYOK = 22] = "API_PROVIDER_XAI_BYOK",
        e[e.API_PROVIDER_GEMINI_OPENAI = 23] = "API_PROVIDER_GEMINI_OPENAI"
    }(At || (At = {})),
    ye.util.setEnumType(At, "exa.codeium_common_pb.APIProvider", [{
        no: 0,
        name: "API_PROVIDER_UNSPECIFIED"
    }, {
        no: 1,
        name: "API_PROVIDER_INTERNAL"
    }, {
        no: 2,
        name: "API_PROVIDER_OPENAI"
    }, {
        no: 3,
        name: "API_PROVIDER_GOOGLE_VERTEX"
    }, {
        no: 4,
        name: "API_PROVIDER_ANTHROPIC"
    }, {
        no: 5,
        name: "API_PROVIDER_VLLM"
    }, {
        no: 6,
        name: "API_PROVIDER_TOGETHER_AI"
    }, {
        no: 7,
        name: "API_PROVIDER_HUGGING_FACE"
    }, {
        no: 8,
        name: "API_PROVIDER_NOMIC"
    }, {
        no: 9,
        name: "API_PROVIDER_TEI"
    }, {
        no: 10,
        name: "API_PROVIDER_OPENAI_COMPATIBLE_EXTERNAL"
    }, {
        no: 11,
        name: "API_PROVIDER_ANTHROPIC_COMPATIBLE_EXTERNAL"
    }, {
        no: 12,
        name: "API_PROVIDER_VERTEX_COMPATIBLE_EXTERNAL"
    }, {
        no: 13,
        name: "API_PROVIDER_BEDROCK_COMPATIBLE_EXTERNAL"
    }, {
        no: 14,
        name: "API_PROVIDER_AZURE_COMPATIBLE_EXTERNAL"
    }, {
        no: 15,
        name: "API_PROVIDER_ANTHROPIC_BEDROCK"
    }, {
        no: 16,
        name: "API_PROVIDER_FIREWORKS"
    }, {
        no: 17,
        name: "API_PROVIDER_OPEN_ROUTER"
    }, {
        no: 18,
        name: "API_PROVIDER_XAI"
    }, {
        no: 20,
        name: "API_PROVIDER_ANTHROPIC_BYOK"
    }, {
        no: 21,
        name: "API_PROVIDER_CEREBRAS"
    }, {
        no: 22,
        name: "API_PROVIDER_XAI_BYOK"
    }, {
        no: 23,
        name: "API_PROVIDER_GEMINI_OPENAI"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.BASE = 1] = "BASE",
        e[e.CODEIUM = 2] = "CODEIUM",
        e[e.USER = 3] = "USER",
        e[e.USER_LARGE = 4] = "USER_LARGE",
        e[e.UNKNOWN = 5] = "UNKNOWN"
    }(Pt || (Pt = {})),
    ye.util.setEnumType(Pt, "exa.codeium_common_pb.CodeSource", [{
        no: 0,
        name: "CODE_SOURCE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CODE_SOURCE_BASE"
    }, {
        no: 2,
        name: "CODE_SOURCE_CODEIUM"
    }, {
        no: 3,
        name: "CODE_SOURCE_USER"
    }, {
        no: 4,
        name: "CODE_SOURCE_USER_LARGE"
    }, {
        no: 5,
        name: "CODE_SOURCE_UNKNOWN"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.SLACK_MESSAGE = 1] = "SLACK_MESSAGE",
        e[e.SLACK_CHANNEL = 2] = "SLACK_CHANNEL",
        e[e.GITHUB_ISSUE = 3] = "GITHUB_ISSUE",
        e[e.GITHUB_ISSUE_COMMENT = 4] = "GITHUB_ISSUE_COMMENT",
        e[e.GITHUB_REPO = 8] = "GITHUB_REPO",
        e[e.GOOGLE_DRIVE_FILE = 5] = "GOOGLE_DRIVE_FILE",
        e[e.GOOGLE_DRIVE_FOLDER = 6] = "GOOGLE_DRIVE_FOLDER",
        e[e.JIRA_ISSUE = 7] = "JIRA_ISSUE",
        e[e.CCI = 9] = "CCI"
    }(Lt || (Lt = {})),
    ye.util.setEnumType(Lt, "exa.codeium_common_pb.DocumentType", [{
        no: 0,
        name: "DOCUMENT_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "DOCUMENT_TYPE_SLACK_MESSAGE"
    }, {
        no: 2,
        name: "DOCUMENT_TYPE_SLACK_CHANNEL"
    }, {
        no: 3,
        name: "DOCUMENT_TYPE_GITHUB_ISSUE"
    }, {
        no: 4,
        name: "DOCUMENT_TYPE_GITHUB_ISSUE_COMMENT"
    }, {
        no: 8,
        name: "DOCUMENT_TYPE_GITHUB_REPO"
    }, {
        no: 5,
        name: "DOCUMENT_TYPE_GOOGLE_DRIVE_FILE"
    }, {
        no: 6,
        name: "DOCUMENT_TYPE_GOOGLE_DRIVE_FOLDER"
    }, {
        no: 7,
        name: "DOCUMENT_TYPE_JIRA_ISSUE"
    }, {
        no: 9,
        name: "DOCUMENT_TYPE_CCI"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.FILE = 1] = "FILE",
        e[e.DIRECTORY = 2] = "DIRECTORY",
        e[e.REPOSITORY = 3] = "REPOSITORY",
        e[e.CODE_CONTEXT = 4] = "CODE_CONTEXT",
        e[e.CCI_WITH_SUBRANGE = 5] = "CCI_WITH_SUBRANGE",
        e[e.REPOSITORY_PATH = 6] = "REPOSITORY_PATH",
        e[e.SLACK = 7] = "SLACK",
        e[e.GITHUB = 8] = "GITHUB",
        e[e.FILE_LINE_RANGE = 9] = "FILE_LINE_RANGE",
        e[e.TEXT_BLOCK = 10] = "TEXT_BLOCK",
        e[e.JIRA = 11] = "JIRA",
        e[e.GOOGLE_DRIVE = 12] = "GOOGLE_DRIVE",
        e[e.CONSOLE_LOG = 13] = "CONSOLE_LOG",
        e[e.DOM_ELEMENT = 14] = "DOM_ELEMENT",
        e[e.RECIPE = 15] = "RECIPE"
    }(Rt || (Rt = {})),
    ye.util.setEnumType(Rt, "exa.codeium_common_pb.ContextScopeType", [{
        no: 0,
        name: "CONTEXT_SCOPE_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CONTEXT_SCOPE_TYPE_FILE"
    }, {
        no: 2,
        name: "CONTEXT_SCOPE_TYPE_DIRECTORY"
    }, {
        no: 3,
        name: "CONTEXT_SCOPE_TYPE_REPOSITORY"
    }, {
        no: 4,
        name: "CONTEXT_SCOPE_TYPE_CODE_CONTEXT"
    }, {
        no: 5,
        name: "CONTEXT_SCOPE_TYPE_CCI_WITH_SUBRANGE"
    }, {
        no: 6,
        name: "CONTEXT_SCOPE_TYPE_REPOSITORY_PATH"
    }, {
        no: 7,
        name: "CONTEXT_SCOPE_TYPE_SLACK"
    }, {
        no: 8,
        name: "CONTEXT_SCOPE_TYPE_GITHUB"
    }, {
        no: 9,
        name: "CONTEXT_SCOPE_TYPE_FILE_LINE_RANGE"
    }, {
        no: 10,
        name: "CONTEXT_SCOPE_TYPE_TEXT_BLOCK"
    }, {
        no: 11,
        name: "CONTEXT_SCOPE_TYPE_JIRA"
    }, {
        no: 12,
        name: "CONTEXT_SCOPE_TYPE_GOOGLE_DRIVE"
    }, {
        no: 13,
        name: "CONTEXT_SCOPE_TYPE_CONSOLE_LOG"
    }, {
        no: 14,
        name: "CONTEXT_SCOPE_TYPE_DOM_ELEMENT"
    }, {
        no: 15,
        name: "CONTEXT_SCOPE_TYPE_RECIPE"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.DEFAULT = 1] = "DEFAULT",
        e[e.FUNCTION_CODE_LENS = 2] = "FUNCTION_CODE_LENS",
        e[e.CLASS_CODE_LENS = 3] = "CLASS_CODE_LENS",
        e[e.RIGHT_CLICK_REFACTOR = 4] = "RIGHT_CLICK_REFACTOR",
        e[e.SELECTION_HINT_CODE_LENS = 5] = "SELECTION_HINT_CODE_LENS",
        e[e.LINE_HINT_CODE_LENS = 6] = "LINE_HINT_CODE_LENS",
        e[e.PLAN = 7] = "PLAN",
        e[e.FOLLOWUP = 8] = "FOLLOWUP",
        e[e.PASTE_AND_TRANSLATE = 9] = "PASTE_AND_TRANSLATE",
        e[e.SUPERCOMPLETE = 10] = "SUPERCOMPLETE",
        e[e.FUNCTION_DOCSTRING = 11] = "FUNCTION_DOCSTRING",
        e[e.FAST_APPLY = 12] = "FAST_APPLY",
        e[e.TERMINAL = 13] = "TERMINAL",
        e[e.TAB_JUMP = 14] = "TAB_JUMP"
    }(yt || (yt = {})),
    ye.util.setEnumType(yt, "exa.codeium_common_pb.CommandRequestSource", [{
        no: 0,
        name: "COMMAND_REQUEST_SOURCE_UNSPECIFIED"
    }, {
        no: 1,
        name: "COMMAND_REQUEST_SOURCE_DEFAULT"
    }, {
        no: 2,
        name: "COMMAND_REQUEST_SOURCE_FUNCTION_CODE_LENS"
    }, {
        no: 3,
        name: "COMMAND_REQUEST_SOURCE_CLASS_CODE_LENS"
    }, {
        no: 4,
        name: "COMMAND_REQUEST_SOURCE_RIGHT_CLICK_REFACTOR"
    }, {
        no: 5,
        name: "COMMAND_REQUEST_SOURCE_SELECTION_HINT_CODE_LENS"
    }, {
        no: 6,
        name: "COMMAND_REQUEST_SOURCE_LINE_HINT_CODE_LENS"
    }, {
        no: 7,
        name: "COMMAND_REQUEST_SOURCE_PLAN"
    }, {
        no: 8,
        name: "COMMAND_REQUEST_SOURCE_FOLLOWUP"
    }, {
        no: 9,
        name: "COMMAND_REQUEST_SOURCE_PASTE_AND_TRANSLATE"
    }, {
        no: 10,
        name: "COMMAND_REQUEST_SOURCE_SUPERCOMPLETE"
    }, {
        no: 11,
        name: "COMMAND_REQUEST_SOURCE_FUNCTION_DOCSTRING"
    }, {
        no: 12,
        name: "COMMAND_REQUEST_SOURCE_FAST_APPLY"
    }, {
        no: 13,
        name: "COMMAND_REQUEST_SOURCE_TERMINAL"
    }, {
        no: 14,
        name: "COMMAND_REQUEST_SOURCE_TAB_JUMP"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.ERROR = 1] = "ERROR",
        e[e.WARNING = 2] = "WARNING",
        e[e.INFO = 3] = "INFO",
        e[e.DEBUG = 4] = "DEBUG"
    }(wt || (wt = {})),
    ye.util.setEnumType(wt, "exa.codeium_common_pb.StatusLevel", [{
        no: 0,
        name: "STATUS_LEVEL_UNSPECIFIED"
    }, {
        no: 1,
        name: "STATUS_LEVEL_ERROR"
    }, {
        no: 2,
        name: "STATUS_LEVEL_WARNING"
    }, {
        no: 3,
        name: "STATUS_LEVEL_INFO"
    }, {
        no: 4,
        name: "STATUS_LEVEL_DEBUG"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.OVERALL = 1] = "OVERALL",
        e[e.ACTION_PREPARE = 2] = "ACTION_PREPARE",
        e[e.ACTION_APPLY = 3] = "ACTION_APPLY"
    }(kt || (kt = {})),
    ye.util.setEnumType(kt, "exa.codeium_common_pb.CortexErrorCategory", [{
        no: 0,
        name: "CORTEX_ERROR_CATEGORY_UNSPECIFIED"
    }, {
        no: 1,
        name: "CORTEX_ERROR_CATEGORY_OVERALL"
    }, {
        no: 2,
        name: "CORTEX_ERROR_CATEGORY_ACTION_PREPARE"
    }, {
        no: 3,
        name: "CORTEX_ERROR_CATEGORY_ACTION_APPLY"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.OVERALL = 1] = "OVERALL",
        e[e.LAST_AUTOCOMPLETE_USAGE_TIME = 2] = "LAST_AUTOCOMPLETE_USAGE_TIME",
        e[e.LAST_CHAT_USAGE_TIME = 3] = "LAST_CHAT_USAGE_TIME",
        e[e.LAST_COMMAND_USAGE_TIME = 4] = "LAST_COMMAND_USAGE_TIME"
    }(Dt || (Dt = {})),
    ye.util.setEnumType(Dt, "exa.codeium_common_pb.LastUpdateType", [{
        no: 0,
        name: "LAST_UPDATE_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "LAST_UPDATE_TYPE_OVERALL"
    }, {
        no: 2,
        name: "LAST_UPDATE_TYPE_LAST_AUTOCOMPLETE_USAGE_TIME"
    }, {
        no: 3,
        name: "LAST_UPDATE_TYPE_LAST_CHAT_USAGE_TIME"
    }, {
        no: 4,
        name: "LAST_UPDATE_TYPE_LAST_COMMAND_USAGE_TIME"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.AUTOCOMPLETE = 1] = "AUTOCOMPLETE",
        e[e.COMMAND = 2] = "COMMAND",
        e[e.CHAT = 3] = "CHAT"
    }(Jt || (Jt = {})),
    ye.util.setEnumType(Jt, "exa.codeium_common_pb.OnboardingActionType", [{
        no: 0,
        name: "ONBOARDING_ACTION_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "ONBOARDING_ACTION_TYPE_AUTOCOMPLETE"
    }, {
        no: 2,
        name: "ONBOARDING_ACTION_TYPE_COMMAND"
    }, {
        no: 3,
        name: "ONBOARDING_ACTION_TYPE_CHAT"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.AUTOCOMPLETE_ACCEPT = 1] = "AUTOCOMPLETE_ACCEPT",
        e[e.CURSOR_LINE_NAVIGATION = 2] = "CURSOR_LINE_NAVIGATION",
        e[e.TYPING = 3] = "TYPING",
        e[e.FORCED = 4] = "FORCED",
        e[e.TAB_JUMP_ACCEPT = 5] = "TAB_JUMP_ACCEPT",
        e[e.SUPERCOMPLETE_ACCEPT = 6] = "SUPERCOMPLETE_ACCEPT",
        e[e.TAB_JUMP_PREDICTIVE = 7] = "TAB_JUMP_PREDICTIVE",
        e[e.AUTOCOMPLETE_PREDICTIVE = 8] = "AUTOCOMPLETE_PREDICTIVE",
        e[e.SUPERCOMPLETE_PREDICTIVE = 9] = "SUPERCOMPLETE_PREDICTIVE",
        e[e.TAB_JUMP_EDIT = 10] = "TAB_JUMP_EDIT"
    }(Mt || (Mt = {})),
    ye.util.setEnumType(Mt, "exa.codeium_common_pb.SupercompleteTriggerCondition", [{
        no: 0,
        name: "SUPERCOMPLETE_TRIGGER_CONDITION_UNSPECIFIED"
    }, {
        no: 1,
        name: "SUPERCOMPLETE_TRIGGER_CONDITION_AUTOCOMPLETE_ACCEPT"
    }, {
        no: 2,
        name: "SUPERCOMPLETE_TRIGGER_CONDITION_CURSOR_LINE_NAVIGATION"
    }, {
        no: 3,
        name: "SUPERCOMPLETE_TRIGGER_CONDITION_TYPING"
    }, {
        no: 4,
        name: "SUPERCOMPLETE_TRIGGER_CONDITION_FORCED"
    }, {
        no: 5,
        name: "SUPERCOMPLETE_TRIGGER_CONDITION_TAB_JUMP_ACCEPT"
    }, {
        no: 6,
        name: "SUPERCOMPLETE_TRIGGER_CONDITION_SUPERCOMPLETE_ACCEPT"
    }, {
        no: 7,
        name: "SUPERCOMPLETE_TRIGGER_CONDITION_TAB_JUMP_PREDICTIVE"
    }, {
        no: 8,
        name: "SUPERCOMPLETE_TRIGGER_CONDITION_AUTOCOMPLETE_PREDICTIVE"
    }, {
        no: 9,
        name: "SUPERCOMPLETE_TRIGGER_CONDITION_SUPERCOMPLETE_PREDICTIVE"
    }, {
        no: 10,
        name: "SUPERCOMPLETE_TRIGGER_CONDITION_TAB_JUMP_EDIT"
    }]),
    function(e) {
        e[e.EVENT_UNSPECIFIED = 0] = "EVENT_UNSPECIFIED",
        e[e.WINDSURF_EXTENSION_ACTIVATED = 32] = "WINDSURF_EXTENSION_ACTIVATED",
        e[e.LS_DOWNLOAD_START = 1] = "LS_DOWNLOAD_START",
        e[e.LS_DOWNLOAD_COMPLETE = 2] = "LS_DOWNLOAD_COMPLETE",
        e[e.LS_DOWNLOAD_FAILURE = 5] = "LS_DOWNLOAD_FAILURE",
        e[e.LS_STARTUP = 3] = "LS_STARTUP",
        e[e.LS_FAILURE = 4] = "LS_FAILURE",
        e[e.AUTOCOMPLETE_ACCEPTED = 6] = "AUTOCOMPLETE_ACCEPTED",
        e[e.AUTOCOMPLETE_ONE_WORD_ACCEPTED = 7] = "AUTOCOMPLETE_ONE_WORD_ACCEPTED",
        e[e.CHAT_MESSAGE_SENT = 8] = "CHAT_MESSAGE_SENT",
        e[e.CHAT_MENTION_INSERT = 13] = "CHAT_MENTION_INSERT",
        e[e.CHAT_MENTION_MENU_OPEN = 19] = "CHAT_MENTION_MENU_OPEN",
        e[e.CHAT_OPEN_SETTINGS = 14] = "CHAT_OPEN_SETTINGS",
        e[e.CHAT_OPEN_CONTEXT_SETTINGS = 15] = "CHAT_OPEN_CONTEXT_SETTINGS",
        e[e.CHAT_WITH_CODEBASE = 16] = "CHAT_WITH_CODEBASE",
        e[e.CHAT_NEW_CONVERSATION = 17] = "CHAT_NEW_CONVERSATION",
        e[e.CHAT_CHANGE_MODEL = 18] = "CHAT_CHANGE_MODEL",
        e[e.CHAT_TOGGLE_FOCUS_INSERT_TEXT = 34] = "CHAT_TOGGLE_FOCUS_INSERT_TEXT",
        e[e.FUNCTION_REFACTOR = 28] = "FUNCTION_REFACTOR",
        e[e.EXPLAIN_CODE_BLOCK = 29] = "EXPLAIN_CODE_BLOCK",
        e[e.FUNCTION_ADD_DOCSTRING = 30] = "FUNCTION_ADD_DOCSTRING",
        e[e.EXPLAIN_PROBLEM = 31] = "EXPLAIN_PROBLEM",
        e[e.COMMAND_BOX_OPENED = 9] = "COMMAND_BOX_OPENED",
        e[e.COMMAND_SUBMITTED = 10] = "COMMAND_SUBMITTED",
        e[e.COMMAND_ACCEPTED = 11] = "COMMAND_ACCEPTED",
        e[e.COMMAND_REJECTED = 12] = "COMMAND_REJECTED",
        e[e.WS_ONBOARDING_LANDING_PAGE_OPENED = 20] = "WS_ONBOARDING_LANDING_PAGE_OPENED",
        e[e.WS_ONBOARDING_SETUP_PAGE_OPENED = 21] = "WS_ONBOARDING_SETUP_PAGE_OPENED",
        e[e.WS_ONBOARDING_KEYBINDINGS_PAGE_OPENED = 22] = "WS_ONBOARDING_KEYBINDINGS_PAGE_OPENED",
        e[e.WS_ONBOARDING_MIGRATION_SCOPE_PAGE_OPENED = 23] = "WS_ONBOARDING_MIGRATION_SCOPE_PAGE_OPENED",
        e[e.WS_ONBOARDING_IMPORT_PAGE_OPENED = 24] = "WS_ONBOARDING_IMPORT_PAGE_OPENED",
        e[e.WS_ONBOARDING_AUTH_PAGE_OPENED = 25] = "WS_ONBOARDING_AUTH_PAGE_OPENED",
        e[e.WS_ONBOARDING_AUTH_MANUAL_PAGE_OPENED = 26] = "WS_ONBOARDING_AUTH_MANUAL_PAGE_OPENED",
        e[e.WS_ONBOARDING_CHOOSE_THEME_PAGE_OPENED = 35] = "WS_ONBOARDING_CHOOSE_THEME_PAGE_OPENED",
        e[e.WS_ONBOARDING_COMPLETED = 27] = "WS_ONBOARDING_COMPLETED",
        e[e.WS_SKIPPED_ONBOARDING = 69] = "WS_SKIPPED_ONBOARDING",
        e[e.WS_SETTINGS_PAGE_OPEN = 72] = "WS_SETTINGS_PAGE_OPEN",
        e[e.WS_SETTINGS_PAGE_OPEN_WITH_SETTING_FOCUS = 73] = "WS_SETTINGS_PAGE_OPEN_WITH_SETTING_FOCUS",
        e[e.PROVIDE_FEEDBACK = 33] = "PROVIDE_FEEDBACK",
        e[e.CASCADE_MESSAGE_SENT = 36] = "CASCADE_MESSAGE_SENT",
        e[e.WS_OPEN_CASCADE_MEMORIES_PANEL = 38] = "WS_OPEN_CASCADE_MEMORIES_PANEL",
        e[e.PROVIDE_MESSAGE_FEEDBACK = 41] = "PROVIDE_MESSAGE_FEEDBACK",
        e[e.CASCADE_MEMORY_DELETED = 42] = "CASCADE_MEMORY_DELETED",
        e[e.CASCADE_STEP_COMPLETED = 43] = "CASCADE_STEP_COMPLETED",
        e[e.ACKNOWLEDGE_CASCADE_CODE_EDIT = 44] = "ACKNOWLEDGE_CASCADE_CODE_EDIT",
        e[e.CASCADE_WEB_TOOLS_OPEN_READ_URL_MARKDOWN = 45] = "CASCADE_WEB_TOOLS_OPEN_READ_URL_MARKDOWN",
        e[e.CASCADE_WEB_TOOLS_OPEN_CHUNK_MARKDOWN = 46] = "CASCADE_WEB_TOOLS_OPEN_CHUNK_MARKDOWN",
        e[e.CASCADE_MCP_SERVER_INIT = 64] = "CASCADE_MCP_SERVER_INIT",
        e[e.CASCADE_CLICK_EVENT = 65] = "CASCADE_CLICK_EVENT",
        e[e.CASCADE_IMPRESSION_EVENT = 67] = "CASCADE_IMPRESSION_EVENT",
        e[e.OPEN_CHANGELOG = 37] = "OPEN_CHANGELOG",
        e[e.CURSOR_DETECTED = 39] = "CURSOR_DETECTED",
        e[e.VSCODE_DETECTED = 40] = "VSCODE_DETECTED",
        e[e.CROSS_SELL_EXTENSION_DOWNLOAD_WINDSURF_CLICK = 47] = "CROSS_SELL_EXTENSION_DOWNLOAD_WINDSURF_CLICK",
        e[e.CROSS_SELL_EXTENSION_DOWNLOAD_WINDSURF_NUDGE_IMPRESSION = 48] = "CROSS_SELL_EXTENSION_DOWNLOAD_WINDSURF_NUDGE_IMPRESSION",
        e[e.WS_PROBLEMS_TAB_SEND_ALL_TO_CASCADE = 49] = "WS_PROBLEMS_TAB_SEND_ALL_TO_CASCADE",
        e[e.WS_PROBLEMS_TAB_SEND_ALL_IN_FILE_TO_CASCADE = 50] = "WS_PROBLEMS_TAB_SEND_ALL_IN_FILE_TO_CASCADE",
        e[e.WS_CASCADE_BAR_FILE_NAV = 51] = "WS_CASCADE_BAR_FILE_NAV",
        e[e.WS_CASCADE_BAR_HUNK_NAV = 52] = "WS_CASCADE_BAR_HUNK_NAV",
        e[e.WS_CASCADE_BAR_ACCEPT_FILE = 53] = "WS_CASCADE_BAR_ACCEPT_FILE",
        e[e.WS_CASCADE_BAR_REJECT_FILE = 54] = "WS_CASCADE_BAR_REJECT_FILE",
        e[e.WS_CUSTOM_APP_ICON_MODAL_OPEN = 55] = "WS_CUSTOM_APP_ICON_MODAL_OPEN",
        e[e.WS_CUSTOM_APP_ICON_SELECT_CLASSIC = 56] = "WS_CUSTOM_APP_ICON_SELECT_CLASSIC",
        e[e.WS_CUSTOM_APP_ICON_SELECT_CLASSIC_LIGHT = 57] = "WS_CUSTOM_APP_ICON_SELECT_CLASSIC_LIGHT",
        e[e.WS_CUSTOM_APP_ICON_SELECT_RETRO = 58] = "WS_CUSTOM_APP_ICON_SELECT_RETRO",
        e[e.WS_CUSTOM_APP_ICON_SELECT_BLUEPRINT = 59] = "WS_CUSTOM_APP_ICON_SELECT_BLUEPRINT",
        e[e.WS_CUSTOM_APP_ICON_SELECT_HAND_DRAWN = 60] = "WS_CUSTOM_APP_ICON_SELECT_HAND_DRAWN",
        e[e.WS_CUSTOM_APP_ICON_SELECT_SUNSET = 61] = "WS_CUSTOM_APP_ICON_SELECT_SUNSET",
        e[e.WS_CUSTOM_APP_ICON_SELECT_VALENTINE = 66] = "WS_CUSTOM_APP_ICON_SELECT_VALENTINE",
        e[e.WS_CUSTOM_APP_ICON_SELECT_PIXEL_SURF = 82] = "WS_CUSTOM_APP_ICON_SELECT_PIXEL_SURF",
        e[e.ENTERED_MCP_TOOLBAR_TAB = 63] = "ENTERED_MCP_TOOLBAR_TAB",
        e[e.CLICKED_TO_CONFIGURE_MCP = 62] = "CLICKED_TO_CONFIGURE_MCP",
        e[e.WS_SETTINGS_UPDATED = 68] = "WS_SETTINGS_UPDATED",
        e[e.BROWSER_PREVIEW_DOM_ELEMENT = 70] = "BROWSER_PREVIEW_DOM_ELEMENT",
        e[e.BROWSER_PREVIEW_CONSOLE_OUTPUT = 71] = "BROWSER_PREVIEW_CONSOLE_OUTPUT",
        e[e.WS_SETTINGS_CHANGED_BY_USER = 74] = "WS_SETTINGS_CHANGED_BY_USER",
        e[e.WS_GENERATE_COMMIT_MESSAGE_CLICKED = 75] = "WS_GENERATE_COMMIT_MESSAGE_CLICKED",
        e[e.WS_GENERATE_COMMIT_MESSAGE_ERRORED = 76] = "WS_GENERATE_COMMIT_MESSAGE_ERRORED",
        e[e.WS_CLICKED_COMMIT_FROM_SCM_PANEL = 77] = "WS_CLICKED_COMMIT_FROM_SCM_PANEL",
        e[e.WS_CANCELED_GENERATE_COMMIT_MESSAGE = 79] = "WS_CANCELED_GENERATE_COMMIT_MESSAGE",
        e[e.USING_DEV_EXTENSION = 78] = "USING_DEV_EXTENSION",
        e[e.WS_APP_DEPLOYMENT_CREATE_PROJECT = 80] = "WS_APP_DEPLOYMENT_CREATE_PROJECT",
        e[e.WS_APP_DEPLOYMENT_DEPLOY_PROJECT = 81] = "WS_APP_DEPLOYMENT_DEPLOY_PROJECT",
        e[e.CASCADE_CHANGES_ACCEPT_ALL = 83] = "CASCADE_CHANGES_ACCEPT_ALL",
        e[e.CASCADE_CHANGES_REJECT_ALL = 84] = "CASCADE_CHANGES_REJECT_ALL",
        e[e.CASCADE_MEMORIES_EDIT = 85] = "CASCADE_MEMORIES_EDIT",
        e[e.CASCADE_MEMORIES_VIEW = 86] = "CASCADE_MEMORIES_VIEW",
        e[e.CASCADE_INSERT_AT_MENTION = 87] = "CASCADE_INSERT_AT_MENTION"
    }(Ut || (Ut = {})),
    ye.util.setEnumType(Ut, "exa.codeium_common_pb.ProductEventType", [{
        no: 0,
        name: "EVENT_UNSPECIFIED"
    }, {
        no: 32,
        name: "WINDSURF_EXTENSION_ACTIVATED"
    }, {
        no: 1,
        name: "LS_DOWNLOAD_START"
    }, {
        no: 2,
        name: "LS_DOWNLOAD_COMPLETE"
    }, {
        no: 5,
        name: "LS_DOWNLOAD_FAILURE"
    }, {
        no: 3,
        name: "LS_STARTUP"
    }, {
        no: 4,
        name: "LS_FAILURE"
    }, {
        no: 6,
        name: "AUTOCOMPLETE_ACCEPTED"
    }, {
        no: 7,
        name: "AUTOCOMPLETE_ONE_WORD_ACCEPTED"
    }, {
        no: 8,
        name: "CHAT_MESSAGE_SENT"
    }, {
        no: 13,
        name: "CHAT_MENTION_INSERT"
    }, {
        no: 19,
        name: "CHAT_MENTION_MENU_OPEN"
    }, {
        no: 14,
        name: "CHAT_OPEN_SETTINGS"
    }, {
        no: 15,
        name: "CHAT_OPEN_CONTEXT_SETTINGS"
    }, {
        no: 16,
        name: "CHAT_WITH_CODEBASE"
    }, {
        no: 17,
        name: "CHAT_NEW_CONVERSATION"
    }, {
        no: 18,
        name: "CHAT_CHANGE_MODEL"
    }, {
        no: 34,
        name: "CHAT_TOGGLE_FOCUS_INSERT_TEXT"
    }, {
        no: 28,
        name: "FUNCTION_REFACTOR"
    }, {
        no: 29,
        name: "EXPLAIN_CODE_BLOCK"
    }, {
        no: 30,
        name: "FUNCTION_ADD_DOCSTRING"
    }, {
        no: 31,
        name: "EXPLAIN_PROBLEM"
    }, {
        no: 9,
        name: "COMMAND_BOX_OPENED"
    }, {
        no: 10,
        name: "COMMAND_SUBMITTED"
    }, {
        no: 11,
        name: "COMMAND_ACCEPTED"
    }, {
        no: 12,
        name: "COMMAND_REJECTED"
    }, {
        no: 20,
        name: "WS_ONBOARDING_LANDING_PAGE_OPENED"
    }, {
        no: 21,
        name: "WS_ONBOARDING_SETUP_PAGE_OPENED"
    }, {
        no: 22,
        name: "WS_ONBOARDING_KEYBINDINGS_PAGE_OPENED"
    }, {
        no: 23,
        name: "WS_ONBOARDING_MIGRATION_SCOPE_PAGE_OPENED"
    }, {
        no: 24,
        name: "WS_ONBOARDING_IMPORT_PAGE_OPENED"
    }, {
        no: 25,
        name: "WS_ONBOARDING_AUTH_PAGE_OPENED"
    }, {
        no: 26,
        name: "WS_ONBOARDING_AUTH_MANUAL_PAGE_OPENED"
    }, {
        no: 35,
        name: "WS_ONBOARDING_CHOOSE_THEME_PAGE_OPENED"
    }, {
        no: 27,
        name: "WS_ONBOARDING_COMPLETED"
    }, {
        no: 69,
        name: "WS_SKIPPED_ONBOARDING"
    }, {
        no: 72,
        name: "WS_SETTINGS_PAGE_OPEN"
    }, {
        no: 73,
        name: "WS_SETTINGS_PAGE_OPEN_WITH_SETTING_FOCUS"
    }, {
        no: 33,
        name: "PROVIDE_FEEDBACK"
    }, {
        no: 36,
        name: "CASCADE_MESSAGE_SENT"
    }, {
        no: 38,
        name: "WS_OPEN_CASCADE_MEMORIES_PANEL"
    }, {
        no: 41,
        name: "PROVIDE_MESSAGE_FEEDBACK"
    }, {
        no: 42,
        name: "CASCADE_MEMORY_DELETED"
    }, {
        no: 43,
        name: "CASCADE_STEP_COMPLETED"
    }, {
        no: 44,
        name: "ACKNOWLEDGE_CASCADE_CODE_EDIT"
    }, {
        no: 45,
        name: "CASCADE_WEB_TOOLS_OPEN_READ_URL_MARKDOWN"
    }, {
        no: 46,
        name: "CASCADE_WEB_TOOLS_OPEN_CHUNK_MARKDOWN"
    }, {
        no: 64,
        name: "CASCADE_MCP_SERVER_INIT"
    }, {
        no: 65,
        name: "CASCADE_CLICK_EVENT"
    }, {
        no: 67,
        name: "CASCADE_IMPRESSION_EVENT"
    }, {
        no: 37,
        name: "OPEN_CHANGELOG"
    }, {
        no: 39,
        name: "CURSOR_DETECTED"
    }, {
        no: 40,
        name: "VSCODE_DETECTED"
    }, {
        no: 47,
        name: "CROSS_SELL_EXTENSION_DOWNLOAD_WINDSURF_CLICK"
    }, {
        no: 48,
        name: "CROSS_SELL_EXTENSION_DOWNLOAD_WINDSURF_NUDGE_IMPRESSION"
    }, {
        no: 49,
        name: "WS_PROBLEMS_TAB_SEND_ALL_TO_CASCADE"
    }, {
        no: 50,
        name: "WS_PROBLEMS_TAB_SEND_ALL_IN_FILE_TO_CASCADE"
    }, {
        no: 51,
        name: "WS_CASCADE_BAR_FILE_NAV"
    }, {
        no: 52,
        name: "WS_CASCADE_BAR_HUNK_NAV"
    }, {
        no: 53,
        name: "WS_CASCADE_BAR_ACCEPT_FILE"
    }, {
        no: 54,
        name: "WS_CASCADE_BAR_REJECT_FILE"
    }, {
        no: 55,
        name: "WS_CUSTOM_APP_ICON_MODAL_OPEN"
    }, {
        no: 56,
        name: "WS_CUSTOM_APP_ICON_SELECT_CLASSIC"
    }, {
        no: 57,
        name: "WS_CUSTOM_APP_ICON_SELECT_CLASSIC_LIGHT"
    }, {
        no: 58,
        name: "WS_CUSTOM_APP_ICON_SELECT_RETRO"
    }, {
        no: 59,
        name: "WS_CUSTOM_APP_ICON_SELECT_BLUEPRINT"
    }, {
        no: 60,
        name: "WS_CUSTOM_APP_ICON_SELECT_HAND_DRAWN"
    }, {
        no: 61,
        name: "WS_CUSTOM_APP_ICON_SELECT_SUNSET"
    }, {
        no: 66,
        name: "WS_CUSTOM_APP_ICON_SELECT_VALENTINE"
    }, {
        no: 82,
        name: "WS_CUSTOM_APP_ICON_SELECT_PIXEL_SURF"
    }, {
        no: 63,
        name: "ENTERED_MCP_TOOLBAR_TAB"
    }, {
        no: 62,
        name: "CLICKED_TO_CONFIGURE_MCP"
    }, {
        no: 68,
        name: "WS_SETTINGS_UPDATED"
    }, {
        no: 70,
        name: "BROWSER_PREVIEW_DOM_ELEMENT"
    }, {
        no: 71,
        name: "BROWSER_PREVIEW_CONSOLE_OUTPUT"
    }, {
        no: 74,
        name: "WS_SETTINGS_CHANGED_BY_USER"
    }, {
        no: 75,
        name: "WS_GENERATE_COMMIT_MESSAGE_CLICKED"
    }, {
        no: 76,
        name: "WS_GENERATE_COMMIT_MESSAGE_ERRORED"
    }, {
        no: 77,
        name: "WS_CLICKED_COMMIT_FROM_SCM_PANEL"
    }, {
        no: 79,
        name: "WS_CANCELED_GENERATE_COMMIT_MESSAGE"
    }, {
        no: 78,
        name: "USING_DEV_EXTENSION"
    }, {
        no: 80,
        name: "WS_APP_DEPLOYMENT_CREATE_PROJECT"
    }, {
        no: 81,
        name: "WS_APP_DEPLOYMENT_DEPLOY_PROJECT"
    }, {
        no: 83,
        name: "CASCADE_CHANGES_ACCEPT_ALL"
    }, {
        no: 84,
        name: "CASCADE_CHANGES_REJECT_ALL"
    }, {
        no: 85,
        name: "CASCADE_MEMORIES_EDIT"
    }, {
        no: 86,
        name: "CASCADE_MEMORIES_VIEW"
    }, {
        no: 87,
        name: "CASCADE_INSERT_AT_MENTION"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.GITHUB_BASE = 1] = "GITHUB_BASE",
        e[e.SLACK_BASE = 2] = "SLACK_BASE",
        e[e.SLACK_AGGREGATE = 3] = "SLACK_AGGREGATE",
        e[e.GOOGLE_DRIVE_BASE = 4] = "GOOGLE_DRIVE_BASE",
        e[e.JIRA_BASE = 5] = "JIRA_BASE",
        e[e.SCM = 6] = "SCM"
    }(xt || (xt = {})),
    ye.util.setEnumType(xt, "exa.codeium_common_pb.IndexChoice", [{
        no: 0,
        name: "INDEX_CHOICE_UNSPECIFIED"
    }, {
        no: 1,
        name: "INDEX_CHOICE_GITHUB_BASE"
    }, {
        no: 2,
        name: "INDEX_CHOICE_SLACK_BASE"
    }, {
        no: 3,
        name: "INDEX_CHOICE_SLACK_AGGREGATE"
    }, {
        no: 4,
        name: "INDEX_CHOICE_GOOGLE_DRIVE_BASE"
    }, {
        no: 5,
        name: "INDEX_CHOICE_JIRA_BASE"
    }, {
        no: 6,
        name: "INDEX_CHOICE_SCM"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.HEADER_1 = 1] = "HEADER_1",
        e[e.HEADER_2 = 2] = "HEADER_2",
        e[e.HEADER_3 = 3] = "HEADER_3",
        e[e.HEADER_4 = 4] = "HEADER_4",
        e[e.HEADER_5 = 5] = "HEADER_5",
        e[e.HEADER_6 = 6] = "HEADER_6"
    }(Bt || (Bt = {})),
    ye.util.setEnumType(Bt, "exa.codeium_common_pb.MarkdownNodeType", [{
        no: 0,
        name: "MARKDOWN_NODE_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "MARKDOWN_NODE_TYPE_HEADER_1"
    }, {
        no: 2,
        name: "MARKDOWN_NODE_TYPE_HEADER_2"
    }, {
        no: 3,
        name: "MARKDOWN_NODE_TYPE_HEADER_3"
    }, {
        no: 4,
        name: "MARKDOWN_NODE_TYPE_HEADER_4"
    }, {
        no: 5,
        name: "MARKDOWN_NODE_TYPE_HEADER_5"
    }, {
        no: 6,
        name: "MARKDOWN_NODE_TYPE_HEADER_6"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.USER = 1] = "USER",
        e[e.CASCADE = 2] = "CASCADE"
    }(ht || (ht = {})),
    ye.util.setEnumType(ht, "exa.codeium_common_pb.TerminalShellCommandSource", [{
        no: 0,
        name: "TERMINAL_SHELL_COMMAND_SOURCE_UNSPECIFIED"
    }, {
        no: 1,
        name: "TERMINAL_SHELL_COMMAND_SOURCE_USER"
    }, {
        no: 2,
        name: "TERMINAL_SHELL_COMMAND_SOURCE_CASCADE"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.RUNNING = 1] = "RUNNING",
        e[e.COMPLETED = 2] = "COMPLETED"
    }(Ft || (Ft = {})),
    ye.util.setEnumType(Ft, "exa.codeium_common_pb.TerminalShellCommandStatus", [{
        no: 0,
        name: "TERMINAL_SHELL_COMMAND_STATUS_UNSPECIFIED"
    }, {
        no: 1,
        name: "TERMINAL_SHELL_COMMAND_STATUS_RUNNING"
    }, {
        no: 2,
        name: "TERMINAL_SHELL_COMMAND_STATUS_COMPLETED"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.QUEUED = 1] = "QUEUED",
        e[e.INITIALIZING = 2] = "INITIALIZING",
        e[e.BUILDING = 3] = "BUILDING",
        e[e.ERROR = 4] = "ERROR",
        e[e.READY = 5] = "READY",
        e[e.CANCELED = 6] = "CANCELED"
    }(bt || (bt = {})),
    ye.util.setEnumType(bt, "exa.codeium_common_pb.DeploymentBuildStatus", [{
        no: 0,
        name: "DEPLOYMENT_BUILD_STATUS_UNSPECIFIED"
    }, {
        no: 1,
        name: "DEPLOYMENT_BUILD_STATUS_QUEUED"
    }, {
        no: 2,
        name: "DEPLOYMENT_BUILD_STATUS_INITIALIZING"
    }, {
        no: 3,
        name: "DEPLOYMENT_BUILD_STATUS_BUILDING"
    }, {
        no: 4,
        name: "DEPLOYMENT_BUILD_STATUS_ERROR"
    }, {
        no: 5,
        name: "DEPLOYMENT_BUILD_STATUS_READY"
    }, {
        no: 6,
        name: "DEPLOYMENT_BUILD_STATUS_CANCELED"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.VERCEL = 1] = "VERCEL",
        e[e.NETLIFY = 2] = "NETLIFY",
        e[e.CLOUDFLARE = 3] = "CLOUDFLARE"
    }(qt || (qt = {})),
    ye.util.setEnumType(qt, "exa.codeium_common_pb.DeploymentProvider", [{
        no: 0,
        name: "DEPLOYMENT_PROVIDER_UNSPECIFIED"
    }, {
        no: 1,
        name: "DEPLOYMENT_PROVIDER_VERCEL"
    }, {
        no: 2,
        name: "DEPLOYMENT_PROVIDER_NETLIFY"
    }, {
        no: 3,
        name: "DEPLOYMENT_PROVIDER_CLOUDFLARE"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.AVAILABLE = 1] = "AVAILABLE",
        e[e.IN_USE = 2] = "IN_USE",
        e[e.TAKEN = 3] = "TAKEN",
        e[e.INVALID = 4] = "INVALID"
    }(Gt || (Gt = {})),
    ye.util.setEnumType(Gt, "exa.codeium_common_pb.ValidationStatus", [{
        no: 0,
        name: "VALIDATION_STATUS_UNSPECIFIED"
    }, {
        no: 1,
        name: "VALIDATION_STATUS_AVAILABLE"
    }, {
        no: 2,
        name: "VALIDATION_STATUS_IN_USE"
    }, {
        no: 3,
        name: "VALIDATION_STATUS_TAKEN"
    }, {
        no: 4,
        name: "VALIDATION_STATUS_INVALID"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.LLAMA_2 = 1] = "LLAMA_2",
        e[e.LLAMA_3 = 2] = "LLAMA_3",
        e[e.CHATML = 3] = "CHATML",
        e[e.CHAT_TRANSCRIPT = 4] = "CHAT_TRANSCRIPT",
        e[e.DEEPSEEK_V2 = 5] = "DEEPSEEK_V2",
        e[e.DEEPSEEK_V3 = 6] = "DEEPSEEK_V3"
    }(Ht || (Ht = {})),
    ye.util.setEnumType(Ht, "exa.codeium_common_pb.PromptTemplaterType", [{
        no: 0,
        name: "PROMPT_TEMPLATER_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "PROMPT_TEMPLATER_TYPE_LLAMA_2"
    }, {
        no: 2,
        name: "PROMPT_TEMPLATER_TYPE_LLAMA_3"
    }, {
        no: 3,
        name: "PROMPT_TEMPLATER_TYPE_CHATML"
    }, {
        no: 4,
        name: "PROMPT_TEMPLATER_TYPE_CHAT_TRANSCRIPT"
    }, {
        no: 5,
        name: "PROMPT_TEMPLATER_TYPE_DEEPSEEK_V2"
    }, {
        no: 6,
        name: "PROMPT_TEMPLATER_TYPE_DEEPSEEK_V3"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.LLAMA_3 = 1] = "LLAMA_3",
        e[e.HERMES = 2] = "HERMES",
        e[e.XML = 3] = "XML",
        e[e.CHAT_TRANSCRIPT = 4] = "CHAT_TRANSCRIPT"
    }(vt || (vt = {})),
    ye.util.setEnumType(vt, "exa.codeium_common_pb.ToolFormatterType", [{
        no: 0,
        name: "TOOL_FORMATTER_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "TOOL_FORMATTER_TYPE_LLAMA_3"
    }, {
        no: 2,
        name: "TOOL_FORMATTER_TYPE_HERMES"
    }, {
        no: 3,
        name: "TOOL_FORMATTER_TYPE_XML"
    }, {
        no: 4,
        name: "TOOL_FORMATTER_TYPE_CHAT_TRANSCRIPT"
    }]);
    class Vt extends E {
        prompt = "";
        contextPrompt = "";
        uid = "";
        promptElementRanges = [];
        promptElementKindInfos = [];
        promptLatencyMs = A.zero;
        promptStageLatencies = [];
        numTokenizedBytes = A.zero;
        editorLanguage = "";
        language = Ze.UNSPECIFIED;
        absolutePathUriForTelemetry = "";
        relativePathForTelemetry = "";
        workspaceUriForTelemetry = "";
        experimentFeaturesJson = "";
        experimentVariantJson = "";
        model = be.MODEL_UNSPECIFIED;
        hasLineSuffix = !1;
        shouldInlineFim = !1;
        modelTag = "";
        experimentTags = [];
        evalSuffix = "";
        promptAnnotationRanges = [];
        supportsPackedStreamingCompletionMaps = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.CompletionsRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "configuration",
            kind: "message",
            T: Yt
        }, {
            no: 2,
            name: "prompt",
            kind: "scalar",
            T: 9
        }, {
            no: 21,
            name: "context_prompt",
            kind: "scalar",
            T: 9
        }, {
            no: 25,
            name: "uid",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "prompt_element_ranges",
            kind: "message",
            T: Xt,
            repeated: !0
        }, {
            no: 9,
            name: "prompt_element_kind_infos",
            kind: "message",
            T: sn,
            repeated: !0
        }, {
            no: 11,
            name: "prompt_latency_ms",
            kind: "scalar",
            T: 4
        }, {
            no: 12,
            name: "prompt_stage_latencies",
            kind: "message",
            T: mn,
            repeated: !0
        }, {
            no: 20,
            name: "num_tokenized_bytes",
            kind: "scalar",
            T: 4
        }, {
            no: 3,
            name: "editor_language",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "language",
            kind: "enum",
            T: ye.getEnumType(Ze)
        }, {
            no: 5,
            name: "absolute_path_uri_for_telemetry",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "relative_path_for_telemetry",
            kind: "scalar",
            T: 9
        }, {
            no: 13,
            name: "workspace_uri_for_telemetry",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "experiment_features_json",
            kind: "scalar",
            T: 9
        }, {
            no: 19,
            name: "experiment_variant_json",
            kind: "scalar",
            T: 9
        }, {
            no: 10,
            name: "model",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 14,
            name: "has_line_suffix",
            kind: "scalar",
            T: 8
        }, {
            no: 15,
            name: "should_inline_fim",
            kind: "scalar",
            T: 8
        }, {
            no: 16,
            name: "repository",
            kind: "message",
            T: jn
        }, {
            no: 17,
            name: "model_tag",
            kind: "scalar",
            T: 9
        }, {
            no: 18,
            name: "experiment_tags",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 22,
            name: "eval_suffix",
            kind: "scalar",
            T: 9
        }, {
            no: 23,
            name: "prompt_annotation_ranges",
            kind: "message",
            T: Wt,
            repeated: !0
        }, {
            no: 24,
            name: "supports_packed_streaming_completion_maps",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Vt).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Vt).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Vt).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Vt, e, t)
        }
    }
    class Yt extends E {
        numCompletions = A.zero;
        maxTokens = A.zero;
        maxNewlines = A.zero;
        minLogProbability = 0;
        temperature = 0;
        firstTemperature = 0;
        topK = A.zero;
        topP = 0;
        stopPatterns = [];
        seed = A.zero;
        fimEotProbThreshold = 0;
        useFimEotThreshold = !1;
        doNotScoreStopTokens = !1;
        sqrtLenNormalizedLogProbScore = !1;
        lastMessageIsPartial = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.CompletionConfiguration";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "num_completions",
            kind: "scalar",
            T: 4
        }, {
            no: 2,
            name: "max_tokens",
            kind: "scalar",
            T: 4
        }, {
            no: 3,
            name: "max_newlines",
            kind: "scalar",
            T: 4
        }, {
            no: 4,
            name: "min_log_probability",
            kind: "scalar",
            T: 1
        }, {
            no: 5,
            name: "temperature",
            kind: "scalar",
            T: 1
        }, {
            no: 6,
            name: "first_temperature",
            kind: "scalar",
            T: 1
        }, {
            no: 7,
            name: "top_k",
            kind: "scalar",
            T: 4
        }, {
            no: 8,
            name: "top_p",
            kind: "scalar",
            T: 1
        }, {
            no: 9,
            name: "stop_patterns",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 10,
            name: "seed",
            kind: "scalar",
            T: 4
        }, {
            no: 11,
            name: "fim_eot_prob_threshold",
            kind: "scalar",
            T: 1
        }, {
            no: 12,
            name: "use_fim_eot_threshold",
            kind: "scalar",
            T: 8
        }, {
            no: 13,
            name: "do_not_score_stop_tokens",
            kind: "scalar",
            T: 8
        }, {
            no: 14,
            name: "sqrt_len_normalized_log_prob_score",
            kind: "scalar",
            T: 8
        }, {
            no: 15,
            name: "last_message_is_partial",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Yt).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Yt).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Yt).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Yt, e, t)
        }
    }
    class Xt extends E {
        kind = Ue.UNSPECIFIED;
        byteOffsetStart = A.zero;
        byteOffsetEnd = A.zero;
        tokenOffsetStart = A.zero;
        tokenOffsetEnd = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.PromptElementRange";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "kind",
            kind: "enum",
            T: ye.getEnumType(Ue)
        }, {
            no: 2,
            name: "byte_offset_start",
            kind: "scalar",
            T: 4
        }, {
            no: 3,
            name: "byte_offset_end",
            kind: "scalar",
            T: 4
        }, {
            no: 4,
            name: "token_offset_start",
            kind: "scalar",
            T: 4
        }, {
            no: 5,
            name: "token_offset_end",
            kind: "scalar",
            T: 4
        }]));
        static fromBinary(e, t) {
            return (new Xt).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Xt).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Xt).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Xt, e, t)
        }
    }
    class Kt extends E {
        cortexPlanId = "";
        codePlanId = "";
        actionIndex = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ActionPointer";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cortex_plan_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "code_plan_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "action_index",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new Kt).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Kt).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Kt).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Kt, e, t)
        }
    }
    class Wt extends E {
        kind = xe.UNSPECIFIED;
        byteOffsetStart = A.zero;
        byteOffsetEnd = A.zero;
        suffix = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.PromptAnnotationRange";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "kind",
            kind: "enum",
            T: ye.getEnumType(xe)
        }, {
            no: 2,
            name: "byte_offset_start",
            kind: "scalar",
            T: 4
        }, {
            no: 3,
            name: "byte_offset_end",
            kind: "scalar",
            T: 4
        }, {
            no: 4,
            name: "suffix",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Wt).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Wt).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Wt).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Wt, e, t)
        }
    }
    class zt extends E {
        key = Be.UNSPECIFIED;
        keyString = "";
        disabled = !1;
        payload = {
            case: void 0
        };
        source = he.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ExperimentWithVariant";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "key",
            kind: "enum",
            T: ye.getEnumType(Be)
        }, {
            no: 5,
            name: "key_string",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "disabled",
            kind: "scalar",
            T: 8
        }, {
            no: 2,
            name: "string",
            kind: "scalar",
            T: 9,
            oneof: "payload"
        }, {
            no: 3,
            name: "json",
            kind: "scalar",
            T: 9,
            oneof: "payload"
        }, {
            no: 4,
            name: "csv",
            kind: "scalar",
            T: 9,
            oneof: "payload"
        }, {
            no: 7,
            name: "source",
            kind: "enum",
            T: ye.getEnumType(he)
        }]));
        static fromBinary(e, t) {
            return (new zt).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new zt).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new zt).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(zt, e, t)
        }
    }
    class jt extends E {
        experiments = [];
        forceEnableExperiments = [];
        forceDisableExperiments = [];
        forceEnableExperimentsWithVariants = [];
        forceEnableExperimentStrings = [];
        forceDisableExperimentStrings = [];
        devMode = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ExperimentConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 6,
            name: "experiments",
            kind: "message",
            T: zt,
            repeated: !0
        }, {
            no: 1,
            name: "force_enable_experiments",
            kind: "enum",
            T: ye.getEnumType(Be),
            repeated: !0
        }, {
            no: 2,
            name: "force_disable_experiments",
            kind: "enum",
            T: ye.getEnumType(Be),
            repeated: !0
        }, {
            no: 3,
            name: "force_enable_experiments_with_variants",
            kind: "message",
            T: zt,
            repeated: !0
        }, {
            no: 4,
            name: "force_enable_experiment_strings",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 5,
            name: "force_disable_experiment_strings",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 7,
            name: "dev_mode",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new jt).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new jt).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new jt).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(jt, e, t)
        }
    }
    class Qt extends (null) {
        sha = "";
        crc32cLinuxX64 = "";
        crc32cLinuxArm = "";
        crc32cMacosX64 = "";
        crc32cMacosArm = "";
        crc32cWindowsX64 = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "sha",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "crc32c_linux_x64",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "crc32c_linux_arm",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "crc32c_macos_x64",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "crc32c_macos_arm",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "crc32c_windows_x64",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Qt).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Qt).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Qt).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Qt, e, t)
        }
    }
    class $t extends (null) {
        modelName = "";
        contextCheckModelName = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "model_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "context_check_model_name",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new $t).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new $t).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new $t).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals($t, e, t)
        }
    }
    class Zt extends (null) {
        modeToken = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "mode_token",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Zt).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Zt).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Zt).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Zt, e, t)
        }
    }
    class en extends (null) {
        threshold = 0;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "threshold",
            kind: "scalar",
            T: 2
        }]));
        static fromBinary(e, t) {
            return (new en).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new en).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new en).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(en, e, t)
        }
    }
    class tn extends (null) {
        sampleRate = 0;
        procedureToSampleRate = {};
        errorMatchToSampleRate = {};
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 2,
            name: "sample_rate",
            kind: "scalar",
            T: 1
        }, {
            no: 3,
            name: "procedure_to_sample_rate",
            kind: "map",
            K: 9,
            V: {
                kind: "scalar",
                T: 1
            }
        }, {
            no: 5,
            name: "error_match_to_sample_rate",
            kind: "map",
            K: 9,
            V: {
                kind: "scalar",
                T: 1
            }
        }]));
        static fromBinary(e, t) {
            return (new tn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new tn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new tn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(tn, e, t)
        }
    }
    class nn extends E {
        teamId = "";
        cascadeModelLabels = [];
        commandModelLabels = [];
        extensionModelLabels = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.TeamOrganizationalControls";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "team_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "cascade_model_labels",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 3,
            name: "command_model_labels",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 4,
            name: "created_at",
            kind: "message",
            T: De
        }, {
            no: 5,
            name: "updated_at",
            kind: "message",
            T: De
        }, {
            no: 6,
            name: "extension_model_labels",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new nn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new nn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new nn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(nn, e, t)
        }
    }
    class an extends (null) {
        memoryUsageToSampleRate = {};
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "memory_usage_to_sample_rate",
            kind: "map",
            K: 9,
            V: {
                kind: "scalar",
                T: 1
            }
        }]));
        static fromBinary(e, t) {
            return (new an).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new an).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new an).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(an, e, t)
        }
    }
    class rn extends E {
        choice = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ModelOrAlias";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "model",
            kind: "enum",
            T: ye.getEnumType(be),
            oneof: "choice"
        }, {
            no: 2,
            name: "alias",
            kind: "enum",
            T: ye.getEnumType(Fe),
            oneof: "choice"
        }]));
        static fromBinary(e, t) {
            return (new rn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new rn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new rn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(rn, e, t)
        }
    }
    class sn extends E {
        kind = Ue.UNSPECIFIED;
        experimentKey = Be.UNSPECIFIED;
        enabled = !1;
        numConsidered = A.zero;
        numIncluded = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.PromptElementKindInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "kind",
            kind: "enum",
            T: ye.getEnumType(Ue)
        }, {
            no: 2,
            name: "experiment_key",
            kind: "enum",
            T: ye.getEnumType(Be)
        }, {
            no: 3,
            name: "enabled",
            kind: "scalar",
            T: 8
        }, {
            no: 4,
            name: "num_considered",
            kind: "scalar",
            T: 4
        }, {
            no: 5,
            name: "num_included",
            kind: "scalar",
            T: 4
        }]));
        static fromBinary(e, t) {
            return (new sn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new sn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new sn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(sn, e, t)
        }
    }
    class on extends (null) {
        included = !1;
        exclusionReason = qe.EXCLUSION_UNSPECIFIED;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "included",
            kind: "scalar",
            T: 8
        }, {
            no: 2,
            name: "exclusion_reason",
            kind: "enum",
            T: ye.getEnumType(qe)
        }]));
        static fromBinary(e, t) {
            return (new on).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new on).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new on).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(on, e, t)
        }
    }
    class mn extends E {
        name = "";
        latencyMs = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.PromptStageLatency";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "latency_ms",
            kind: "scalar",
            T: 4
        }]));
        static fromBinary(e, t) {
            return (new mn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new mn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new mn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(mn, e, t)
        }
    }
    class cn extends (null) {
        completions = [];
        maxTokens = protoInt64.zero;
        temperature = 0;
        topK = protoInt64.zero;
        topP = 0;
        stopPatterns = [];
        promptLength = protoInt64.zero;
        promptId = "";
        modelTag = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "completions",
            kind: "message",
            T: un,
            repeated: !0
        }, {
            no: 2,
            name: "max_tokens",
            kind: "scalar",
            T: 4
        }, {
            no: 3,
            name: "temperature",
            kind: "scalar",
            T: 1
        }, {
            no: 4,
            name: "top_k",
            kind: "scalar",
            T: 4
        }, {
            no: 5,
            name: "top_p",
            kind: "scalar",
            T: 1
        }, {
            no: 6,
            name: "stop_patterns",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 7,
            name: "prompt_length",
            kind: "scalar",
            T: 4
        }, {
            no: 8,
            name: "prompt_id",
            kind: "scalar",
            T: 9
        }, {
            no: 10,
            name: "model_tag",
            kind: "scalar",
            T: 9
        }, {
            no: 11,
            name: "completion_profile",
            kind: "message",
            T: En,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new cn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new cn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new cn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(cn, e, t)
        }
    }
    class un extends E {
        completionId = "";
        text = "";
        stop = "";
        score = 0;
        tokens = [];
        decodedTokens = [];
        probabilities = [];
        adjustedProbabilities = [];
        generatedLength = A.zero;
        stopReason = Ge.UNSPECIFIED;
        filterReasons = [];
        originalText = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.Completion";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "completion_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "text",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "stop",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "score",
            kind: "scalar",
            T: 1
        }, {
            no: 6,
            name: "tokens",
            kind: "scalar",
            T: 4,
            repeated: !0
        }, {
            no: 7,
            name: "decoded_tokens",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 8,
            name: "probabilities",
            kind: "scalar",
            T: 1,
            repeated: !0
        }, {
            no: 9,
            name: "adjusted_probabilities",
            kind: "scalar",
            T: 1,
            repeated: !0
        }, {
            no: 10,
            name: "generated_length",
            kind: "scalar",
            T: 4
        }, {
            no: 12,
            name: "stop_reason",
            kind: "enum",
            T: ye.getEnumType(Ge)
        }, {
            no: 13,
            name: "filter_reasons",
            kind: "enum",
            T: ye.getEnumType(He),
            repeated: !0
        }, {
            no: 14,
            name: "original_text",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new un).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new un).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new un).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(un, e, t)
        }
    }
    class ln extends E {
        completionIds = [];
        maxTokens = A.zero;
        temperature = 0;
        topK = A.zero;
        topP = 0;
        stopPatterns = [];
        promptLength = A.zero;
        promptId = "";
        modelTag = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.StreamingCompletionInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "completion_ids",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 2,
            name: "max_tokens",
            kind: "scalar",
            T: 4
        }, {
            no: 3,
            name: "temperature",
            kind: "scalar",
            T: 1
        }, {
            no: 4,
            name: "top_k",
            kind: "scalar",
            T: 4
        }, {
            no: 5,
            name: "top_p",
            kind: "scalar",
            T: 1
        }, {
            no: 6,
            name: "stop_patterns",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 7,
            name: "prompt_length",
            kind: "scalar",
            T: 4
        }, {
            no: 9,
            name: "prompt_id",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "model_tag",
            kind: "scalar",
            T: 9
        }, {
            no: 10,
            name: "completions_request",
            kind: "message",
            T: Vt
        }, {
            no: 11,
            name: "eval_suffix_info",
            kind: "message",
            T: pn
        }]));
        static fromBinary(e, t) {
            return (new ln).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ln).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ln).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ln, e, t)
        }
    }
    class _n extends E {
        totalPrefillPassTime = 0;
        avgPrefillPassTime = 0;
        numPrefillPasses = A.zero;
        totalSpecCopyPassTime = 0;
        avgSpecCopyPassTime = 0;
        numSpecCopyPasses = A.zero;
        totalGenerationPassTime = 0;
        avgGenerationPassTime = 0;
        numGenerationPasses = A.zero;
        totalModelTime = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.SingleModelCompletionProfile";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "total_prefill_pass_time",
            kind: "scalar",
            T: 1
        }, {
            no: 2,
            name: "avg_prefill_pass_time",
            kind: "scalar",
            T: 1
        }, {
            no: 3,
            name: "num_prefill_passes",
            kind: "scalar",
            T: 4
        }, {
            no: 7,
            name: "total_spec_copy_pass_time",
            kind: "scalar",
            T: 1
        }, {
            no: 8,
            name: "avg_spec_copy_pass_time",
            kind: "scalar",
            T: 1
        }, {
            no: 9,
            name: "num_spec_copy_passes",
            kind: "scalar",
            T: 4
        }, {
            no: 4,
            name: "total_generation_pass_time",
            kind: "scalar",
            T: 1
        }, {
            no: 5,
            name: "avg_generation_pass_time",
            kind: "scalar",
            T: 1
        }, {
            no: 6,
            name: "num_generation_passes",
            kind: "scalar",
            T: 4
        }, {
            no: 10,
            name: "total_model_time",
            kind: "scalar",
            T: 1
        }]));
        static fromBinary(e, t) {
            return (new _n).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new _n).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new _n).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(_n, e, t)
        }
    }
    class En extends E {
        timeToFirstPrefillPass = 0;
        timeToFirstToken = 0;
        totalCompletionTime = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.CompletionProfile";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "model_profile",
            kind: "message",
            T: _n
        }, {
            no: 2,
            name: "draft_model_profile",
            kind: "message",
            T: _n,
            opt: !0
        }, {
            no: 3,
            name: "time_to_first_prefill_pass",
            kind: "scalar",
            T: 1
        }, {
            no: 4,
            name: "time_to_first_token",
            kind: "scalar",
            T: 1
        }, {
            no: 5,
            name: "total_completion_time",
            kind: "scalar",
            T: 1
        }]));
        static fromBinary(e, t) {
            return (new En).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new En).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new En).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(En, e, t)
        }
    }
    class dn extends E {
        decodedToken = new Uint8Array(0);
        token = A.zero;
        probability = 0;
        adjustedProbability = 0;
        completionFinished = !1;
        stop = "";
        stopReason = Ge.UNSPECIFIED;
        attributionStatuses = {};
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.StreamingCompletion";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "decoded_token",
            kind: "scalar",
            T: 12
        }, {
            no: 2,
            name: "token",
            kind: "scalar",
            T: 4
        }, {
            no: 3,
            name: "probability",
            kind: "scalar",
            T: 1
        }, {
            no: 4,
            name: "adjusted_probability",
            kind: "scalar",
            T: 1
        }, {
            no: 5,
            name: "completion_finished",
            kind: "scalar",
            T: 8
        }, {
            no: 6,
            name: "stop",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "stop_reason",
            kind: "enum",
            T: ye.getEnumType(Ge)
        }, {
            no: 8,
            name: "attribution_statuses",
            kind: "map",
            K: 13,
            V: {
                kind: "enum",
                T: ye.getEnumType(ve)
            }
        }]));
        static fromBinary(e, t) {
            return (new dn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new dn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new dn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(dn, e, t)
        }
    }
    class Tn extends E {
        completions = {};
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.StreamingCompletionMap";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "completions",
            kind: "map",
            K: 5,
            V: {
                kind: "message",
                T: dn
            }
        }]));
        static fromBinary(e, t) {
            return (new Tn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Tn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Tn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Tn, e, t)
        }
    }
    class fn extends E {
        completionMaps = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.PackedStreamingCompletionMaps";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "completion_maps",
            kind: "message",
            T: Tn,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new fn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new fn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new fn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(fn, e, t)
        }
    }
    class pn extends E {
        perTokenLogLikelihoods = [];
        isGreedy = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.StreamingEvalSuffixInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "per_token_log_likelihoods",
            kind: "scalar",
            T: 2,
            repeated: !0
        }, {
            no: 2,
            name: "is_greedy",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new pn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new pn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new pn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(pn, e, t)
        }
    }
    class Sn extends (null) {
        payload = {
            case: void 0
        };
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "completion_info",
            kind: "message",
            T: ln,
            oneof: "payload"
        }, {
            no: 2,
            name: "completion_map",
            kind: "message",
            T: Tn,
            oneof: "payload"
        }, {
            no: 4,
            name: "packed_completion_maps",
            kind: "message",
            T: fn,
            oneof: "payload"
        }, {
            no: 5,
            name: "completion_profile",
            kind: "message",
            T: En,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new Sn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Sn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Sn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Sn, e, t)
        }
    }
    class Nn extends E {
        apiServerLatencyMs = A.zero;
        languageServerLatencyMs = A.zero;
        networkLatencyMs = A.zero;
        apiServerFirstByteLatencyMs = A.zero;
        languageServerFirstByteLatencyMs = A.zero;
        networkFirstByteLatencyMs = A.zero;
        apiServerFirstLineLatencyMs = A.zero;
        languageServerFirstLineLatencyMs = A.zero;
        networkFirstLineLatencyMs = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.CompletionLatencyInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "api_server_latency_ms",
            kind: "scalar",
            T: 4
        }, {
            no: 2,
            name: "language_server_latency_ms",
            kind: "scalar",
            T: 4
        }, {
            no: 3,
            name: "network_latency_ms",
            kind: "scalar",
            T: 4
        }, {
            no: 4,
            name: "api_server_first_byte_latency_ms",
            kind: "scalar",
            T: 4
        }, {
            no: 5,
            name: "language_server_first_byte_latency_ms",
            kind: "scalar",
            T: 4
        }, {
            no: 6,
            name: "network_first_byte_latency_ms",
            kind: "scalar",
            T: 4
        }, {
            no: 7,
            name: "api_server_first_line_latency_ms",
            kind: "scalar",
            T: 4
        }, {
            no: 8,
            name: "language_server_first_line_latency_ms",
            kind: "scalar",
            T: 4
        }, {
            no: 9,
            name: "network_first_line_latency_ms",
            kind: "scalar",
            T: 4
        }]));
        static fromBinary(e, t) {
            return (new Nn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Nn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Nn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Nn, e, t)
        }
    }
    class Cn extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "completion",
            kind: "message",
            T: un
        }, {
            no: 2,
            name: "latency_info",
            kind: "message",
            T: Nn
        }]));
        static fromBinary(e, t) {
            return (new Cn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Cn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Cn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Cn, e, t)
        }
    }
    class In extends (null) {
        prompts = [];
        priority = Ve.UNSPECIFIED;
        prefix = Ye.UNSPECIFIED;
        model = be.MODEL_UNSPECIFIED;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "prompts",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 2,
            name: "priority",
            kind: "enum",
            T: ye.getEnumType(Ve)
        }, {
            no: 3,
            name: "prefix",
            kind: "enum",
            T: ye.getEnumType(Ye)
        }, {
            no: 4,
            name: "model",
            kind: "enum",
            T: ye.getEnumType(be)
        }]));
        static fromBinary(e, t) {
            return (new In).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new In).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new In).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(In, e, t)
        }
    }
    class gn extends E {
        values = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.Embedding";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "values",
            kind: "scalar",
            T: 2,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new gn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new gn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new gn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(gn, e, t)
        }
    }
    class On extends (null) {
        embeddings = [];
        promptsExceededContextLength = !1;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "embeddings",
            kind: "message",
            T: gn,
            repeated: !0
        }, {
            no: 2,
            name: "prompts_exceeded_context_length",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new On).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new On).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new On).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(On, e, t)
        }
    }
    class An extends (null) {
        prefix = "";
        items = [];
        hasInstructTokens = !1;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 2,
            name: "prefix",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "items",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 4,
            name: "has_instruct_tokens",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new An).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new An).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new An).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(An, e, t)
        }
    }
    class Pn extends (null) {
        values = [];
        promptsExceededContextLength = !1;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "values",
            kind: "scalar",
            T: 2,
            repeated: !0
        }, {
            no: 2,
            name: "prompts_exceeded_context_length",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Pn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Pn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Pn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Pn, e, t)
        }
    }
    class Ln extends E {
        ideName = "";
        ideVersion = "";
        extensionName = "";
        extensionVersion = "";
        apiKey = "";
        locale = "";
        os = "";
        hardware = "";
        disableTelemetry = !1;
        sessionId = "";
        requestId = A.zero;
        sourceAddress = "";
        userAgent = "";
        url = "";
        authSource = Ke.CODEIUM;
        extensionPath = "";
        userId = "";
        userJwt = "";
        forceTeamId = "";
        windsurfVersion = "";
        deviceFingerprint = "";
        triggerId = "";
        planName = "";
        id = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.Metadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "ide_name",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "ide_version",
            kind: "scalar",
            T: 9
        }, {
            no: 12,
            name: "extension_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "extension_version",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "api_key",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "locale",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "os",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "hardware",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "disable_telemetry",
            kind: "scalar",
            T: 8
        }, {
            no: 10,
            name: "session_id",
            kind: "scalar",
            T: 9
        }, {
            no: 16,
            name: "ls_timestamp",
            kind: "message",
            T: De
        }, {
            no: 9,
            name: "request_id",
            kind: "scalar",
            T: 4
        }, {
            no: 11,
            name: "source_address",
            kind: "scalar",
            T: 9
        }, {
            no: 13,
            name: "user_agent",
            kind: "scalar",
            T: 9
        }, {
            no: 14,
            name: "url",
            kind: "scalar",
            T: 9
        }, {
            no: 15,
            name: "auth_source",
            kind: "enum",
            T: ye.getEnumType(Ke)
        }, {
            no: 17,
            name: "extension_path",
            kind: "scalar",
            T: 9
        }, {
            no: 20,
            name: "user_id",
            kind: "scalar",
            T: 9
        }, {
            no: 21,
            name: "user_jwt",
            kind: "scalar",
            T: 9
        }, {
            no: 22,
            name: "force_team_id",
            kind: "scalar",
            T: 9
        }, {
            no: 23,
            name: "windsurf_version",
            kind: "scalar",
            T: 9
        }, {
            no: 24,
            name: "device_fingerprint",
            kind: "scalar",
            T: 9
        }, {
            no: 25,
            name: "trigger_id",
            kind: "scalar",
            T: 9
        }, {
            no: 26,
            name: "plan_name",
            kind: "scalar",
            T: 9
        }, {
            no: 27,
            name: "id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Ln).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ln).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ln).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ln, e, t)
        }
    }
    class Rn extends E {
        tabSize = A.zero;
        insertSpaces = !1;
        disableAutocompleteInComments = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.EditorOptions";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "tab_size",
            kind: "scalar",
            T: 4
        }, {
            no: 2,
            name: "insert_spaces",
            kind: "scalar",
            T: 8
        }, {
            no: 3,
            name: "disable_autocomplete_in_comments",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Rn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Rn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Rn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Rn, e, t)
        }
    }
    class yn extends E {
        errorId = "";
        timestampUnixMs = A.zero;
        stacktrace = "";
        recovered = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ErrorTrace";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "error_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "timestamp_unix_ms",
            kind: "scalar",
            T: 3
        }, {
            no: 3,
            name: "stacktrace",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "recovered",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new yn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new yn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new yn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(yn, e, t)
        }
    }
    class wn extends E {
        eventType = We.UNSPECIFIED;
        eventJson = "";
        timestampUnixMs = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.Event";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "event_type",
            kind: "enum",
            T: ye.getEnumType(We)
        }, {
            no: 2,
            name: "event_json",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "timestamp_unix_ms",
            kind: "scalar",
            T: 3
        }]));
        static fromBinary(e, t) {
            return (new wn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new wn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new wn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(wn, e, t)
        }
    }
    class kn extends (null) {
        searchId = "";
        resultId = "";
        absolutePath = "";
        workspacePaths = [];
        text = "";
        similarityScore = 0;
        numResultsInCluster = protoInt64.zero;
        representativePath = "";
        meanSimilarityScore = 0;
        searchResultType = ze.UNSPECIFIED;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "search_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "result_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "absolute_path",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "workspace_paths",
            kind: "message",
            T: Dn,
            repeated: !0
        }, {
            no: 5,
            name: "text",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "embedding_metadata",
            kind: "message",
            T: Jn
        }, {
            no: 7,
            name: "similarity_score",
            kind: "scalar",
            T: 2
        }, {
            no: 8,
            name: "num_results_in_cluster",
            kind: "scalar",
            T: 3
        }, {
            no: 9,
            name: "representative_path",
            kind: "scalar",
            T: 9
        }, {
            no: 10,
            name: "mean_similarity_score",
            kind: "scalar",
            T: 2
        }, {
            no: 11,
            name: "search_result_type",
            kind: "enum",
            T: ye.getEnumType(ze)
        }]));
        static fromBinary(e, t) {
            return (new kn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new kn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new kn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(kn, e, t)
        }
    }
    class Dn extends E {
        workspaceMigrateMeToUri = "";
        workspaceUri = "";
        relativePath = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.WorkspacePath";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "workspace_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "workspace_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "relative_path",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Dn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Dn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Dn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Dn, e, t)
        }
    }
    class Jn extends E {
        nodeName = "";
        startLine = 0;
        endLine = 0;
        embedType = je.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.EmbeddingMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "node_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "start_line",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "end_line",
            kind: "scalar",
            T: 13
        }, {
            no: 4,
            name: "embed_type",
            kind: "enum",
            T: ye.getEnumType(je)
        }]));
        static fromBinary(e, t) {
            return (new Jn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Jn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Jn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Jn, e, t)
        }
    }
    class Mn extends E {
        completions = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.MockResponseData";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "completions",
            kind: "message",
            T: un,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Mn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Mn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Mn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Mn, e, t)
        }
    }
    class Un extends (null) {
        workspaceUriForTelemetry = "";
        numFilesTotal = protoInt64.zero;
        numFilesToEmbed = protoInt64.zero;
        numNodesTotal = protoInt64.zero;
        numNodesToEmbed = protoInt64.zero;
        numTokens = protoInt64.zero;
        numHighPriorityNodesToEmbed = protoInt64.zero;
        error = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "workspace_uri_for_telemetry",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "indexing_start",
            kind: "message",
            T: De
        }, {
            no: 3,
            name: "indexing_end",
            kind: "message",
            T: De
        }, {
            no: 4,
            name: "embedding_duration",
            kind: "message",
            T: Je
        }, {
            no: 5,
            name: "num_files_total",
            kind: "scalar",
            T: 3
        }, {
            no: 6,
            name: "num_files_to_embed",
            kind: "scalar",
            T: 3
        }, {
            no: 7,
            name: "num_nodes_total",
            kind: "scalar",
            T: 3
        }, {
            no: 8,
            name: "num_nodes_to_embed",
            kind: "scalar",
            T: 3
        }, {
            no: 9,
            name: "num_tokens",
            kind: "scalar",
            T: 3
        }, {
            no: 10,
            name: "num_high_priority_nodes_to_embed",
            kind: "scalar",
            T: 3
        }, {
            no: 11,
            name: "error",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Un).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Un).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Un).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Un, e, t)
        }
    }
    class xn extends E {
        workspace = "";
        numFiles = {};
        numBytes = {};
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.WorkspaceStats";
        static fields = ye.util.newFieldList(( () => [{
            no: 3,
            name: "workspace",
            kind: "scalar",
            T: 9
        }, {
            no: 1,
            name: "num_files",
            kind: "map",
            K: 5,
            V: {
                kind: "scalar",
                T: 3
            }
        }, {
            no: 2,
            name: "num_bytes",
            kind: "map",
            K: 5,
            V: {
                kind: "scalar",
                T: 3
            }
        }]));
        static fromBinary(e, t) {
            return (new xn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new xn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new xn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(xn, e, t)
        }
    }
    class Bn extends E {
        numTotalFiles = 0;
        numIndexedFiles = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.PartialIndexMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "num_total_files",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "num_indexed_files",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "cutoff_timestamp",
            kind: "message",
            T: De
        }]));
        static fromBinary(e, t) {
            return (new Bn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Bn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Bn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Bn, e, t)
        }
    }
    class hn extends E {
        rawSource = "";
        cleanFunction = "";
        docstring = "";
        nodeName = "";
        params = "";
        definitionLine = 0;
        startLine = 0;
        endLine = 0;
        startCol = 0;
        endCol = 0;
        leadingWhitespace = "";
        language = Ze.UNSPECIFIED;
        bodyStartLine = 0;
        bodyStartCol = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.FunctionInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "raw_source",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "clean_function",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "docstring",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "node_name",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "params",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "definition_line",
            kind: "scalar",
            T: 5
        }, {
            no: 7,
            name: "start_line",
            kind: "scalar",
            T: 5
        }, {
            no: 8,
            name: "end_line",
            kind: "scalar",
            T: 5
        }, {
            no: 9,
            name: "start_col",
            kind: "scalar",
            T: 5
        }, {
            no: 10,
            name: "end_col",
            kind: "scalar",
            T: 5
        }, {
            no: 11,
            name: "leading_whitespace",
            kind: "scalar",
            T: 9
        }, {
            no: 12,
            name: "language",
            kind: "enum",
            T: ye.getEnumType(Ze)
        }, {
            no: 13,
            name: "body_start_line",
            kind: "scalar",
            T: 5
        }, {
            no: 14,
            name: "body_start_col",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new hn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new hn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new hn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(hn, e, t)
        }
    }
    class Fn extends E {
        rawSource = "";
        startLine = 0;
        endLine = 0;
        startCol = 0;
        endCol = 0;
        leadingWhitespace = "";
        fieldsAndConstructors = [];
        docstring = "";
        nodeName = "";
        methods = [];
        nodeLineage = [];
        isExported = !1;
        language = Ze.UNSPECIFIED;
        definitionLine = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ClassInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "raw_source",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "start_line",
            kind: "scalar",
            T: 5
        }, {
            no: 3,
            name: "end_line",
            kind: "scalar",
            T: 5
        }, {
            no: 4,
            name: "start_col",
            kind: "scalar",
            T: 5
        }, {
            no: 5,
            name: "end_col",
            kind: "scalar",
            T: 5
        }, {
            no: 6,
            name: "leading_whitespace",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "fields_and_constructors",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 8,
            name: "docstring",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "node_name",
            kind: "scalar",
            T: 9
        }, {
            no: 10,
            name: "methods",
            kind: "message",
            T: hn,
            repeated: !0
        }, {
            no: 11,
            name: "node_lineage",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 12,
            name: "is_exported",
            kind: "scalar",
            T: 8
        }, {
            no: 13,
            name: "language",
            kind: "enum",
            T: ye.getEnumType(Ze)
        }, {
            no: 14,
            name: "definition_line",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new Fn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Fn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Fn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Fn, e, t)
        }
    }
    class bn extends E {
        label = "";
        creditMultiplier = 0;
        disabled = !1;
        supportsImages = !1;
        supportsLegacy = !1;
        isPremium = !1;
        betaWarningMessage = "";
        isBeta = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ClientModelConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "label",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "model_or_alias",
            kind: "message",
            T: rn
        }, {
            no: 3,
            name: "credit_multiplier",
            kind: "scalar",
            T: 2
        }, {
            no: 4,
            name: "disabled",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "supports_images",
            kind: "scalar",
            T: 8
        }, {
            no: 6,
            name: "supports_legacy",
            kind: "scalar",
            T: 8
        }, {
            no: 7,
            name: "is_premium",
            kind: "scalar",
            T: 8
        }, {
            no: 8,
            name: "beta_warning_message",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "is_beta",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new bn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new bn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new bn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(bn, e, t)
        }
    }
    class qn extends E {
        creditMultiplier = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.AllowedModelConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "model_or_alias",
            kind: "message",
            T: rn
        }, {
            no: 2,
            name: "credit_multiplier",
            kind: "scalar",
            T: 2
        }]));
        static fromBinary(e, t) {
            return (new qn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new qn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new qn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(qn, e, t)
        }
    }
    class Gn extends E {
        teamsTier = st.UNSPECIFIED;
        planName = "";
        hasAutocompleteFastMode = !1;
        allowStickyPremiumModels = !1;
        hasForgeAccess = !1;
        disableCodeSnippetTelemetry = !1;
        allowPremiumCommandModels = !1;
        hasTabToJump = !1;
        maxNumPremiumChatMessages = A.zero;
        maxNumChatInputTokens = A.zero;
        maxCustomChatInstructionCharacters = A.zero;
        maxNumPinnedContextItems = A.zero;
        maxLocalIndexSize = A.zero;
        maxUnclaimedSites = 0;
        monthlyPromptCredits = 0;
        monthlyFlowCredits = 0;
        monthlyFlexCreditPurchaseAmount = 0;
        isTeams = !1;
        isEnterprise = !1;
        canBuyMoreCredits = !1;
        cascadeWebSearchEnabled = !1;
        canCustomizeAppIcon = !1;
        cascadeCanAutoRunCommands = !1;
        canGenerateCommitMessages = !1;
        cascadeAllowedModelsConfig = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.PlanInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "teams_tier",
            kind: "enum",
            T: ye.getEnumType(st)
        }, {
            no: 2,
            name: "plan_name",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "has_autocomplete_fast_mode",
            kind: "scalar",
            T: 8
        }, {
            no: 4,
            name: "allow_sticky_premium_models",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "has_forge_access",
            kind: "scalar",
            T: 8
        }, {
            no: 11,
            name: "disable_code_snippet_telemetry",
            kind: "scalar",
            T: 8
        }, {
            no: 15,
            name: "allow_premium_command_models",
            kind: "scalar",
            T: 8
        }, {
            no: 23,
            name: "has_tab_to_jump",
            kind: "scalar",
            T: 8
        }, {
            no: 6,
            name: "max_num_premium_chat_messages",
            kind: "scalar",
            T: 3
        }, {
            no: 7,
            name: "max_num_chat_input_tokens",
            kind: "scalar",
            T: 3
        }, {
            no: 8,
            name: "max_custom_chat_instruction_characters",
            kind: "scalar",
            T: 3
        }, {
            no: 9,
            name: "max_num_pinned_context_items",
            kind: "scalar",
            T: 3
        }, {
            no: 10,
            name: "max_local_index_size",
            kind: "scalar",
            T: 3
        }, {
            no: 26,
            name: "max_unclaimed_sites",
            kind: "scalar",
            T: 5
        }, {
            no: 12,
            name: "monthly_prompt_credits",
            kind: "scalar",
            T: 5
        }, {
            no: 13,
            name: "monthly_flow_credits",
            kind: "scalar",
            T: 5
        }, {
            no: 14,
            name: "monthly_flex_credit_purchase_amount",
            kind: "scalar",
            T: 5
        }, {
            no: 17,
            name: "is_teams",
            kind: "scalar",
            T: 8
        }, {
            no: 16,
            name: "is_enterprise",
            kind: "scalar",
            T: 8
        }, {
            no: 18,
            name: "can_buy_more_credits",
            kind: "scalar",
            T: 8
        }, {
            no: 19,
            name: "cascade_web_search_enabled",
            kind: "scalar",
            T: 8
        }, {
            no: 20,
            name: "can_customize_app_icon",
            kind: "scalar",
            T: 8
        }, {
            no: 22,
            name: "cascade_can_auto_run_commands",
            kind: "scalar",
            T: 8
        }, {
            no: 25,
            name: "can_generate_commit_messages",
            kind: "scalar",
            T: 8
        }, {
            no: 21,
            name: "cascade_allowed_models_config",
            kind: "message",
            T: qn,
            repeated: !0
        }, {
            no: 24,
            name: "default_team_config",
            kind: "message",
            T: kr
        }]));
        static fromBinary(e, t) {
            return (new Gn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Gn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Gn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Gn, e, t)
        }
    }
    class Hn extends E {
        availablePromptCredits = 0;
        availableFlowCredits = 0;
        availableFlexCredits = 0;
        usedFlexCredits = 0;
        usedFlowCredits = 0;
        usedPromptCredits = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.PlanStatus";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "plan_info",
            kind: "message",
            T: Gn
        }, {
            no: 2,
            name: "plan_start",
            kind: "message",
            T: De
        }, {
            no: 3,
            name: "plan_end",
            kind: "message",
            T: De
        }, {
            no: 8,
            name: "available_prompt_credits",
            kind: "scalar",
            T: 5
        }, {
            no: 9,
            name: "available_flow_credits",
            kind: "scalar",
            T: 5
        }, {
            no: 4,
            name: "available_flex_credits",
            kind: "scalar",
            T: 5
        }, {
            no: 7,
            name: "used_flex_credits",
            kind: "scalar",
            T: 5
        }, {
            no: 5,
            name: "used_flow_credits",
            kind: "scalar",
            T: 5
        }, {
            no: 6,
            name: "used_prompt_credits",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new Hn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Hn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Hn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Hn, e, t)
        }
    }
    class vn extends E {
        pro = !1;
        disableTelemetry = !1;
        name = "";
        ignoreChatTelemetrySetting = !1;
        teamId = "";
        teamStatus = tt.UNSPECIFIED;
        email = "";
        userFeatures = [];
        teamsFeatures = [];
        permissions = [];
        hasUsedWindsurf = !1;
        userUsedPromptCredits = A.zero;
        userUsedFlowCredits = A.zero;
        hasFingerprintSet = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.UserStatus";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "pro",
            kind: "scalar",
            T: 8
        }, {
            no: 2,
            name: "disable_telemetry",
            kind: "scalar",
            T: 8
        }, {
            no: 3,
            name: "name",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "ignore_chat_telemetry_setting",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "team_id",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "team_status",
            kind: "enum",
            T: ye.getEnumType(tt)
        }, {
            no: 7,
            name: "email",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "user_features",
            kind: "enum",
            T: ye.getEnumType(at),
            repeated: !0
        }, {
            no: 8,
            name: "teams_features",
            kind: "enum",
            T: ye.getEnumType(nt),
            repeated: !0
        }, {
            no: 11,
            name: "permissions",
            kind: "enum",
            T: ye.getEnumType(rt),
            repeated: !0
        }, {
            no: 12,
            name: "plan_info",
            kind: "message",
            T: Gn
        }, {
            no: 13,
            name: "plan_status",
            kind: "message",
            T: Hn
        }, {
            no: 31,
            name: "has_used_windsurf",
            kind: "scalar",
            T: 8
        }, {
            no: 28,
            name: "user_used_prompt_credits",
            kind: "scalar",
            T: 3
        }, {
            no: 29,
            name: "user_used_flow_credits",
            kind: "scalar",
            T: 3
        }, {
            no: 30,
            name: "has_fingerprint_set",
            kind: "scalar",
            T: 8
        }, {
            no: 32,
            name: "team_config",
            kind: "message",
            T: kr
        }]));
        static fromBinary(e, t) {
            return (new vn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new vn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new vn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(vn, e, t)
        }
    }
    class Vn extends (null) {
        info = {
            case: void 0
        };
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "perforce_info",
            kind: "message",
            T: Yn,
            oneof: "info"
        }, {
            no: 2,
            name: "git_info",
            kind: "message",
            T: Xn,
            oneof: "info"
        }]));
        static fromBinary(e, t) {
            return (new Vn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Vn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Vn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Vn, e, t)
        }
    }
    class Yn extends E {
        depotName = "";
        versionAlias = "";
        baseP4dUrl = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.PerforceDepotInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "depot_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "version_alias",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "base_p4d_url",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Yn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Yn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Yn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Yn, e, t)
        }
    }
    class Xn extends E {
        name = "";
        owner = "";
        repoName = "";
        commit = "";
        versionAlias = "";
        scmProvider = it.UNSPECIFIED;
        baseGitUrl = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.GitRepoInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "owner",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "repo_name",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "commit",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "version_alias",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "scm_provider",
            kind: "enum",
            T: ye.getEnumType(it)
        }, {
            no: 7,
            name: "base_git_url",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Xn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Xn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Xn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Xn, e, t)
        }
    }
    class Kn extends E {
        absolutePathMigrateMeToUri = "";
        absoluteUri = "";
        workspacePaths = [];
        nodeName = "";
        nodeLineage = [];
        startLine = 0;
        startCol = 0;
        endLine = 0;
        endCol = 0;
        contextType = mt.UNSPECIFIED;
        language = Ze.UNSPECIFIED;
        snippetByType = {};
        fileContentHash = new Uint8Array(0);
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.CodeContextItem";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "absolute_path_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 16,
            name: "absolute_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "workspace_paths",
            kind: "message",
            T: Dn,
            repeated: !0
        }, {
            no: 3,
            name: "node_name",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "node_lineage",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 5,
            name: "start_line",
            kind: "scalar",
            T: 13
        }, {
            no: 12,
            name: "start_col",
            kind: "scalar",
            T: 13
        }, {
            no: 6,
            name: "end_line",
            kind: "scalar",
            T: 13
        }, {
            no: 13,
            name: "end_col",
            kind: "scalar",
            T: 13
        }, {
            no: 7,
            name: "context_type",
            kind: "enum",
            T: ye.getEnumType(mt)
        }, {
            no: 10,
            name: "language",
            kind: "enum",
            T: ye.getEnumType(Ze)
        }, {
            no: 11,
            name: "snippet_by_type",
            kind: "map",
            K: 9,
            V: {
                kind: "message",
                T: Wn
            }
        }, {
            no: 14,
            name: "repo_info",
            kind: "message",
            T: Xn
        }, {
            no: 15,
            name: "file_content_hash",
            kind: "scalar",
            T: 12
        }]));
        static fromBinary(e, t) {
            return (new Kn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Kn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Kn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Kn, e, t)
        }
    }
    class Wn extends E {
        snippet = "";
        wordCountBySplitter = {};
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.SnippetWithWordCount";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "snippet",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "word_count_by_splitter",
            kind: "map",
            K: 9,
            V: {
                kind: "message",
                T: zn
            }
        }]));
        static fromBinary(e, t) {
            return (new Wn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Wn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Wn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Wn, e, t)
        }
    }
    class zn extends E {
        wordCountMap = {};
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.WordCount";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "word_count_map",
            kind: "map",
            K: 9,
            V: {
                kind: "scalar",
                T: 3
            }
        }]));
        static fromBinary(e, t) {
            return (new zn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new zn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new zn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(zn, e, t)
        }
    }
    class jn extends E {
        computedName = "";
        gitOriginUrl = "";
        gitUpstreamUrl = "";
        reportedName = "";
        modelName = "";
        submoduleUrl = "";
        submodulePath = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.Repository";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "computed_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "git_origin_url",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "git_upstream_url",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "reported_name",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "model_name",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "submodule_url",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "submodule_path",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new jn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new jn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new jn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(jn, e, t)
        }
    }
    class Qn extends E {
        promptId = "";
        filePath = "";
        originalFileContent = "";
        completionText = "";
        startOffset = A.zero;
        endOffset = A.zero;
        cursorLine = A.zero;
        cursorColumn = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.CaptureFileRequestData";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "prompt_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "file_path",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "original_file_content",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "completion_text",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "start_offset",
            kind: "scalar",
            T: 4
        }, {
            no: 7,
            name: "end_offset",
            kind: "scalar",
            T: 4
        }, {
            no: 8,
            name: "cursor_line",
            kind: "scalar",
            T: 4
        }, {
            no: 9,
            name: "cursor_column",
            kind: "scalar",
            T: 4
        }]));
        static fromBinary(e, t) {
            return (new Qn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Qn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Qn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Qn, e, t)
        }
    }
    class $n extends E {
        numAcceptances = 0;
        numRejections = 0;
        numLinesAccepted = 0;
        numBytesAccepted = 0;
        numUsers = 0;
        activeDeveloperDays = 0;
        activeDeveloperHours = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.CompletionStatistics";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "num_acceptances",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "num_rejections",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "num_lines_accepted",
            kind: "scalar",
            T: 13
        }, {
            no: 4,
            name: "num_bytes_accepted",
            kind: "scalar",
            T: 13
        }, {
            no: 5,
            name: "num_users",
            kind: "scalar",
            T: 13
        }, {
            no: 6,
            name: "active_developer_days",
            kind: "scalar",
            T: 13
        }, {
            no: 7,
            name: "active_developer_hours",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new $n).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new $n).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new $n).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals($n, e, t)
        }
    }
    class Zn extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.CompletionByDateEntry";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "timestamp",
            kind: "message",
            T: De
        }, {
            no: 2,
            name: "completion_statistics",
            kind: "message",
            T: $n
        }]));
        static fromBinary(e, t) {
            return (new Zn).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Zn).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Zn).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Zn, e, t)
        }
    }
    class ea extends E {
        language = Ze.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.CompletionByLanguageEntry";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "language",
            kind: "enum",
            T: ye.getEnumType(Ze)
        }, {
            no: 2,
            name: "completion_statistics",
            kind: "message",
            T: $n
        }]));
        static fromBinary(e, t) {
            return (new ea).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ea).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ea).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ea, e, t)
        }
    }
    class ta extends E {
        chatsSent = A.zero;
        chatsReceived = A.zero;
        chatsAccepted = A.zero;
        chatsInsertedAtCursor = A.zero;
        chatsApplied = A.zero;
        chatLocUsed = A.zero;
        chatCodeBlocksUsed = A.zero;
        functionExplainCount = A.zero;
        functionDocstringCount = A.zero;
        functionRefactorCount = A.zero;
        codeBlockExplainCount = A.zero;
        codeBlockRefactorCount = A.zero;
        problemExplainCount = A.zero;
        functionUnitTestsCount = A.zero;
        activeDeveloperDays = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ChatStats";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "chats_sent",
            kind: "scalar",
            T: 4
        }, {
            no: 2,
            name: "chats_received",
            kind: "scalar",
            T: 4
        }, {
            no: 3,
            name: "chats_accepted",
            kind: "scalar",
            T: 4
        }, {
            no: 4,
            name: "chats_inserted_at_cursor",
            kind: "scalar",
            T: 4
        }, {
            no: 5,
            name: "chats_applied",
            kind: "scalar",
            T: 4
        }, {
            no: 6,
            name: "chat_loc_used",
            kind: "scalar",
            T: 4
        }, {
            no: 7,
            name: "chat_code_blocks_used",
            kind: "scalar",
            T: 4
        }, {
            no: 8,
            name: "function_explain_count",
            kind: "scalar",
            T: 4
        }, {
            no: 9,
            name: "function_docstring_count",
            kind: "scalar",
            T: 4
        }, {
            no: 10,
            name: "function_refactor_count",
            kind: "scalar",
            T: 4
        }, {
            no: 11,
            name: "code_block_explain_count",
            kind: "scalar",
            T: 4
        }, {
            no: 12,
            name: "code_block_refactor_count",
            kind: "scalar",
            T: 4
        }, {
            no: 13,
            name: "problem_explain_count",
            kind: "scalar",
            T: 4
        }, {
            no: 14,
            name: "function_unit_tests_count",
            kind: "scalar",
            T: 4
        }, {
            no: 15,
            name: "active_developer_days",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new ta).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ta).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ta).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ta, e, t)
        }
    }
    class na extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "timestamp",
            kind: "message",
            T: De
        }, {
            no: 2,
            name: "chat_stats",
            kind: "message",
            T: ta
        }]));
        static fromBinary(e, t) {
            return (new na).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new na).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new na).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(na, e, t)
        }
    }
    class aa extends E {
        modelId = be.MODEL_UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ChatStatsByModelEntry";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "model_id",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 2,
            name: "chat_stats",
            kind: "message",
            T: ta
        }]));
        static fromBinary(e, t) {
            return (new aa).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new aa).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new aa).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(aa, e, t)
        }
    }
    class ra extends E {
        numCommands = A.zero;
        numCommandsAccepted = A.zero;
        numCommandsRejected = A.zero;
        numEdits = A.zero;
        numGenerations = A.zero;
        locAdded = A.zero;
        locRemoved = A.zero;
        bytesAdded = A.zero;
        bytesRemoved = A.zero;
        locSelected = A.zero;
        bytesSelected = A.zero;
        numCommandsBySource = {};
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.CommandStats";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "num_commands",
            kind: "scalar",
            T: 4
        }, {
            no: 2,
            name: "num_commands_accepted",
            kind: "scalar",
            T: 4
        }, {
            no: 3,
            name: "num_commands_rejected",
            kind: "scalar",
            T: 4
        }, {
            no: 4,
            name: "num_edits",
            kind: "scalar",
            T: 4
        }, {
            no: 5,
            name: "num_generations",
            kind: "scalar",
            T: 4
        }, {
            no: 6,
            name: "loc_added",
            kind: "scalar",
            T: 4
        }, {
            no: 7,
            name: "loc_removed",
            kind: "scalar",
            T: 4
        }, {
            no: 8,
            name: "bytes_added",
            kind: "scalar",
            T: 4
        }, {
            no: 9,
            name: "bytes_removed",
            kind: "scalar",
            T: 4
        }, {
            no: 10,
            name: "loc_selected",
            kind: "scalar",
            T: 4
        }, {
            no: 11,
            name: "bytes_selected",
            kind: "scalar",
            T: 4
        }, {
            no: 12,
            name: "num_commands_by_source",
            kind: "map",
            K: 9,
            V: {
                kind: "scalar",
                T: 4
            }
        }]));
        static fromBinary(e, t) {
            return (new ra).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ra).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ra).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ra, e, t)
        }
    }
    class sa extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "timestamp",
            kind: "message",
            T: De
        }, {
            no: 2,
            name: "command_stats",
            kind: "message",
            T: ra
        }]));
        static fromBinary(e, t) {
            return (new sa).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new sa).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new sa).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(sa, e, t)
        }
    }
    class ia extends (null) {
        name = "";
        email = "";
        apiKey = "";
        disableCodeium = !1;
        activeDays = 0;
        role = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "email",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "last_update_time",
            kind: "message",
            T: De
        }, {
            no: 4,
            name: "api_key",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "disable_codeium",
            kind: "scalar",
            T: 8
        }, {
            no: 6,
            name: "active_days",
            kind: "scalar",
            T: 13
        }, {
            no: 7,
            name: "role",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "signup_time",
            kind: "message",
            T: De
        }, {
            no: 9,
            name: "last_autocomplete_usage_time",
            kind: "message",
            T: De
        }, {
            no: 10,
            name: "last_chat_usage_time",
            kind: "message",
            T: De
        }, {
            no: 11,
            name: "last_command_usage_time",
            kind: "message",
            T: De
        }]));
        static fromBinary(e, t) {
            return (new ia).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ia).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ia).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(ia, e, t)
        }
    }
    class oa extends E {
        event = Ct.CASCADE_NUX_EVENT_UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.CascadeNUXState";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "event",
            kind: "enum",
            T: ye.getEnumType(Ct)
        }, {
            no: 2,
            name: "timestamp",
            kind: "message",
            T: De
        }]));
        static fromBinary(e, t) {
            return (new oa).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new oa).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new oa).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(oa, e, t)
        }
    }
    class ma extends E {
        event = It.USER_NUX_EVENT_UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.UserNUXState";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "event",
            kind: "enum",
            T: ye.getEnumType(It)
        }, {
            no: 2,
            name: "timestamp",
            kind: "message",
            T: De
        }]));
        static fromBinary(e, t) {
            return (new ma).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ma).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ma).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ma, e, t)
        }
    }
    class ca extends E {
        openMostRecentChatConversation = !1;
        lastSelectedModel = be.MODEL_UNSPECIFIED;
        themePreference = dt.UNSPECIFIED;
        extensionPanelTab = St.UNSPECIFIED;
        fontSize = Tt.UNSPECIFIED;
        rememberLastModelSelection = Nt.UNSPECIFIED;
        autocompleteSpeed = ft.UNSPECIFIED;
        lastSelectedModelName = "";
        cascadeNuxStates = [];
        cascadeAllowedCommands = [];
        cascadeDeniedCommands = [];
        userNuxStates = [];
        cascadeWebSearchDisabled = !1;
        disableAutocomplete = !1;
        disableSupercomplete = !1;
        disableSelectionPopup = !1;
        disableExplainProblemInlayHint = !1;
        disableInlayHintShortcuts = !1;
        disableOpenCascadeOnReload = !1;
        disableAutoOpenEditedFiles = !1;
        disableTabToJump = !1;
        cascadeAutoExecutionPolicy = pt.UNSPECIFIED;
        explainAndFixInCurrentConversation = !1;
        allowCascadeAccessGitignoreFiles = !1;
        disableCascadeAutoFixLints = !1;
        disableCascadeBrowserPreviews = !1;
        detectProxy = !1;
        disableTabToImport = !1;
        useClipboardForCompletions = !1;
        disableHighlightAfterAccept = !1;
        lastSelectedNewConvoTab = "";
        disableAutoGenerateMemories = !1;
        enableSoundsForSpecialEvents = !1;
        enableTabSounds = !1;
        allowCascadeInBackground = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.UserSettings";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "open_most_recent_chat_conversation",
            kind: "scalar",
            T: 8
        }, {
            no: 2,
            name: "last_selected_model",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 3,
            name: "theme_preference",
            kind: "enum",
            T: ye.getEnumType(dt)
        }, {
            no: 4,
            name: "extension_panel_tab",
            kind: "enum",
            T: ye.getEnumType(St)
        }, {
            no: 5,
            name: "font_size",
            kind: "enum",
            T: ye.getEnumType(Tt)
        }, {
            no: 7,
            name: "remember_last_model_selection",
            kind: "enum",
            T: ye.getEnumType(Nt)
        }, {
            no: 6,
            name: "autocomplete_speed",
            kind: "enum",
            T: ye.getEnumType(ft)
        }, {
            no: 8,
            name: "last_selected_model_name",
            kind: "scalar",
            T: 9
        }, {
            no: 11,
            name: "cascade_nux_states",
            kind: "message",
            T: oa,
            repeated: !0
        }, {
            no: 9,
            name: "last_selected_cascade_model",
            kind: "enum",
            T: ye.getEnumType(be),
            opt: !0
        }, {
            no: 30,
            name: "last_selected_cascade_model_or_alias",
            kind: "message",
            T: rn,
            opt: !0
        }, {
            no: 13,
            name: "cascade_planner_mode",
            kind: "enum",
            T: ye.getEnumType(gt),
            opt: !0
        }, {
            no: 14,
            name: "cascade_allowed_commands",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 15,
            name: "cascade_denied_commands",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 17,
            name: "user_nux_states",
            kind: "message",
            T: ma,
            repeated: !0
        }, {
            no: 18,
            name: "cascade_web_search_disabled",
            kind: "scalar",
            T: 8
        }, {
            no: 19,
            name: "disable_autocomplete",
            kind: "scalar",
            T: 8
        }, {
            no: 20,
            name: "disable_supercomplete",
            kind: "scalar",
            T: 8
        }, {
            no: 21,
            name: "disable_selection_popup",
            kind: "scalar",
            T: 8
        }, {
            no: 22,
            name: "disable_explain_problem_inlay_hint",
            kind: "scalar",
            T: 8
        }, {
            no: 23,
            name: "disable_inlay_hint_shortcuts",
            kind: "scalar",
            T: 8
        }, {
            no: 24,
            name: "disable_open_cascade_on_reload",
            kind: "scalar",
            T: 8
        }, {
            no: 25,
            name: "disable_auto_open_edited_files",
            kind: "scalar",
            T: 8
        }, {
            no: 26,
            name: "disable_tab_to_jump",
            kind: "scalar",
            T: 8
        }, {
            no: 27,
            name: "cascade_auto_execution_policy",
            kind: "enum",
            T: ye.getEnumType(pt)
        }, {
            no: 28,
            name: "last_selected_cascade_id",
            kind: "scalar",
            T: 9,
            opt: !0
        }, {
            no: 29,
            name: "explain_and_fix_in_current_conversation",
            kind: "scalar",
            T: 8
        }, {
            no: 31,
            name: "allow_cascade_access_gitignore_files",
            kind: "scalar",
            T: 8
        }, {
            no: 32,
            name: "disable_cascade_auto_fix_lints",
            kind: "scalar",
            T: 8
        }, {
            no: 33,
            name: "disable_cascade_browser_previews",
            kind: "scalar",
            T: 8
        }, {
            no: 34,
            name: "detect_proxy",
            kind: "scalar",
            T: 8
        }, {
            no: 35,
            name: "disable_tab_to_import",
            kind: "scalar",
            T: 8
        }, {
            no: 36,
            name: "use_clipboard_for_completions",
            kind: "scalar",
            T: 8
        }, {
            no: 37,
            name: "disable_highlight_after_accept",
            kind: "scalar",
            T: 8
        }, {
            no: 38,
            name: "last_selected_new_convo_tab",
            kind: "scalar",
            T: 9
        }, {
            no: 39,
            name: "disable_auto_generate_memories",
            kind: "scalar",
            T: 8
        }, {
            no: 40,
            name: "enable_sounds_for_special_events",
            kind: "scalar",
            T: 8
        }, {
            no: 41,
            name: "enable_tab_sounds",
            kind: "scalar",
            T: 8
        }, {
            no: 42,
            name: "allow_cascade_in_background",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new ca).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ca).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ca).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ca, e, t)
        }
    }
    class ua extends E {
        supportsContextTokens = !1;
        requiresInstructTags = !1;
        requiresFimContext = !1;
        requiresContextSnippetPrefix = !1;
        requiresContextRelevanceTags = !1;
        requiresLlama3Tokens = !1;
        zeroShotCapable = !1;
        requiresAutocompleteAsCommand = !1;
        supportsCursorAwareSupercomplete = !1;
        supportsImages = !1;
        supportsToolCalls = !1;
        supportsCumulativeContext = !1;
        tabJumpPrintLineRange = !1;
        supportsThinking = !1;
        supportsEstimateTokenCounter = !1;
        addCursorToFindReplaceTarget = !1;
        supportsTabJumpUseWholeDocument = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ModelFeatures";
        static fields = ye.util.newFieldList(( () => [{
            no: 2,
            name: "supports_context_tokens",
            kind: "scalar",
            T: 8
        }, {
            no: 3,
            name: "requires_instruct_tags",
            kind: "scalar",
            T: 8
        }, {
            no: 4,
            name: "requires_fim_context",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "requires_context_snippet_prefix",
            kind: "scalar",
            T: 8
        }, {
            no: 6,
            name: "requires_context_relevance_tags",
            kind: "scalar",
            T: 8
        }, {
            no: 7,
            name: "requires_llama3_tokens",
            kind: "scalar",
            T: 8
        }, {
            no: 8,
            name: "zero_shot_capable",
            kind: "scalar",
            T: 8
        }, {
            no: 9,
            name: "requires_autocomplete_as_command",
            kind: "scalar",
            T: 8
        }, {
            no: 10,
            name: "supports_cursor_aware_supercomplete",
            kind: "scalar",
            T: 8
        }, {
            no: 11,
            name: "supports_images",
            kind: "scalar",
            T: 8
        }, {
            no: 12,
            name: "supports_tool_calls",
            kind: "scalar",
            T: 8
        }, {
            no: 13,
            name: "supports_cumulative_context",
            kind: "scalar",
            T: 8
        }, {
            no: 14,
            name: "tab_jump_print_line_range",
            kind: "scalar",
            T: 8
        }, {
            no: 15,
            name: "supports_thinking",
            kind: "scalar",
            T: 8
        }, {
            no: 17,
            name: "supports_estimate_token_counter",
            kind: "scalar",
            T: 8
        }, {
            no: 18,
            name: "add_cursor_to_find_replace_target",
            kind: "scalar",
            T: 8
        }, {
            no: 19,
            name: "supports_tab_jump_use_whole_document",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new ua).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ua).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ua).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ua, e, t)
        }
    }
    class la extends E {
        isInternal = !1;
        modelId = be.MODEL_UNSPECIFIED;
        modelName = "";
        baseUrl = "";
        apiKey = "";
        accessKey = "";
        secretAccessKey = "";
        region = "";
        projectId = "";
        id = 0;
        maxCompletionTokens = 0;
        maxInputTokens = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ExternalModel";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "is_internal",
            kind: "scalar",
            T: 8
        }, {
            no: 2,
            name: "model_id",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 3,
            name: "model_name",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "base_url",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "api_key",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "access_key",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "secret_access_key",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "region",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "project_id",
            kind: "scalar",
            T: 9
        }, {
            no: 10,
            name: "id",
            kind: "scalar",
            T: 13
        }, {
            no: 11,
            name: "max_completion_tokens",
            kind: "scalar",
            T: 5
        }, {
            no: 12,
            name: "max_input_tokens",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new la).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new la).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new la).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(la, e, t)
        }
    }
    class _a extends E {
        modelId = be.MODEL_UNSPECIFIED;
        isInternal = !1;
        modelType = Ot.UNSPECIFIED;
        maxTokens = 0;
        tokenizerType = "";
        apiProvider = At.API_PROVIDER_UNSPECIFIED;
        modelName = "";
        supportsContext = !1;
        embedDim = 0;
        baseUrl = "";
        chatModelName = "";
        maxOutputTokens = 0;
        promptTemplaterType = Ht.UNSPECIFIED;
        toolFormatterType = vt.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ModelInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "model_id",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 2,
            name: "is_internal",
            kind: "scalar",
            T: 8
        }, {
            no: 3,
            name: "model_type",
            kind: "enum",
            T: ye.getEnumType(Ot)
        }, {
            no: 4,
            name: "max_tokens",
            kind: "scalar",
            T: 5
        }, {
            no: 5,
            name: "tokenizer_type",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "model_features",
            kind: "message",
            T: ua
        }, {
            no: 7,
            name: "api_provider",
            kind: "enum",
            T: ye.getEnumType(At)
        }, {
            no: 8,
            name: "model_name",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "supports_context",
            kind: "scalar",
            T: 8
        }, {
            no: 10,
            name: "embed_dim",
            kind: "scalar",
            T: 5
        }, {
            no: 11,
            name: "base_url",
            kind: "scalar",
            T: 9
        }, {
            no: 12,
            name: "chat_model_name",
            kind: "scalar",
            T: 9
        }, {
            no: 13,
            name: "max_output_tokens",
            kind: "scalar",
            T: 5
        }, {
            no: 14,
            name: "prompt_templater_type",
            kind: "enum",
            T: ye.getEnumType(Ht)
        }, {
            no: 15,
            name: "tool_formatter_type",
            kind: "enum",
            T: ye.getEnumType(vt)
        }]));
        static fromBinary(e, t) {
            return (new _a).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new _a).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new _a).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(_a, e, t)
        }
    }
    class Ea extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "generation_model",
            kind: "message",
            T: _a
        }, {
            no: 2,
            name: "context_check_model",
            kind: "message",
            T: _a
        }]));
        static fromBinary(e, t) {
            return (new Ea).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ea).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ea).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Ea, e, t)
        }
    }
    class da extends E {
        uid = "";
        completionId = "";
        filePath = "";
        shortPrefix = "";
        completionText = "";
        shortSuffix = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.CompletionExample";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "uid",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "completion_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "file_path",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "short_prefix",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "completion_text",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "short_suffix",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new da).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new da).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new da).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(da, e, t)
        }
    }
    class Ta extends (null) {
        name = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "example",
            kind: "message",
            T: da
        }, {
            no: 2,
            name: "name",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "time",
            kind: "message",
            T: De
        }]));
        static fromBinary(e, t) {
            return (new Ta).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ta).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ta).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Ta, e, t)
        }
    }
    class fa extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.CciWithSubrange";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cci",
            kind: "message",
            T: Kn
        }, {
            no: 2,
            name: "subrange",
            kind: "message",
            T: pa
        }]));
        static fromBinary(e, t) {
            return (new fa).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new fa).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new fa).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(fa, e, t)
        }
    }
    class pa extends E {
        snippetType = ut.UNSPECIFIED;
        startOffset = A.zero;
        endOffset = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ContextSubrange";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "snippet_type",
            kind: "enum",
            T: ye.getEnumType(ut)
        }, {
            no: 2,
            name: "start_offset",
            kind: "scalar",
            T: 3
        }, {
            no: 3,
            name: "end_offset",
            kind: "scalar",
            T: 3
        }]));
        static fromBinary(e, t) {
            return (new pa).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new pa).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new pa).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(pa, e, t)
        }
    }
    class Sa extends E {
        absolutePathMigrateMeToUri = "";
        absoluteUri = "";
        workspaceRelativePathsMigrateMeToWorkspaceUris = {};
        workspaceUrisToRelativePaths = {};
        numFiles = 0;
        numBytes = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.PathScopeItem";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "absolute_path_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "absolute_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "workspace_relative_paths_migrate_me_to_workspace_uris",
            kind: "map",
            K: 9,
            V: {
                kind: "scalar",
                T: 9
            }
        }, {
            no: 6,
            name: "workspace_uris_to_relative_paths",
            kind: "map",
            K: 9,
            V: {
                kind: "scalar",
                T: 9
            }
        }, {
            no: 3,
            name: "num_files",
            kind: "scalar",
            T: 13
        }, {
            no: 4,
            name: "num_bytes",
            kind: "scalar",
            T: 4
        }]));
        static fromBinary(e, t) {
            return (new Sa).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Sa).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Sa).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Sa, e, t)
        }
    }
    class Na extends E {
        absoluteUri = "";
        startLine = 0;
        endLine = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.FileLineRange";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "absolute_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "start_line",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "end_line",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new Na).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Na).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Na).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Na, e, t)
        }
    }
    class Ca extends E {
        content = "";
        identifier = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.TextBlock";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "content",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "file_line_range",
            kind: "message",
            T: Na,
            oneof: "identifier"
        }, {
            no: 3,
            name: "label",
            kind: "scalar",
            T: 9,
            oneof: "identifier"
        }]));
        static fromBinary(e, t) {
            return (new Ca).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ca).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ca).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ca, e, t)
        }
    }
    class Ia extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.RepositoryScopeItem";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "repo_info",
            kind: "message",
            T: Xn
        }]));
        static fromBinary(e, t) {
            return (new Ia).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ia).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ia).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ia, e, t)
        }
    }
    class ga extends E {
        relativePath = "";
        isDir = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.RepositoryPathScopeItem";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "repo_info",
            kind: "message",
            T: Xn
        }, {
            no: 2,
            name: "relative_path",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "is_dir",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new ga).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ga).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ga).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ga, e, t)
        }
    }
    class Oa extends E {
        documentId = "";
        index = xt.UNSPECIFIED;
        documentType = Lt.UNSPECIFIED;
        displayName = "";
        description = "";
        displaySource = "";
        url = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.KnowledgeBaseScopeItem";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "document_id",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "index",
            kind: "enum",
            T: ye.getEnumType(xt)
        }, {
            no: 8,
            name: "document_type",
            kind: "enum",
            T: ye.getEnumType(Lt)
        }, {
            no: 3,
            name: "display_name",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "description",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "display_source",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "url",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Oa).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Oa).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Oa).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Oa, e, t)
        }
    }
    class Aa extends E {
        timestampStr = "";
        type = "";
        output = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ConsoleLogLine";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "timestamp_str",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "type",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "output",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Aa).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Aa).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Aa).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Aa, e, t)
        }
    }
    class Pa extends E {
        lines = [];
        serverAddress = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ConsoleLogScopeItem";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "lines",
            kind: "message",
            T: Aa,
            repeated: !0
        }, {
            no: 2,
            name: "server_address",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Pa).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Pa).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Pa).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Pa, e, t)
        }
    }
    class La extends E {
        tagName = "";
        outerHtml = "";
        id = "";
        reactComponentName = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.DOMElementScopeItem";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "tag_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "outer_html",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "id",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "react_component_name",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "file_line_range",
            kind: "message",
            T: Na
        }]));
        static fromBinary(e, t) {
            return (new La).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new La).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new La).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(La, e, t)
        }
    }
    class Ra extends E {
        recipeId = "";
        title = "";
        description = "";
        systemPrompt = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.RecipeScopeItem";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "recipe_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "title",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "description",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "system_prompt",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Ra).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ra).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ra).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ra, e, t)
        }
    }
    class ya extends E {
        scopeItem = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ContextScopeItem";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "file",
            kind: "message",
            T: Sa,
            oneof: "scope_item"
        }, {
            no: 2,
            name: "directory",
            kind: "message",
            T: Sa,
            oneof: "scope_item"
        }, {
            no: 3,
            name: "repository",
            kind: "message",
            T: Ia,
            oneof: "scope_item"
        }, {
            no: 4,
            name: "code_context",
            kind: "message",
            T: Kn,
            oneof: "scope_item"
        }, {
            no: 6,
            name: "cci_with_subrange",
            kind: "message",
            T: fa,
            oneof: "scope_item"
        }, {
            no: 7,
            name: "repository_path",
            kind: "message",
            T: ga,
            oneof: "scope_item"
        }, {
            no: 8,
            name: "slack",
            kind: "message",
            T: Oa,
            oneof: "scope_item"
        }, {
            no: 9,
            name: "github",
            kind: "message",
            T: Oa,
            oneof: "scope_item"
        }, {
            no: 10,
            name: "file_line_range",
            kind: "message",
            T: Na,
            oneof: "scope_item"
        }, {
            no: 11,
            name: "text_block",
            kind: "message",
            T: Ca,
            oneof: "scope_item"
        }, {
            no: 12,
            name: "jira",
            kind: "message",
            T: Oa,
            oneof: "scope_item"
        }, {
            no: 13,
            name: "google_drive",
            kind: "message",
            T: Oa,
            oneof: "scope_item"
        }, {
            no: 14,
            name: "console_log",
            kind: "message",
            T: Pa,
            oneof: "scope_item"
        }, {
            no: 15,
            name: "dom_element",
            kind: "message",
            T: La,
            oneof: "scope_item"
        }, {
            no: 16,
            name: "recipe",
            kind: "message",
            T: Ra,
            oneof: "scope_item"
        }]));
        static fromBinary(e, t) {
            return (new ya).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ya).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ya).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ya, e, t)
        }
    }
    class wa extends E {
        items = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ContextScope";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "items",
            kind: "message",
            T: ya,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new wa).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new wa).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new wa).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(wa, e, t)
        }
    }
    class ka extends E {
        nodeName = "";
        graphStateJson = new Uint8Array(0);
        graphStateJsonNumBytes = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.NodeExecutionRecord";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "node_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "start_time",
            kind: "message",
            T: De
        }, {
            no: 3,
            name: "end_time",
            kind: "message",
            T: De
        }, {
            no: 5,
            name: "graph_state_json",
            kind: "scalar",
            T: 12
        }, {
            no: 6,
            name: "graph_state_json_num_bytes",
            kind: "scalar",
            T: 4
        }, {
            no: 4,
            name: "subgraph_execution",
            kind: "message",
            T: Da
        }]));
        static fromBinary(e, t) {
            return (new ka).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ka).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ka).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ka, e, t)
        }
    }
    class Da extends E {
        history = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.GraphExecutionState";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "current",
            kind: "message",
            T: ka
        }, {
            no: 2,
            name: "history",
            kind: "message",
            T: ka,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Da).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Da).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Da).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Da, e, t)
        }
    }
    class Ja extends E {
        items = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.Guideline";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "items",
            kind: "message",
            T: Ma,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Ja).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ja).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ja).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ja, e, t)
        }
    }
    class Ma extends E {
        guideline = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.GuidelineItem";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "guideline",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Ma).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ma).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ma).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ma, e, t)
        }
    }
    class Ua extends E {
        model = be.MODEL_UNSPECIFIED;
        maxInputTokens = 0;
        temperature = 0;
        maxOutputTokens = 0;
        orderSnippetsByFile = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ChatNodeConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "model",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 2,
            name: "max_input_tokens",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "temperature",
            kind: "scalar",
            T: 2
        }, {
            no: 4,
            name: "max_output_tokens",
            kind: "scalar",
            T: 13
        }, {
            no: 5,
            name: "order_snippets_by_file",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Ua).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ua).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ua).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ua, e, t)
        }
    }
    class xa extends E {
        shouldBatchCcis = !1;
        maxTokensPerSubrange = A.zero;
        numParserWorkers = A.zero;
        numWorkersPerDistributedScorer = A.zero;
        verbose = !1;
        ignoreExtensions = [];
        ignoreDirectoryStubs = [];
        minTokenSpaceForContext = 0;
        maxTargetFiles = 0;
        topCciCount = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.MQueryConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "should_batch_ccis",
            kind: "scalar",
            T: 8
        }, {
            no: 2,
            name: "max_tokens_per_subrange",
            kind: "scalar",
            T: 3
        }, {
            no: 3,
            name: "num_parser_workers",
            kind: "scalar",
            T: 3
        }, {
            no: 4,
            name: "num_workers_per_distributed_scorer",
            kind: "scalar",
            T: 3
        }, {
            no: 5,
            name: "verbose",
            kind: "scalar",
            T: 8
        }, {
            no: 6,
            name: "ignore_extensions",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 7,
            name: "ignore_directory_stubs",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 8,
            name: "min_token_space_for_context",
            kind: "scalar",
            T: 13
        }, {
            no: 9,
            name: "max_target_files",
            kind: "scalar",
            T: 13
        }, {
            no: 10,
            name: "top_cci_count",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new xa).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new xa).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new xa).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(xa, e, t)
        }
    }
    class Ba extends E {
        deltaText = "";
        deltaTokens = 0;
        stopReason = Ge.UNSPECIFIED;
        deltaToolCalls = [];
        deltaThinking = "";
        deltaSignature = "";
        thinkingRedacted = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.CompletionDelta";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "delta_text",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "delta_tokens",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "stop_reason",
            kind: "enum",
            T: ye.getEnumType(Ge)
        }, {
            no: 4,
            name: "usage",
            kind: "message",
            T: sr
        }, {
            no: 5,
            name: "delta_tool_calls",
            kind: "message",
            T: ba,
            repeated: !0
        }, {
            no: 6,
            name: "delta_thinking",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "delta_signature",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "thinking_redacted",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Ba).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ba).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ba).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ba, e, t)
        }
    }
    class ha extends (null) {
        deltas = {};
        prompt = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "deltas",
            kind: "map",
            K: 5,
            V: {
                kind: "message",
                T: Ba
            }
        }, {
            no: 2,
            name: "prompt",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new ha).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ha).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ha).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(ha, e, t)
        }
    }
    class Fa extends (null) {
        prompt = "";
        inferenceAddress = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "prompt",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "inference_address",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Fa).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Fa).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Fa).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Fa, e, t)
        }
    }
    class ba extends E {
        id = "";
        name = "";
        argumentsJson = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ChatToolCall";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "name",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "arguments_json",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new ba).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ba).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ba).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ba, e, t)
        }
    }
    class qa extends E {
        level = wt.UNSPECIFIED;
        message = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.Status";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "level",
            kind: "enum",
            T: ye.getEnumType(wt)
        }, {
            no: 2,
            name: "message",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new qa).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new qa).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new qa).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(qa, e, t)
        }
    }
    class Ga extends E {
        row = A.zero;
        col = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.DocumentPosition";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "row",
            kind: "scalar",
            T: 4
        }, {
            no: 2,
            name: "col",
            kind: "scalar",
            T: 4
        }]));
        static fromBinary(e, t) {
            return (new Ga).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ga).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ga).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ga, e, t)
        }
    }
    class Ha extends E {
        startOffset = A.zero;
        endOffset = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.Range";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "start_offset",
            kind: "scalar",
            T: 4
        }, {
            no: 2,
            name: "end_offset",
            kind: "scalar",
            T: 4
        }, {
            no: 3,
            name: "start_position",
            kind: "message",
            T: Ga
        }, {
            no: 4,
            name: "end_position",
            kind: "message",
            T: Ga
        }]));
        static fromBinary(e, t) {
            return (new Ha).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ha).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ha).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ha, e, t)
        }
    }
    class va extends E {
        absolutePathMigrateMeToUri = "";
        absoluteUri = "";
        relativePathMigrateMeToWorkspaceUri = "";
        workspaceUri = "";
        text = "";
        editorLanguage = "";
        language = Ze.UNSPECIFIED;
        cursorOffset = A.zero;
        lineEnding = "";
        isCutoffStart = !1;
        isCutoffEnd = !1;
        linesCutoffStart = 0;
        linesCutoffEnd = 0;
        isDirty = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.Document";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "absolute_path_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 12,
            name: "absolute_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "relative_path_migrate_me_to_workspace_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 13,
            name: "workspace_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "text",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "editor_language",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "language",
            kind: "enum",
            T: ye.getEnumType(Ze)
        }, {
            no: 6,
            name: "cursor_offset",
            kind: "scalar",
            T: 4
        }, {
            no: 8,
            name: "cursor_position",
            kind: "message",
            T: Ga
        }, {
            no: 7,
            name: "line_ending",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "visible_range",
            kind: "message",
            T: Ha
        }, {
            no: 10,
            name: "is_cutoff_start",
            kind: "scalar",
            T: 8
        }, {
            no: 11,
            name: "is_cutoff_end",
            kind: "scalar",
            T: 8
        }, {
            no: 14,
            name: "lines_cutoff_start",
            kind: "scalar",
            T: 5
        }, {
            no: 15,
            name: "lines_cutoff_end",
            kind: "scalar",
            T: 5
        }, {
            no: 16,
            name: "timestamp",
            kind: "message",
            T: De
        }, {
            no: 17,
            name: "is_dirty",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new va).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new va).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new va).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(va, e, t)
        }
    }
    class Va extends (null) {
        otherDocuments = [];
        codeContextItems = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "document",
            kind: "message",
            T: va
        }, {
            no: 2,
            name: "other_documents",
            kind: "message",
            T: va,
            repeated: !0
        }, {
            no: 3,
            name: "code_context_items",
            kind: "message",
            T: Kn,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Va).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Va).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Va).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Va, e, t)
        }
    }
    class Ya extends E {
        chunk = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.TextOrScopeItem";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "text",
            kind: "scalar",
            T: 9,
            oneof: "chunk"
        }, {
            no: 2,
            name: "item",
            kind: "message",
            T: ya,
            oneof: "chunk"
        }]));
        static fromBinary(e, t) {
            return (new Ya).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ya).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ya).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ya, e, t)
        }
    }
    class Xa extends E {
        matchRepoName = "";
        matchPath = "";
        pinnedContexts = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.PinnedContextConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "match_repo_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "match_path",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "pinned_contexts",
            kind: "message",
            T: Ka,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Xa).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Xa).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Xa).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Xa, e, t)
        }
    }
    class Ka extends E {
        contextItem = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.PinnedContext";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "repository_path",
            kind: "message",
            T: Wa,
            oneof: "context_item"
        }]));
        static fromBinary(e, t) {
            return (new Ka).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ka).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ka).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ka, e, t)
        }
    }
    class Wa extends E {
        remoteRepoName = "";
        version = "";
        relativePath = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.RepositoryPath";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "remote_repo_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "version",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "relative_path",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Wa).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Wa).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Wa).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Wa, e, t)
        }
    }
    class za extends (null) {
        pinnedContextConfigs = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "pinned_context_configs",
            kind: "message",
            T: Xa,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new za).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new za).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new za).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(za, e, t)
        }
    }
    class ja extends E {
        id = "";
        prompt = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.Rule";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "prompt",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new ja).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ja).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ja).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ja, e, t)
        }
    }
    class Qa extends (null) {
        id = "";
        startLine = 0;
        endLine = 0;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "rule",
            kind: "message",
            T: ja
        }, {
            no: 3,
            name: "start_line",
            kind: "scalar",
            T: 5
        }, {
            no: 4,
            name: "end_line",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new Qa).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Qa).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Qa).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Qa, e, t)
        }
    }
    class $a extends E {
        logs = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.LanguageServerDiagnostics";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "logs",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new $a).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new $a).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new $a).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals($a, e, t)
        }
    }
    class Za extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "database",
            kind: "message",
            T: er
        }]));
        static fromBinary(e, t) {
            return (new Za).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Za).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Za).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Za, e, t)
        }
    }
    class er extends E {
        backend = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.IndexerDbStats";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "local_sqlite_faiss",
            kind: "message",
            T: tr,
            oneof: "backend"
        }, {
            no: 2,
            name: "postgres",
            kind: "message",
            T: ar,
            oneof: "backend"
        }]));
        static fromBinary(e, t) {
            return (new er).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new er).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new er).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(er, e, t)
        }
    }
    class tr extends E {
        faissStateStats = [];
        totalItemCount = A.zero;
        quantized = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.LocalSqliteFaissDbStats";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "faiss_state_stats",
            kind: "message",
            T: nr,
            repeated: !0
        }, {
            no: 2,
            name: "total_item_count",
            kind: "scalar",
            T: 3
        }, {
            no: 3,
            name: "quantized",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new tr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new tr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new tr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(tr, e, t)
        }
    }
    class nr extends E {
        embeddingSource = Xe.UNSPECIFIED;
        workspace = "";
        itemCount = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.FaissStateStats";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "embedding_source",
            kind: "enum",
            T: ye.getEnumType(Xe)
        }, {
            no: 2,
            name: "workspace",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "item_count",
            kind: "scalar",
            T: 3
        }]));
        static fromBinary(e, t) {
            return (new nr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new nr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new nr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(nr, e, t)
        }
    }
    class ar extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.PostgresDbStats";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new ar).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ar).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ar).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ar, e, t)
        }
    }
    class rr extends (null) {
        type = Dt.UNSPECIFIED;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "time",
            kind: "message",
            T: De
        }, {
            no: 2,
            name: "type",
            kind: "enum",
            T: ye.getEnumType(Dt)
        }]));
        static fromBinary(e, t) {
            return (new rr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new rr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new rr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(rr, e, t)
        }
    }
    class sr extends E {
        model = be.MODEL_UNSPECIFIED;
        inputTokens = A.zero;
        outputTokens = A.zero;
        cacheWriteTokens = A.zero;
        cacheReadTokens = A.zero;
        apiProvider = At.API_PROVIDER_UNSPECIFIED;
        messageId = "";
        responseHeader = {};
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ModelUsageStats";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "model",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 2,
            name: "input_tokens",
            kind: "scalar",
            T: 4
        }, {
            no: 3,
            name: "output_tokens",
            kind: "scalar",
            T: 4
        }, {
            no: 4,
            name: "cache_write_tokens",
            kind: "scalar",
            T: 4
        }, {
            no: 5,
            name: "cache_read_tokens",
            kind: "scalar",
            T: 4
        }, {
            no: 6,
            name: "api_provider",
            kind: "enum",
            T: ye.getEnumType(At)
        }, {
            no: 7,
            name: "message_id",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "response_header",
            kind: "map",
            K: 9,
            V: {
                kind: "scalar",
                T: 9
            }
        }]));
        static fromBinary(e, t) {
            return (new sr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new sr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new sr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(sr, e, t)
        }
    }
    class ir extends E {
        reason = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.SuperCompleteFilterReason";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "reason",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new ir).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ir).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ir).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ir, e, t)
        }
    }
    class or extends E {
        message = "";
        severity = "";
        source = "";
        uri = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.CodeDiagnostic";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "range",
            kind: "message",
            T: Ha
        }, {
            no: 2,
            name: "message",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "severity",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "source",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "uri",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "id",
            kind: "scalar",
            T: 9,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new or).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new or).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new or).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(or, e, t)
        }
    }
    class mr extends E {
        overlappedCodeContextItems = [];
        firstElementSuffixOverlap = 0;
        lastElementPrefixOverlap = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.DocumentLinesElement";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "document_query",
            kind: "message",
            T: cr
        }, {
            no: 2,
            name: "overlapped_code_context_items",
            kind: "message",
            T: Kn,
            repeated: !0
        }, {
            no: 3,
            name: "first_element_suffix_overlap",
            kind: "scalar",
            T: 13
        }, {
            no: 4,
            name: "last_element_prefix_overlap",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new mr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new mr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new mr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(mr, e, t)
        }
    }
    class cr extends E {
        text = "";
        cursorOffset = 0;
        startLine = 0;
        endLine = 0;
        useCharacterPosition = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.DocumentQuery";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "text",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "cursor_offset",
            kind: "scalar",
            T: 5
        }, {
            no: 3,
            name: "start_line",
            kind: "scalar",
            T: 13
        }, {
            no: 4,
            name: "end_line",
            kind: "scalar",
            T: 13
        }, {
            no: 5,
            name: "use_character_position",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new cr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new cr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new cr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(cr, e, t)
        }
    }
    class ur extends E {
        element = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.DocumentOutlineElement";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "code_context_item",
            kind: "message",
            T: Kn,
            oneof: "element"
        }, {
            no: 2,
            name: "document_lines_element",
            kind: "message",
            T: mr,
            oneof: "element"
        }, {
            no: 3,
            name: "text",
            kind: "scalar",
            T: 9,
            oneof: "element"
        }]));
        static fromBinary(e, t) {
            return (new ur).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ur).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ur).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ur, e, t)
        }
    }
    class lr extends E {
        elements = [];
        startIndex = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.DocumentOutline";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "elements",
            kind: "message",
            T: ur,
            repeated: !0
        }, {
            no: 2,
            name: "start_index",
            kind: "scalar",
            T: 3
        }]));
        static fromBinary(e, t) {
            return (new lr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new lr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new lr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(lr, e, t)
        }
    }
    class _r extends (null) {
        eventName = "";
        apiKey = "";
        installationId = "";
        ideName = "";
        os = "";
        codeiumVersion = "";
        ideVersion = "";
        durationMs = protoInt64.zero;
        extra = {};
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "event_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "api_key",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "installation_id",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "ide_name",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "os",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "codeium_version",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "ide_version",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "duration_ms",
            kind: "scalar",
            T: 4
        }, {
            no: 9,
            name: "extra",
            kind: "map",
            K: 9,
            V: {
                kind: "scalar",
                T: 9
            }
        }]));
        static fromBinary(e, t) {
            return (new _r).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new _r).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new _r).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(_r, e, t)
        }
    }
    class Er extends E {
        id = "";
        name = "";
        description = "";
        codebaseRootUri = "";
        fileNames = [];
        commitMessages = [];
        commitSha = [];
        commitDescriptions = [];
        fileDescriptions = [];
        intent = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.CodebaseCluster";
        static fields = ye.util.newFieldList(( () => [{
            no: 5,
            name: "id",
            kind: "scalar",
            T: 9
        }, {
            no: 1,
            name: "name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "description",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "codebase_root_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "file_names",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 4,
            name: "commit_messages",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 7,
            name: "commit_sha",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 8,
            name: "commit_descriptions",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 9,
            name: "file_descriptions",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 10,
            name: "intent",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Er).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Er).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Er).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Er, e, t)
        }
    }
    class dr extends (null) {
        clusters = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "clusters",
            kind: "message",
            T: Er,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new dr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new dr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new dr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(dr, e, t)
        }
    }
    class Tr extends E {
        chunkType = {
            case: void 0
        };
        position = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.KnowledgeBaseChunk";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "text",
            kind: "scalar",
            T: 9,
            oneof: "chunk_type"
        }, {
            no: 3,
            name: "markdown_chunk",
            kind: "message",
            T: Cr,
            oneof: "chunk_type"
        }, {
            no: 2,
            name: "position",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new Tr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Tr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Tr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Tr, e, t)
        }
    }
    class fr extends E {
        documentId = "";
        url = "";
        title = "";
        chunks = [];
        summary = "";
        text = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.KnowledgeBaseItem";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "document_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "url",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "title",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "timestamp",
            kind: "message",
            T: De
        }, {
            no: 6,
            name: "chunks",
            kind: "message",
            T: Tr,
            repeated: !0
        }, {
            no: 7,
            name: "summary",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "text",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new fr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new fr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new fr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(fr, e, t)
        }
    }
    class pr extends E {
        score = 0;
        indexName = "";
        documentSourceName = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.KnowledgeBaseItemWithMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "knowledge_base_item",
            kind: "message",
            T: fr
        }, {
            no: 2,
            name: "score",
            kind: "scalar",
            T: 2
        }, {
            no: 3,
            name: "index_name",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "document_source_name",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new pr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new pr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new pr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(pr, e, t)
        }
    }
    class Sr extends E {
        description = "";
        children = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.KnowledgeBaseGroup";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "description",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "item",
            kind: "message",
            T: pr
        }, {
            no: 3,
            name: "children",
            kind: "message",
            T: Sr,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Sr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Sr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Sr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Sr, e, t)
        }
    }
    class Nr extends E {
        base64Data = "";
        mimeType = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.ImageData";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "base64_data",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "mime_type",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Nr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Nr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Nr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Nr, e, t)
        }
    }
    class Cr extends E {
        headers = [];
        text = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.MarkdownChunk";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "headers",
            kind: "message",
            T: Ir,
            repeated: !0
        }, {
            no: 2,
            name: "text",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Cr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Cr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Cr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Cr, e, t)
        }
    }
    class Ir extends E {
        type = Bt.UNSPECIFIED;
        text = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.MarkdownChunk.MarkdownHeader";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "type",
            kind: "enum",
            T: ye.getEnumType(Bt)
        }, {
            no: 2,
            name: "text",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Ir).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ir).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ir).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ir, e, t)
        }
    }
    class gr extends E {
        terminalId = "";
        shellPid = 0;
        commandLine = "";
        cwd = "";
        source = ht.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.TerminalShellCommandHeader";
        static fields = ye.util.newFieldList(( () => [{
            no: 7,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 1,
            name: "terminal_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "shell_pid",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "command_line",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "cwd",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "start_time",
            kind: "message",
            T: De
        }, {
            no: 6,
            name: "source",
            kind: "enum",
            T: ye.getEnumType(ht)
        }]));
        static fromBinary(e, t) {
            return (new gr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new gr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new gr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(gr, e, t)
        }
    }
    class Or extends E {
        rawData = new Uint8Array(0);
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.TerminalShellCommandData";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "raw_data",
            kind: "scalar",
            T: 12
        }]));
        static fromBinary(e, t) {
            return (new Or).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Or).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Or).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Or, e, t)
        }
    }
    class Ar extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.TerminalShellCommandTrailer";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "exit_code",
            kind: "scalar",
            T: 5,
            opt: !0
        }, {
            no: 2,
            name: "end_time",
            kind: "message",
            T: De
        }]));
        static fromBinary(e, t) {
            return (new Ar).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ar).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ar).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ar, e, t)
        }
    }
    class Pr extends E {
        value = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.TerminalShellCommandStreamChunk";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "header",
            kind: "message",
            T: gr,
            oneof: "value"
        }, {
            no: 2,
            name: "data",
            kind: "message",
            T: Or,
            oneof: "value"
        }, {
            no: 3,
            name: "trailer",
            kind: "message",
            T: Ar,
            oneof: "value"
        }]));
        static fromBinary(e, t) {
            return (new Pr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Pr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Pr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Pr, e, t)
        }
    }
    class Lr extends (null) {
        shellPid = 0;
        commandLine = "";
        cwd = "";
        output = new Uint8Array(0);
        status = Ft.UNSPECIFIED;
        source = ht.UNSPECIFIED;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "shell_pid",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "command_line",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "cwd",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "output",
            kind: "scalar",
            T: 12
        }, {
            no: 5,
            name: "exit_code",
            kind: "scalar",
            T: 5,
            opt: !0
        }, {
            no: 6,
            name: "start_time",
            kind: "message",
            T: De
        }, {
            no: 7,
            name: "end_time",
            kind: "message",
            T: De
        }, {
            no: 8,
            name: "status",
            kind: "enum",
            T: ye.getEnumType(Ft)
        }, {
            no: 9,
            name: "source",
            kind: "enum",
            T: ye.getEnumType(ht)
        }]));
        static fromBinary(e, t) {
            return (new Lr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Lr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Lr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Lr, e, t)
        }
    }
    class Rr extends E {
        terminalId = "";
        platform = "";
        cwd = "";
        shellName = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.TerminalCommandData";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "terminal_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "platform",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "cwd",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "shell_name",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Rr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Rr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Rr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Rr, e, t)
        }
    }
    class yr extends E {
        windsurfDeploymentId = "";
        authUid = "";
        deploymentProvider = qt.UNSPECIFIED;
        providerDeploymentId = "";
        projectId = "";
        projectName = "";
        workspacePath = "";
        domain = "";
        subdomainName = "";
        deploymentUrl = "";
        buildStatusUrl = "";
        projectUrl = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.WindsurfDeployment";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "windsurf_deployment_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "auth_uid",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "deployment_provider",
            kind: "enum",
            T: ye.getEnumType(qt)
        }, {
            no: 14,
            name: "provider_deployment_id",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "project_id",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "project_name",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "workspace_path",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "created_at",
            kind: "message",
            T: De
        }, {
            no: 8,
            name: "updated_at",
            kind: "message",
            T: De
        }, {
            no: 16,
            name: "domain",
            kind: "scalar",
            T: 9
        }, {
            no: 17,
            name: "subdomain_name",
            kind: "scalar",
            T: 9
        }, {
            no: 11,
            name: "expires_at",
            kind: "message",
            T: De
        }, {
            no: 18,
            name: "pauses_at",
            kind: "message",
            T: De
        }, {
            no: 12,
            name: "deployment_url",
            kind: "scalar",
            T: 9
        }, {
            no: 15,
            name: "claimed_at",
            kind: "message",
            T: De
        }, {
            no: 13,
            name: "deprovisioned_at",
            kind: "message",
            T: De
        }, {
            no: 9,
            name: "build_status_url",
            kind: "scalar",
            T: 9
        }, {
            no: 10,
            name: "project_url",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new yr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new yr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new yr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(yr, e, t)
        }
    }
    class wr extends E {
        label = "";
        value = {
            case: void 0
        };
        synonyms = [];
        isFeatured = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.WebDocsOption";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "label",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "docs_url",
            kind: "scalar",
            T: 9,
            oneof: "value"
        }, {
            no: 3,
            name: "docs_search_domain",
            kind: "scalar",
            T: 9,
            oneof: "value"
        }, {
            no: 4,
            name: "synonyms",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 5,
            name: "is_featured",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new wr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new wr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new wr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(wr, e, t)
        }
    }
    class kr extends E {
        teamId = "";
        userPromptCreditCap = 0;
        userFlowCreditCap = 0;
        autoProvisionCascadeSeat = !1;
        allowMcpServers = !1;
        allowAutoRunCommands = !1;
        allowCustomRecipes = !1;
        maxUnclaimedSites = 0;
        allowAppDeployments = !1;
        maxNewSitesPerDay = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.TeamConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "team_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "user_prompt_credit_cap",
            kind: "scalar",
            T: 5
        }, {
            no: 3,
            name: "user_flow_credit_cap",
            kind: "scalar",
            T: 5
        }, {
            no: 4,
            name: "auto_provision_cascade_seat",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "allow_mcp_servers",
            kind: "scalar",
            T: 8
        }, {
            no: 7,
            name: "allow_auto_run_commands",
            kind: "scalar",
            T: 8
        }, {
            no: 8,
            name: "allow_custom_recipes",
            kind: "scalar",
            T: 8
        }, {
            no: 9,
            name: "max_unclaimed_sites",
            kind: "scalar",
            T: 5
        }, {
            no: 10,
            name: "allow_app_deployments",
            kind: "scalar",
            T: 8
        }, {
            no: 11,
            name: "max_new_sites_per_day",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new kr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new kr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new kr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(kr, e, t)
        }
    }
    class Dr extends E {
        projectId = "";
        framework = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.WebAppDeploymentConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "project_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "framework",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Dr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Dr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Dr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Dr, e, t)
        }
    }
    class Jr extends E {
        title = "";
        id = "";
        link = "";
        description = "";
        commands = {};
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.McpServerTemplate";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "title",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "link",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "description",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "commands",
            kind: "map",
            K: 9,
            V: {
                kind: "message",
                T: Mr
            }
        }]));
        static fromBinary(e, t) {
            return (new Jr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Jr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Jr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Jr, e, t)
        }
    }
    class Mr extends E {
        variables = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.McpServerCommand";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "template",
            kind: "message",
            T: Ur
        }, {
            no: 2,
            name: "variables",
            kind: "message",
            T: xr,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Mr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Mr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Mr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Mr, e, t)
        }
    }
    class Ur extends E {
        command = "";
        args = [];
        env = {};
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.McpCommandTemplate";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "command",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "args",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 3,
            name: "env",
            kind: "map",
            K: 9,
            V: {
                kind: "scalar",
                T: 9
            }
        }]));
        static fromBinary(e, t) {
            return (new Ur).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ur).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ur).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ur, e, t)
        }
    }
    class xr extends E {
        name = "";
        title = "";
        description = "";
        link = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.McpCommandVariable";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "title",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "description",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "link",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new xr).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new xr).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new xr).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(xr, e, t)
        }
    }
    class Br extends E {
        userId = "";
        sessionId = "";
        properties = {};
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.codeium_common_pb.UnleashContext";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "user_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "session_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "properties",
            kind: "map",
            K: 9,
            V: {
                kind: "scalar",
                T: 9
            }
        }]));
        static fromBinary(e, t) {
            return (new Br).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Br).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Br).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Br, e, t)
        }
    }
    const hr = new Map([["text/x-csrc", Ze.C], ["text/x-c++src", Ze.CPP], ["text/x-csharp", Ze.CSHARP], ["text/x-java", Ze.JAVA], ["text/x-kotlin", Ze.KOTLIN], ["text/x-objectivec", Ze.OBJECTIVEC], ["text/x-objectivec++", Ze.OBJECTIVECPP], ["text/x-scala", Ze.SCALA], ["text/css", Ze.CSS], ["text/x-less", Ze.LESS], ["text/x-sass", Ze.SASS], ["text/x-scss", Ze.SCSS], ["application/json", Ze.JSON], ["application/x-json", Ze.JSON], ["application/ld+json", Ze.JSON], ["application/typescript", Ze.TYPESCRIPT], ["text/jsx", Ze.JAVASCRIPT], ["text/typescript-jsx", Ze.TSX], ["text/x-ocaml", Ze.OCAML], ["text/x-ipython", Ze.PYTHON]])
      , Fr = new Map([["clojure", Ze.CLOJURE], ["coffeescript", Ze.COFFEESCRIPT], ["python", Ze.PYTHON], ["sql", Ze.SQL], ["dart", Ze.DART], ["gfm", Ze.MARKDOWN], ["go", Ze.GO], ["groovy", Ze.GROOVY], ["haskell", Ze.HASKELL], ["haskell-literate", Ze.HASKELL], ["htmlmixed", Ze.HTML], ["javascript", Ze.JAVASCRIPT], ["julia", Ze.JULIA], ["lua", Ze.LUA], ["markdown", Ze.MARKDOWN], ["perl", Ze.PERL], ["php", Ze.PHP], ["null", Ze.PLAINTEXT], ["protobuf", Ze.PROTOBUF], ["r", Ze.R], ["rst", Ze.RST], ["ruby", Ze.RUBY], ["rust", Ze.RUST], ["shell", Ze.SHELL], ["swift", Ze.SWIFT], ["stex", Ze.LATEX], ["toml", Ze.TOML], ["vue", Ze.VUE], ["xml", Ze.XML], ["yaml", Ze.YAML], ["ipython", Ze.PYTHON], ["ipythongfm", Ze.MARKDOWN]])
      , br = new Map([[/^BUILD$/, Ze.STARLARK], [/^.+\.bzl$/, Ze.STARLARK]]);
    function qr(e) {
        return void 0 !== e.getMode() ? e.getMode() : e.modeOption
    }
    function Gr(e, t) {
        if (void 0 !== t) {
            const e = t.split("/").pop() ?? "";
            for (const [t,n] of br)
                if (t.test(e))
                    return n
        }
        const n = e.getEditor()?.getOption("mode") ?? e.modeOption;
        if ("string" == typeof n) {
            const e = hr.get(n);
            if (void 0 !== e)
                return e
        }
        return Fr.get(qr(e).name) ?? Ze.UNSPECIFIED
    }
    const Hr = {
        randomUUID: "undefined" != typeof crypto && crypto.randomUUID && crypto.randomUUID.bind(crypto)
    };
    let vr;
    const Vr = new Uint8Array(16);
    function Yr() {
        if (!vr && (vr = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto),
        !vr))
            throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
        return vr(Vr)
    }
    const Xr = [];
    for (let e = 0; e < 256; ++e)
        Xr.push((e + 256).toString(16).slice(1));
    const Kr = function(e, t, n) {
        if (Hr.randomUUID && !t && !e)
            return Hr.randomUUID();
        const a = (e = e || {}).random || (e.rng || Yr)();
        if (a[6] = 15 & a[6] | 64,
        a[8] = 63 & a[8] | 128,
        t) {
            n = n || 0;
            for (let e = 0; e < 16; ++e)
                t[n + e] = a[e];
            return t
        }
        return function(e, t=0) {
            return (Xr[e[t + 0]] + Xr[e[t + 1]] + Xr[e[t + 2]] + Xr[e[t + 3]] + "-" + Xr[e[t + 4]] + Xr[e[t + 5]] + "-" + Xr[e[t + 6]] + Xr[e[t + 7]] + "-" + Xr[e[t + 8]] + Xr[e[t + 9]] + "-" + Xr[e[t + 10]] + Xr[e[t + 11]] + Xr[e[t + 12]] + Xr[e[t + 13]] + Xr[e[t + 14]] + Xr[e[t + 15]]).toLowerCase()
        }(a)
    };
    let Wr, zr, jr, Qr, $r, Zr, es, ts, ns, as, rs, ss, is, os, ms, cs, us, ls, _s, Es, ds, Ts, fs, ps, Ss, Ns, Cs, Is, gs, Os, As, Ps, Ls, Rs, ys, ws, ks, Ds, Js, Ms, Us, xs, Bs, hs, Fs, bs, qs, Gs, Hs, vs, Vs, Ys, Xs, Ks, Ws, zs;
    [/https:\/\/colab.research\.google\.com\/.*/, /https:\/\/(.*\.)?stackblitz\.com\/.*/, /https:\/\/(.*\.)?deepnote\.com\/.*/, /https:\/\/(.*\.)?(databricks\.com|azuredatabricks\.net)\/.*/, /https:\/\/(.*\.)?quadratichq\.com\/.*/, /https?:\/\/(.*\.)?jsfiddle\.net(\/.*)?/, /https:\/\/(.*\.)?codepen\.io(\/.*)?/, /https:\/\/(.*\.)?codeshare\.io(\/.*)?/, /https:\/\/console\.paperspace\.com\/.*\/notebook\/.*/, /https?:\/\/www\.codewars\.com(\/.*)?/, /https:\/\/(.*\.)?github\.com(\/.*)?/, /http:\/\/(localhost|127\.0\.0\.1):[0-9]+\/.*\.ipynb/, /https:\/\/(.*\.)?script.google.com(\/.*)?/].map((e => e.source)),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.INSERT = 1] = "INSERT",
        e[e.DELETE = 2] = "DELETE",
        e[e.UNCHANGED = 3] = "UNCHANGED"
    }(Wr || (Wr = {})),
    ye.util.setEnumType(Wr, "exa.diff_action_pb.UnifiedDiffLineType", [{
        no: 0,
        name: "UNIFIED_DIFF_LINE_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "UNIFIED_DIFF_LINE_TYPE_INSERT"
    }, {
        no: 2,
        name: "UNIFIED_DIFF_LINE_TYPE_DELETE"
    }, {
        no: 3,
        name: "UNIFIED_DIFF_LINE_TYPE_UNCHANGED"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.INSERT = 1] = "INSERT",
        e[e.DELETE = 2] = "DELETE",
        e[e.UNCHANGED = 3] = "UNCHANGED"
    }(zr || (zr = {})),
    ye.util.setEnumType(zr, "exa.diff_action_pb.DiffChangeType", [{
        no: 0,
        name: "DIFF_CHANGE_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "DIFF_CHANGE_TYPE_INSERT"
    }, {
        no: 2,
        name: "DIFF_CHANGE_TYPE_DELETE"
    }, {
        no: 3,
        name: "DIFF_CHANGE_TYPE_UNCHANGED"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.UNIFIED = 1] = "UNIFIED",
        e[e.CHARACTER = 2] = "CHARACTER",
        e[e.COMBO = 3] = "COMBO",
        e[e.TMP_SUPERCOMPLETE = 4] = "TMP_SUPERCOMPLETE",
        e[e.TMP_TAB_JUMP = 5] = "TMP_TAB_JUMP"
    }(jr || (jr = {})),
    ye.util.setEnumType(jr, "exa.diff_action_pb.DiffType", [{
        no: 0,
        name: "DIFF_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "DIFF_TYPE_UNIFIED"
    }, {
        no: 2,
        name: "DIFF_TYPE_CHARACTER"
    }, {
        no: 3,
        name: "DIFF_TYPE_COMBO"
    }, {
        no: 4,
        name: "DIFF_TYPE_TMP_SUPERCOMPLETE"
    }, {
        no: 5,
        name: "DIFF_TYPE_TMP_TAB_JUMP"
    }]);
    class js extends E {
        lines = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.diff_action_pb.UnifiedDiff";
        static fields = ye.util.newFieldList(( () => [{
            no: 3,
            name: "lines",
            kind: "message",
            T: Qs,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new js).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new js).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new js).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(js, e, t)
        }
    }
    class Qs extends E {
        text = "";
        type = Wr.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.diff_action_pb.UnifiedDiff.UnifiedDiffLine";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "text",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "type",
            kind: "enum",
            T: ye.getEnumType(Wr)
        }]));
        static fromBinary(e, t) {
            return (new Qs).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Qs).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Qs).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Qs, e, t)
        }
    }
    class $s extends E {
        startLine = 0;
        endLine = 0;
        fromLanguage = Ze.UNSPECIFIED;
        toLanguage = Ze.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.diff_action_pb.DiffBlock";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "start_line",
            kind: "scalar",
            T: 5
        }, {
            no: 2,
            name: "end_line",
            kind: "scalar",
            T: 5
        }, {
            no: 3,
            name: "unified_diff",
            kind: "message",
            T: js
        }, {
            no: 4,
            name: "from_language",
            kind: "enum",
            T: ye.getEnumType(Ze)
        }, {
            no: 5,
            name: "to_language",
            kind: "enum",
            T: ye.getEnumType(Ze)
        }]));
        static fromBinary(e, t) {
            return (new $s).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new $s).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new $s).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals($s, e, t)
        }
    }
    class Zs extends E {
        text = "";
        type = zr.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.diff_action_pb.CharacterDiffChange";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "text",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "type",
            kind: "enum",
            T: ye.getEnumType(zr)
        }]));
        static fromBinary(e, t) {
            return (new Zs).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Zs).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Zs).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Zs, e, t)
        }
    }
    class ei extends E {
        changes = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.diff_action_pb.CharacterDiff";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "changes",
            kind: "message",
            T: Zs,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new ei).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ei).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ei).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ei, e, t)
        }
    }
    class ti extends E {
        text = "";
        type = zr.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.diff_action_pb.ComboDiffLine";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "text",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "type",
            kind: "enum",
            T: ye.getEnumType(zr)
        }, {
            no: 3,
            name: "character_diff",
            kind: "message",
            T: ei
        }]));
        static fromBinary(e, t) {
            return (new ti).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ti).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ti).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ti, e, t)
        }
    }
    class ni extends E {
        lines = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.diff_action_pb.ComboDiff";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "lines",
            kind: "message",
            T: ti,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new ni).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ni).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ni).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ni, e, t)
        }
    }
    class ai extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "unified_diff",
            kind: "message",
            T: js
        }, {
            no: 2,
            name: "character_diff",
            kind: "message",
            T: ei
        }, {
            no: 3,
            name: "combo_diff",
            kind: "message",
            T: ni
        }]));
        static fromBinary(e, t) {
            return (new ai).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ai).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ai).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(ai, e, t)
        }
    }
    class ri extends E {
        diffs = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.diff_action_pb.DiffList";
        static fields = ye.util.newFieldList(( () => [{
            no: 2,
            name: "diffs",
            kind: "message",
            T: $s,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new ri).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ri).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ri).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ri, e, t)
        }
    }
    !function(e) {
        e[e.FEEDBACK_TYPE_UNSPECIFIED = 0] = "FEEDBACK_TYPE_UNSPECIFIED",
        e[e.FEEDBACK_TYPE_ACCEPT = 1] = "FEEDBACK_TYPE_ACCEPT",
        e[e.FEEDBACK_TYPE_REJECT = 2] = "FEEDBACK_TYPE_REJECT",
        e[e.FEEDBACK_TYPE_COPIED = 3] = "FEEDBACK_TYPE_COPIED",
        e[e.FEEDBACK_TYPE_ACCEPT_DIFF = 4] = "FEEDBACK_TYPE_ACCEPT_DIFF",
        e[e.FEEDBACK_TYPE_REJECT_DIFF = 5] = "FEEDBACK_TYPE_REJECT_DIFF",
        e[e.FEEDBACK_TYPE_APPLY_DIFF = 6] = "FEEDBACK_TYPE_APPLY_DIFF",
        e[e.FEEDBACK_TYPE_INSERT_AT_CURSOR = 7] = "FEEDBACK_TYPE_INSERT_AT_CURSOR"
    }(Qr || (Qr = {})),
    ye.util.setEnumType(Qr, "exa.chat_pb.ChatFeedbackType", [{
        no: 0,
        name: "FEEDBACK_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "FEEDBACK_TYPE_ACCEPT"
    }, {
        no: 2,
        name: "FEEDBACK_TYPE_REJECT"
    }, {
        no: 3,
        name: "FEEDBACK_TYPE_COPIED"
    }, {
        no: 4,
        name: "FEEDBACK_TYPE_ACCEPT_DIFF"
    }, {
        no: 5,
        name: "FEEDBACK_TYPE_REJECT_DIFF"
    }, {
        no: 6,
        name: "FEEDBACK_TYPE_APPLY_DIFF"
    }, {
        no: 7,
        name: "FEEDBACK_TYPE_INSERT_AT_CURSOR"
    }]),
    function(e) {
        e[e.CHAT_INTENT_UNSPECIFIED = 0] = "CHAT_INTENT_UNSPECIFIED",
        e[e.CHAT_INTENT_GENERIC = 1] = "CHAT_INTENT_GENERIC",
        e[e.CHAT_INTENT_FUNCTION_EXPLAIN = 2] = "CHAT_INTENT_FUNCTION_EXPLAIN",
        e[e.CHAT_INTENT_FUNCTION_DOCSTRING = 3] = "CHAT_INTENT_FUNCTION_DOCSTRING",
        e[e.CHAT_INTENT_FUNCTION_REFACTOR = 4] = "CHAT_INTENT_FUNCTION_REFACTOR",
        e[e.CHAT_INTENT_CODE_BLOCK_EXPLAIN = 5] = "CHAT_INTENT_CODE_BLOCK_EXPLAIN",
        e[e.CHAT_INTENT_CODE_BLOCK_REFACTOR = 6] = "CHAT_INTENT_CODE_BLOCK_REFACTOR",
        e[e.CHAT_INTENT_FUNCTION_UNIT_TESTS = 7] = "CHAT_INTENT_FUNCTION_UNIT_TESTS",
        e[e.CHAT_INTENT_PROBLEM_EXPLAIN = 8] = "CHAT_INTENT_PROBLEM_EXPLAIN",
        e[e.CHAT_INTENT_GENERATE_CODE = 9] = "CHAT_INTENT_GENERATE_CODE",
        e[e.CHAT_INTENT_CLASS_EXPLAIN = 10] = "CHAT_INTENT_CLASS_EXPLAIN",
        e[e.CHAT_INTENT_SEARCH = 11] = "CHAT_INTENT_SEARCH",
        e[e.CHAT_INTENT_FAST_APPLY = 12] = "CHAT_INTENT_FAST_APPLY"
    }($r || ($r = {})),
    ye.util.setEnumType($r, "exa.chat_pb.ChatIntentType", [{
        no: 0,
        name: "CHAT_INTENT_UNSPECIFIED"
    }, {
        no: 1,
        name: "CHAT_INTENT_GENERIC"
    }, {
        no: 2,
        name: "CHAT_INTENT_FUNCTION_EXPLAIN"
    }, {
        no: 3,
        name: "CHAT_INTENT_FUNCTION_DOCSTRING"
    }, {
        no: 4,
        name: "CHAT_INTENT_FUNCTION_REFACTOR"
    }, {
        no: 5,
        name: "CHAT_INTENT_CODE_BLOCK_EXPLAIN"
    }, {
        no: 6,
        name: "CHAT_INTENT_CODE_BLOCK_REFACTOR"
    }, {
        no: 7,
        name: "CHAT_INTENT_FUNCTION_UNIT_TESTS"
    }, {
        no: 8,
        name: "CHAT_INTENT_PROBLEM_EXPLAIN"
    }, {
        no: 9,
        name: "CHAT_INTENT_GENERATE_CODE"
    }, {
        no: 10,
        name: "CHAT_INTENT_CLASS_EXPLAIN"
    }, {
        no: 11,
        name: "CHAT_INTENT_SEARCH"
    }, {
        no: 12,
        name: "CHAT_INTENT_FAST_APPLY"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.EPHEMERAL = 1] = "EPHEMERAL"
    }(Zr || (Zr = {})),
    ye.util.setEnumType(Zr, "exa.chat_pb.CacheControlType", [{
        no: 0,
        name: "CACHE_CONTROL_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CACHE_CONTROL_TYPE_EPHEMERAL"
    }]);
    class si extends E {
        rawSource = "";
        startLine = 0;
        startCol = 0;
        endLine = 0;
        endCol = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.CodeBlockInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "raw_source",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "start_line",
            kind: "scalar",
            T: 5
        }, {
            no: 3,
            name: "start_col",
            kind: "scalar",
            T: 5
        }, {
            no: 4,
            name: "end_line",
            kind: "scalar",
            T: 5
        }, {
            no: 5,
            name: "end_col",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new si).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new si).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new si).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(si, e, t)
        }
    }
    class ii extends E {
        responseStreamLatencyMs = A.zero;
        refreshContextLatencyMs = A.zero;
        shouldGetLocalContextForChatLatencyMs = A.zero;
        shouldGetLocalContextForChat = !1;
        computeChangeEventsLatencyMs = A.zero;
        contextToChatPromptLatencyMs = A.zero;
        numPromptTokens = 0;
        numSystemPromptTokens = 0;
        numInputTokens = A.zero;
        activeDocumentAbsolutePath = "";
        numIndexedFiles = A.zero;
        numIndexedCodeContextItems = A.zero;
        model = be.MODEL_UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.ChatMetrics";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "response_stream_latency_ms",
            kind: "scalar",
            T: 4
        }, {
            no: 2,
            name: "refresh_context_latency_ms",
            kind: "scalar",
            T: 4
        }, {
            no: 3,
            name: "should_get_local_context_for_chat_latency_ms",
            kind: "scalar",
            T: 4
        }, {
            no: 4,
            name: "should_get_local_context_for_chat",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "compute_change_events_latency_ms",
            kind: "scalar",
            T: 4
        }, {
            no: 6,
            name: "context_to_chat_prompt_latency_ms",
            kind: "scalar",
            T: 4
        }, {
            no: 7,
            name: "num_prompt_tokens",
            kind: "scalar",
            T: 5
        }, {
            no: 8,
            name: "num_system_prompt_tokens",
            kind: "scalar",
            T: 5
        }, {
            no: 16,
            name: "num_input_tokens",
            kind: "scalar",
            T: 4
        }, {
            no: 9,
            name: "start_timestamp",
            kind: "message",
            T: De
        }, {
            no: 10,
            name: "end_timestamp",
            kind: "message",
            T: De
        }, {
            no: 11,
            name: "active_document_absolute_path",
            kind: "scalar",
            T: 9
        }, {
            no: 12,
            name: "last_active_code_context_item",
            kind: "message",
            T: Kn
        }, {
            no: 13,
            name: "num_indexed_files",
            kind: "scalar",
            T: 4
        }, {
            no: 14,
            name: "num_indexed_code_context_items",
            kind: "scalar",
            T: 4
        }, {
            no: 15,
            name: "model",
            kind: "enum",
            T: ye.getEnumType(be)
        }]));
        static fromBinary(e, t) {
            return (new ii).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ii).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ii).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ii, e, t)
        }
    }
    class oi extends E {
        text = "";
        items = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.IntentGeneric";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "text",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "items",
            kind: "message",
            T: Ya,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new oi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new oi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new oi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(oi, e, t)
        }
    }
    class mi extends E {
        language = Ze.UNSPECIFIED;
        filePathMigrateMeToUri = "";
        uri = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.IntentFunctionExplain";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "function_info",
            kind: "message",
            T: hn
        }, {
            no: 2,
            name: "language",
            kind: "enum",
            T: ye.getEnumType(Ze)
        }, {
            no: 3,
            name: "file_path_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "uri",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new mi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new mi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new mi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(mi, e, t)
        }
    }
    class ci extends E {
        language = Ze.UNSPECIFIED;
        filePathMigrateMeToUri = "";
        refactorDescription = "";
        uri = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.IntentFunctionRefactor";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "function_info",
            kind: "message",
            T: hn
        }, {
            no: 2,
            name: "language",
            kind: "enum",
            T: ye.getEnumType(Ze)
        }, {
            no: 3,
            name: "file_path_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "refactor_description",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "uri",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new ci).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ci).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ci).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ci, e, t)
        }
    }
    class ui extends E {
        language = Ze.UNSPECIFIED;
        filePathMigrateMeToUri = "";
        uri = "";
        instructions = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.IntentFunctionUnitTests";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "function_info",
            kind: "message",
            T: hn
        }, {
            no: 2,
            name: "language",
            kind: "enum",
            T: ye.getEnumType(Ze)
        }, {
            no: 3,
            name: "file_path_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "uri",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "instructions",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new ui).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ui).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ui).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ui, e, t)
        }
    }
    class li extends E {
        language = Ze.UNSPECIFIED;
        filePathMigrateMeToUri = "";
        uri = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.IntentFunctionDocstring";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "function_info",
            kind: "message",
            T: hn
        }, {
            no: 2,
            name: "language",
            kind: "enum",
            T: ye.getEnumType(Ze)
        }, {
            no: 3,
            name: "file_path_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "uri",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new li).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new li).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new li).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(li, e, t)
        }
    }
    class _i extends E {
        language = Ze.UNSPECIFIED;
        filePathMigrateMeToUri = "";
        uri = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.IntentClassExplain";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "class_info",
            kind: "message",
            T: Fn
        }, {
            no: 2,
            name: "language",
            kind: "enum",
            T: ye.getEnumType(Ze)
        }, {
            no: 3,
            name: "file_path_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "uri",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new _i).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new _i).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new _i).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(_i, e, t)
        }
    }
    class Ei extends E {
        language = Ze.UNSPECIFIED;
        filePathMigrateMeToUri = "";
        uri = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.IntentCodeBlockExplain";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "code_block_info",
            kind: "message",
            T: si
        }, {
            no: 2,
            name: "language",
            kind: "enum",
            T: ye.getEnumType(Ze)
        }, {
            no: 3,
            name: "file_path_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "uri",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Ei).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ei).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ei).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ei, e, t)
        }
    }
    class di extends E {
        language = Ze.UNSPECIFIED;
        filePathMigrateMeToUri = "";
        uri = "";
        refactorDescription = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.IntentCodeBlockRefactor";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "code_block_info",
            kind: "message",
            T: si
        }, {
            no: 2,
            name: "language",
            kind: "enum",
            T: ye.getEnumType(Ze)
        }, {
            no: 3,
            name: "file_path_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "uri",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "refactor_description",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new di).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new di).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new di).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(di, e, t)
        }
    }
    class Ti extends E {
        diagnosticMessage = "";
        surroundingCodeSnippet = "";
        language = Ze.UNSPECIFIED;
        filePathMigrateMeToUri = "";
        uri = "";
        lineNumber = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.IntentProblemExplain";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "diagnostic_message",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "problematic_code",
            kind: "message",
            T: si
        }, {
            no: 3,
            name: "surrounding_code_snippet",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "language",
            kind: "enum",
            T: ye.getEnumType(Ze)
        }, {
            no: 5,
            name: "file_path_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "uri",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "line_number",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new Ti).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ti).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ti).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ti, e, t)
        }
    }
    class fi extends E {
        instruction = "";
        language = Ze.UNSPECIFIED;
        filePathMigrateMeToUri = "";
        uri = "";
        lineNumber = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.IntentGenerateCode";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "instruction",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "language",
            kind: "enum",
            T: ye.getEnumType(Ze)
        }, {
            no: 3,
            name: "file_path_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "uri",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "line_number",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new fi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new fi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new fi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(fi, e, t)
        }
    }
    class pi extends E {
        query = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.IntentSearch";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "query",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new pi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new pi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new pi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(pi, e, t)
        }
    }
    class Si extends E {
        diffOutline = "";
        language = Ze.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.IntentFastApply";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "diff_outline",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "language",
            kind: "enum",
            T: ye.getEnumType(Ze)
        }, {
            no: 3,
            name: "old_code",
            kind: "message",
            T: si
        }]));
        static fromBinary(e, t) {
            return (new Si).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Si).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Si).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Si, e, t)
        }
    }
    class Ni extends E {
        intent = {
            case: void 0
        };
        numTokens = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.ChatMessageIntent";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "generic",
            kind: "message",
            T: oi,
            oneof: "intent"
        }, {
            no: 2,
            name: "explain_function",
            kind: "message",
            T: mi,
            oneof: "intent"
        }, {
            no: 3,
            name: "function_docstring",
            kind: "message",
            T: li,
            oneof: "intent"
        }, {
            no: 4,
            name: "function_refactor",
            kind: "message",
            T: ci,
            oneof: "intent"
        }, {
            no: 5,
            name: "explain_code_block",
            kind: "message",
            T: Ei,
            oneof: "intent"
        }, {
            no: 6,
            name: "code_block_refactor",
            kind: "message",
            T: di,
            oneof: "intent"
        }, {
            no: 7,
            name: "function_unit_tests",
            kind: "message",
            T: ui,
            oneof: "intent"
        }, {
            no: 8,
            name: "problem_explain",
            kind: "message",
            T: Ti,
            oneof: "intent"
        }, {
            no: 9,
            name: "generate_code",
            kind: "message",
            T: fi,
            oneof: "intent"
        }, {
            no: 10,
            name: "explain_class",
            kind: "message",
            T: _i,
            oneof: "intent"
        }, {
            no: 11,
            name: "search",
            kind: "message",
            T: pi,
            oneof: "intent"
        }, {
            no: 13,
            name: "fast_apply",
            kind: "message",
            T: Si,
            oneof: "intent"
        }, {
            no: 12,
            name: "num_tokens",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new Ni).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ni).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ni).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ni, e, t)
        }
    }
    class Ci extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.ChatMessageActionSearch";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Ci).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ci).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ci).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ci, e, t)
        }
    }
    class Ii extends E {
        filePathMigrateMeToUri = "";
        uri = "";
        language = Ze.UNSPECIFIED;
        textPre = "";
        textPost = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.ChatMessageActionEdit";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "file_path_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "diff",
            kind: "message",
            T: $s
        }, {
            no: 3,
            name: "language",
            kind: "enum",
            T: ye.getEnumType(Ze)
        }, {
            no: 4,
            name: "text_pre",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "text_post",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Ii).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ii).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ii).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ii, e, t)
        }
    }
    class gi extends E {
        text = "";
        displayText = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.ChatMessageActionGeneric";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "text",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "display_text",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new gi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new gi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new gi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(gi, e, t)
        }
    }
    class Oi extends E {
        isLoading = !1;
        isRelevant = !1;
        querySuggestions = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.ChatMessageStatusContextRelevancy";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "is_loading",
            kind: "scalar",
            T: 8
        }, {
            no: 2,
            name: "is_relevant",
            kind: "scalar",
            T: 8
        }, {
            no: 3,
            name: "query_suggestions",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Oi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Oi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Oi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Oi, e, t)
        }
    }
    class Ai extends E {
        status = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.ChatMessageStatus";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "context_relevancy",
            kind: "message",
            T: Oi,
            oneof: "status"
        }]));
        static fromBinary(e, t) {
            return (new Ai).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ai).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ai).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ai, e, t)
        }
    }
    class Pi extends E {
        text = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.ChatMessageError";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "text",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Pi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Pi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Pi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Pi, e, t)
        }
    }
    class Li extends E {
        action = {
            case: void 0
        };
        numTokens = 0;
        contextItems = [];
        latestIntent = $r.CHAT_INTENT_UNSPECIFIED;
        knowledgeBaseItems = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.ChatMessageAction";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "generic",
            kind: "message",
            T: gi,
            oneof: "action"
        }, {
            no: 3,
            name: "edit",
            kind: "message",
            T: Ii,
            oneof: "action"
        }, {
            no: 5,
            name: "search",
            kind: "message",
            T: Ci,
            oneof: "action"
        }, {
            no: 2,
            name: "num_tokens",
            kind: "scalar",
            T: 13
        }, {
            no: 4,
            name: "context_items",
            kind: "message",
            T: Kn,
            repeated: !0
        }, {
            no: 6,
            name: "latest_intent",
            kind: "enum",
            T: ye.getEnumType($r)
        }, {
            no: 7,
            name: "generation_stats",
            kind: "message",
            T: ii
        }, {
            no: 8,
            name: "knowledge_base_items",
            kind: "message",
            T: pr,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Li).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Li).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Li).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Li, e, t)
        }
    }
    class Ri extends E {
        messageId = "";
        source = et.UNSPECIFIED;
        conversationId = "";
        content = {
            case: void 0
        };
        inProgress = !1;
        redact = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.ChatMessage";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "message_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "source",
            kind: "enum",
            T: ye.getEnumType(et)
        }, {
            no: 3,
            name: "timestamp",
            kind: "message",
            T: De
        }, {
            no: 4,
            name: "conversation_id",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "intent",
            kind: "message",
            T: Ni,
            oneof: "content"
        }, {
            no: 6,
            name: "action",
            kind: "message",
            T: Li,
            oneof: "content"
        }, {
            no: 7,
            name: "error",
            kind: "message",
            T: Pi,
            oneof: "content"
        }, {
            no: 8,
            name: "status",
            kind: "message",
            T: Ai,
            oneof: "content"
        }, {
            no: 9,
            name: "in_progress",
            kind: "scalar",
            T: 8
        }, {
            no: 10,
            name: "request",
            kind: "message",
            T: xi
        }, {
            no: 11,
            name: "redact",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Ri).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ri).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ri).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ri, e, t)
        }
    }
    class yi extends (null) {
        messages = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "messages",
            kind: "message",
            T: Ri,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new yi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new yi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new yi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(yi, e, t)
        }
    }
    class wi extends E {
        messageId = "";
        source = et.UNSPECIFIED;
        prompt = "";
        numTokens = 0;
        safeForCodeTelemetry = !1;
        toolCalls = [];
        toolCallId = "";
        toolResultIsError = !1;
        images = [];
        thinking = "";
        signature = "";
        thinkingRedacted = !1;
        promptAnnotationRanges = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.ChatMessagePrompt";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "message_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "source",
            kind: "enum",
            T: ye.getEnumType(et)
        }, {
            no: 3,
            name: "prompt",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "num_tokens",
            kind: "scalar",
            T: 13
        }, {
            no: 5,
            name: "safe_for_code_telemetry",
            kind: "scalar",
            T: 8
        }, {
            no: 6,
            name: "tool_calls",
            kind: "message",
            T: ba,
            repeated: !0
        }, {
            no: 7,
            name: "tool_call_id",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "prompt_cache_options",
            kind: "message",
            T: ki
        }, {
            no: 9,
            name: "tool_result_is_error",
            kind: "scalar",
            T: 8
        }, {
            no: 10,
            name: "images",
            kind: "message",
            T: Nr,
            repeated: !0
        }, {
            no: 11,
            name: "thinking",
            kind: "scalar",
            T: 9
        }, {
            no: 12,
            name: "signature",
            kind: "scalar",
            T: 9
        }, {
            no: 13,
            name: "thinking_redacted",
            kind: "scalar",
            T: 8
        }, {
            no: 14,
            name: "prompt_annotation_ranges",
            kind: "message",
            T: Wt,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new wi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new wi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new wi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(wi, e, t)
        }
    }
    class ki extends E {
        type = Zr.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.PromptCacheOptions";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "type",
            kind: "enum",
            T: ye.getEnumType(Zr)
        }]));
        static fromBinary(e, t) {
            return (new ki).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ki).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ki).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ki, e, t)
        }
    }
    class Di extends E {
        name = "";
        description = "";
        jsonSchemaString = "";
        strict = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.ChatToolDefinition";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "description",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "json_schema_string",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "strict",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Di).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Di).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Di).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Di, e, t)
        }
    }
    class Ji extends E {
        choice = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.ChatToolChoice";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "option_name",
            kind: "scalar",
            T: 9,
            oneof: "choice"
        }, {
            no: 2,
            name: "tool_name",
            kind: "scalar",
            T: 9,
            oneof: "choice"
        }]));
        static fromBinary(e, t) {
            return (new Ji).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ji).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ji).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ji, e, t)
        }
    }
    class Mi extends (null) {
        query = "";
        allowedTypes = [];
        includeRepoInfo = !1;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "query",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "allowed_types",
            kind: "enum",
            T: ye.getEnumType(mt),
            repeated: !0
        }, {
            no: 3,
            name: "include_repo_info",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Mi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Mi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Mi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Mi, e, t)
        }
    }
    class Ui extends (null) {
        cciItems = [];
        repoInfos = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cci_items",
            kind: "message",
            T: Kn,
            repeated: !0
        }, {
            no: 2,
            name: "repo_infos",
            kind: "message",
            T: Xn,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Ui).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ui).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ui).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Ui, e, t)
        }
    }
    class xi extends E {
        chatMessages = [];
        openDocumentUris = [];
        workspaceUris = [];
        activeSelection = "";
        contextInclusionType = Et.UNSPECIFIED;
        chatModel = be.MODEL_UNSPECIFIED;
        systemPromptOverride = "";
        chatModelName = "";
        openDocumentPathsMigrateMeToUris = [];
        workspacePathsMigrateMeToUris = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.GetChatMessageRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 3,
            name: "chat_messages",
            kind: "message",
            T: Ri,
            repeated: !0
        }, {
            no: 5,
            name: "active_document",
            kind: "message",
            T: va
        }, {
            no: 12,
            name: "open_document_uris",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 13,
            name: "workspace_uris",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 11,
            name: "active_selection",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "context_inclusion_type",
            kind: "enum",
            T: ye.getEnumType(Et)
        }, {
            no: 9,
            name: "chat_model",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 10,
            name: "system_prompt_override",
            kind: "scalar",
            T: 9
        }, {
            no: 14,
            name: "chat_model_name",
            kind: "scalar",
            T: 9
        }, {
            no: 15,
            name: "enterprise_chat_model_config",
            kind: "message",
            T: Bi
        }, {
            no: 4,
            name: "experiment_config",
            kind: "message",
            T: jt
        }, {
            no: 6,
            name: "open_document_paths_migrate_me_to_uris",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 7,
            name: "workspace_paths_migrate_me_to_uris",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new xi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new xi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new xi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(xi, e, t)
        }
    }
    class Bi extends E {
        maxOutputTokens = 0;
        maxInputTokens = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.GetChatMessageRequest.EnterpriseExternalModelConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 2,
            name: "max_output_tokens",
            kind: "scalar",
            T: 5
        }, {
            no: 3,
            name: "max_input_tokens",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new Bi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Bi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Bi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Bi, e, t)
        }
    }
    class hi extends E {
        experimentKey = Be.UNSPECIFIED;
        enabled = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.chat_pb.ChatExperimentStatus";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "experiment_key",
            kind: "enum",
            T: ye.getEnumType(Be)
        }, {
            no: 2,
            name: "enabled",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new hi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new hi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new hi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(hi, e, t)
        }
    }
    class Fi extends (null) {
        role = ChatMessageSource.UNSPECIFIED;
        header = "";
        content = "";
        footer = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "role",
            kind: "enum",
            T: ye.getEnumType(et)
        }, {
            no: 2,
            name: "header",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "content",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "footer",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Fi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Fi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Fi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Fi, e, t)
        }
    }
    !function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.ACTIVE_DOCUMENT = 1] = "ACTIVE_DOCUMENT",
        e[e.CURSOR_POSITION = 2] = "CURSOR_POSITION",
        e[e.CHAT_MESSAGE_RECEIVED = 3] = "CHAT_MESSAGE_RECEIVED",
        e[e.OPEN_DOCUMENTS = 4] = "OPEN_DOCUMENTS",
        e[e.ORACLE_ITEMS = 5] = "ORACLE_ITEMS",
        e[e.PINNED_CONTEXT = 6] = "PINNED_CONTEXT",
        e[e.PINNED_GUIDELINE = 7] = "PINNED_GUIDELINE",
        e[e.ACTIVE_NODE = 9] = "ACTIVE_NODE"
    }(es || (es = {})),
    ye.util.setEnumType(es, "exa.context_module_pb.ContextChangeType", [{
        no: 0,
        name: "CONTEXT_CHANGE_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CONTEXT_CHANGE_TYPE_ACTIVE_DOCUMENT"
    }, {
        no: 2,
        name: "CONTEXT_CHANGE_TYPE_CURSOR_POSITION"
    }, {
        no: 3,
        name: "CONTEXT_CHANGE_TYPE_CHAT_MESSAGE_RECEIVED"
    }, {
        no: 4,
        name: "CONTEXT_CHANGE_TYPE_OPEN_DOCUMENTS"
    }, {
        no: 5,
        name: "CONTEXT_CHANGE_TYPE_ORACLE_ITEMS"
    }, {
        no: 6,
        name: "CONTEXT_CHANGE_TYPE_PINNED_CONTEXT"
    }, {
        no: 7,
        name: "CONTEXT_CHANGE_TYPE_PINNED_GUIDELINE"
    }, {
        no: 9,
        name: "CONTEXT_CHANGE_TYPE_ACTIVE_NODE"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.AUTOCOMPLETE = 1] = "AUTOCOMPLETE",
        e[e.CHAT = 2] = "CHAT",
        e[e.CHAT_COMPLETION = 3] = "CHAT_COMPLETION",
        e[e.CORTEX_RESEARCH = 4] = "CORTEX_RESEARCH",
        e[e.EVAL = 5] = "EVAL",
        e[e.CHAT_COMPLETION_GENERATE = 6] = "CHAT_COMPLETION_GENERATE",
        e[e.SUPERCOMPLETE = 7] = "SUPERCOMPLETE",
        e[e.FAST_APPLY = 8] = "FAST_APPLY",
        e[e.COMMAND_TERMINAL = 9] = "COMMAND_TERMINAL"
    }(ts || (ts = {})),
    ye.util.setEnumType(ts, "exa.context_module_pb.ContextUseCase", [{
        no: 0,
        name: "CONTEXT_USE_CASE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CONTEXT_USE_CASE_AUTOCOMPLETE"
    }, {
        no: 2,
        name: "CONTEXT_USE_CASE_CHAT"
    }, {
        no: 3,
        name: "CONTEXT_USE_CASE_CHAT_COMPLETION"
    }, {
        no: 4,
        name: "CONTEXT_USE_CASE_CORTEX_RESEARCH"
    }, {
        no: 5,
        name: "CONTEXT_USE_CASE_EVAL"
    }, {
        no: 6,
        name: "CONTEXT_USE_CASE_CHAT_COMPLETION_GENERATE"
    }, {
        no: 7,
        name: "CONTEXT_USE_CASE_SUPERCOMPLETE"
    }, {
        no: 8,
        name: "CONTEXT_USE_CASE_FAST_APPLY"
    }, {
        no: 9,
        name: "CONTEXT_USE_CASE_COMMAND_TERMINAL"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.AUTOCOMPLETE = 1] = "AUTOCOMPLETE",
        e[e.CHAT = 2] = "CHAT",
        e[e.IDE_ACTION = 4] = "IDE_ACTION",
        e[e.CHAT_COMPLETION = 5] = "CHAT_COMPLETION"
    }(ns || (ns = {})),
    ye.util.setEnumType(ns, "exa.context_module_pb.ContextRefreshReason", [{
        no: 0,
        name: "CONTEXT_REFRESH_REASON_UNSPECIFIED"
    }, {
        no: 1,
        name: "CONTEXT_REFRESH_REASON_AUTOCOMPLETE"
    }, {
        no: 2,
        name: "CONTEXT_REFRESH_REASON_CHAT"
    }, {
        no: 4,
        name: "CONTEXT_REFRESH_REASON_IDE_ACTION"
    }, {
        no: 5,
        name: "CONTEXT_REFRESH_REASON_CHAT_COMPLETION"
    }]);
    class bi extends (null) {
        contextChangeEvent = {
            case: void 0
        };
        contextRefreshReason = ns.UNSPECIFIED;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "context_change_active_document",
            kind: "message",
            T: qi,
            oneof: "context_change_event"
        }, {
            no: 2,
            name: "context_change_cursor_position",
            kind: "message",
            T: Gi,
            oneof: "context_change_event"
        }, {
            no: 3,
            name: "context_change_chat_message_received",
            kind: "message",
            T: Hi,
            oneof: "context_change_event"
        }, {
            no: 4,
            name: "context_change_open_documents",
            kind: "message",
            T: vi,
            oneof: "context_change_event"
        }, {
            no: 5,
            name: "context_change_oracle_items",
            kind: "message",
            T: Vi,
            oneof: "context_change_event"
        }, {
            no: 7,
            name: "context_change_pinned_context",
            kind: "message",
            T: Yi,
            oneof: "context_change_event"
        }, {
            no: 8,
            name: "context_change_pinned_guideline",
            kind: "message",
            T: Xi,
            oneof: "context_change_event"
        }, {
            no: 10,
            name: "context_change_active_node",
            kind: "message",
            T: Ki,
            oneof: "context_change_event"
        }, {
            no: 6,
            name: "context_refresh_reason",
            kind: "enum",
            T: ye.getEnumType(ns)
        }]));
        static fromBinary(e, t) {
            return (new bi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new bi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new bi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(bi, e, t)
        }
    }
    class qi extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.context_module_pb.ContextChangeActiveDocument";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "document",
            kind: "message",
            T: va
        }]));
        static fromBinary(e, t) {
            return (new qi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new qi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new qi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(qi, e, t)
        }
    }
    class Gi extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.context_module_pb.ContextChangeCursorPosition";
        static fields = ye.util.newFieldList(( () => [{
            no: 2,
            name: "document",
            kind: "message",
            T: va
        }]));
        static fromBinary(e, t) {
            return (new Gi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Gi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Gi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Gi, e, t)
        }
    }
    class Hi extends E {
        chatMessages = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.context_module_pb.ContextChangeChatMessageReceived";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "chat_messages",
            kind: "message",
            T: Ri,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Hi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Hi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Hi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Hi, e, t)
        }
    }
    class vi extends E {
        otherOpenDocuments = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.context_module_pb.ContextChangeOpenDocuments";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "other_open_documents",
            kind: "message",
            T: va,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new vi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new vi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new vi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(vi, e, t)
        }
    }
    class Vi extends E {
        oracleItems = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.context_module_pb.ContextChangeOracleItems";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "oracle_items",
            kind: "message",
            T: Kn,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Vi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Vi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Vi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Vi, e, t)
        }
    }
    class Yi extends E {
        scope = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.context_module_pb.ContextChangePinnedContext";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "pinned_scope",
            kind: "message",
            T: wa,
            oneof: "scope"
        }, {
            no: 2,
            name: "mentioned_scope",
            kind: "message",
            T: wa,
            oneof: "scope"
        }]));
        static fromBinary(e, t) {
            return (new Yi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Yi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Yi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Yi, e, t)
        }
    }
    class Xi extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.context_module_pb.ContextChangePinnedGuideline";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "guideline",
            kind: "message",
            T: Ja
        }]));
        static fromBinary(e, t) {
            return (new Xi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Xi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Xi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Xi, e, t)
        }
    }
    class Ki extends E {
        actualNodeChange = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.context_module_pb.ContextChangeActiveNode";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "active_node",
            kind: "message",
            T: Kn
        }, {
            no: 2,
            name: "document",
            kind: "message",
            T: va
        }, {
            no: 3,
            name: "actual_node_change",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Ki).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ki).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ki).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ki, e, t)
        }
    }
    class Wi extends E {
        contextSources = [];
        contextType = mt.UNSPECIFIED;
        scorer = "";
        score = 0;
        providerMetadata = {};
        isInPinnedScope = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.context_module_pb.RetrievedCodeContextItemMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "context_sources",
            kind: "enum",
            T: ye.getEnumType(ct),
            repeated: !0
        }, {
            no: 2,
            name: "context_type",
            kind: "enum",
            T: ye.getEnumType(mt)
        }, {
            no: 3,
            name: "scorer",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "score",
            kind: "scalar",
            T: 2
        }, {
            no: 5,
            name: "provider_metadata",
            kind: "map",
            K: 9,
            V: {
                kind: "message",
                T: $i
            }
        }, {
            no: 6,
            name: "is_in_pinned_scope",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Wi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Wi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Wi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Wi, e, t)
        }
    }
    class zi extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.context_module_pb.CciWithSubrangeWithRetrievalMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cci_with_subrange",
            kind: "message",
            T: fa
        }, {
            no: 2,
            name: "metadata",
            kind: "message",
            T: Wi
        }]));
        static fromBinary(e, t) {
            return (new zi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new zi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new zi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(zi, e, t)
        }
    }
    class ji extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.context_module_pb.CodeContextItemWithRetrievalMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "code_context_item",
            kind: "message",
            T: Kn
        }, {
            no: 2,
            name: "metadata",
            kind: "message",
            T: Wi
        }]));
        static fromBinary(e, t) {
            return (new ji).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ji).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ji).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ji, e, t)
        }
    }
    class Qi extends (null) {
        absoluteUri = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "absolute_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "metadata",
            kind: "message",
            T: Wi
        }]));
        static fromBinary(e, t) {
            return (new Qi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Qi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Qi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Qi, e, t)
        }
    }
    class $i extends E {
        relativeWeight = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.context_module_pb.CodeContextProviderMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "relative_weight",
            kind: "scalar",
            T: 2
        }]));
        static fromBinary(e, t) {
            return (new $i).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new $i).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new $i).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals($i, e, t)
        }
    }
    class Zi extends (null) {
        getStatsLatencyMs = protoInt64.zero;
        contextModuleAgeS = protoInt64.zero;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "context_module_state_stats",
            kind: "message",
            T: eo
        }, {
            no: 2,
            name: "code_context_item_index_stats",
            kind: "message",
            T: to
        }, {
            no: 3,
            name: "get_stats_latency_ms",
            kind: "scalar",
            T: 3
        }, {
            no: 4,
            name: "context_module_age_s",
            kind: "scalar",
            T: 3
        }]));
        static fromBinary(e, t) {
            return (new Zi).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Zi).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Zi).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Zi, e, t)
        }
    }
    class eo extends E {
        cciPerSourceBytes = A.zero;
        activeDocumentBytes = A.zero;
        otherOpenDocumentsBytes = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.context_module_pb.ContextModuleStateStats";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cci_per_source_bytes",
            kind: "scalar",
            T: 3
        }, {
            no: 2,
            name: "active_document_bytes",
            kind: "scalar",
            T: 3
        }, {
            no: 3,
            name: "other_open_documents_bytes",
            kind: "scalar",
            T: 3
        }]));
        static fromBinary(e, t) {
            return (new eo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new eo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new eo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(eo, e, t)
        }
    }
    class to extends E {
        allCcisBytes = A.zero;
        numCcisTracked = A.zero;
        termFrequencyMapBytes = A.zero;
        numTermsTracked = A.zero;
        fileToCciMapBytes = A.zero;
        numFilesTracked = A.zero;
        lastModifiedBytes = A.zero;
        hashMapBytes = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.context_module_pb.CodeContextItemIndexStats";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "all_ccis_bytes",
            kind: "scalar",
            T: 3
        }, {
            no: 2,
            name: "num_ccis_tracked",
            kind: "scalar",
            T: 3
        }, {
            no: 3,
            name: "term_frequency_map_bytes",
            kind: "scalar",
            T: 3
        }, {
            no: 4,
            name: "num_terms_tracked",
            kind: "scalar",
            T: 3
        }, {
            no: 5,
            name: "file_to_cci_map_bytes",
            kind: "scalar",
            T: 3
        }, {
            no: 6,
            name: "num_files_tracked",
            kind: "scalar",
            T: 3
        }, {
            no: 7,
            name: "last_modified_bytes",
            kind: "scalar",
            T: 3
        }, {
            no: 8,
            name: "hash_map_bytes",
            kind: "scalar",
            T: 3
        }]));
        static fromBinary(e, t) {
            return (new to).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new to).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new to).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(to, e, t)
        }
    }
    class no extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "pinned_guideline",
            kind: "message",
            T: Ja
        }, {
            no: 2,
            name: "pinned_context_scope",
            kind: "message",
            T: wa
        }]));
        static fromBinary(e, t) {
            return (new no).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new no).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new no).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(no, e, t)
        }
    }
    class ao extends E {
        retrievedCciWithSubranges = [];
        openDocuments = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.context_module_pb.ContextModuleResult";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "retrieved_cci_with_subranges",
            kind: "message",
            T: zi,
            repeated: !0
        }, {
            no: 2,
            name: "active_document",
            kind: "message",
            T: va
        }, {
            no: 5,
            name: "active_document_outline",
            kind: "message",
            T: lr
        }, {
            no: 3,
            name: "local_node_state",
            kind: "message",
            T: ro
        }, {
            no: 4,
            name: "guideline",
            kind: "message",
            T: Ja
        }, {
            no: 6,
            name: "open_documents",
            kind: "message",
            T: va,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new ao).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ao).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ao).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ao, e, t)
        }
    }
    class ro extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.context_module_pb.LocalNodeState";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "current_node",
            kind: "message",
            T: Kn
        }, {
            no: 2,
            name: "closest_above_node",
            kind: "message",
            T: Kn
        }, {
            no: 3,
            name: "closest_below_node",
            kind: "message",
            T: Kn
        }]));
        static fromBinary(e, t) {
            return (new ro).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ro).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ro).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ro, e, t)
        }
    }
    !function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.HALFVEC = 1] = "HALFVEC",
        e[e.BINARY = 2] = "BINARY",
        e[e.BINARY_WITH_RERANK = 3] = "BINARY_WITH_RERANK",
        e[e.BRUTE_FORCE = 4] = "BRUTE_FORCE",
        e[e.RANDOM_SEARCH = 5] = "RANDOM_SEARCH"
    }(as || (as = {})),
    ye.util.setEnumType(as, "exa.index_pb.IndexMode", [{
        no: 0,
        name: "INDEX_MODE_UNSPECIFIED"
    }, {
        no: 1,
        name: "INDEX_MODE_HALFVEC"
    }, {
        no: 2,
        name: "INDEX_MODE_BINARY"
    }, {
        no: 3,
        name: "INDEX_MODE_BINARY_WITH_RERANK"
    }, {
        no: 4,
        name: "INDEX_MODE_BRUTE_FORCE"
    }, {
        no: 5,
        name: "INDEX_MODE_RANDOM_SEARCH"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.ERROR = 1] = "ERROR",
        e[e.QUEUED = 2] = "QUEUED",
        e[e.CLONING_REPO = 3] = "CLONING_REPO",
        e[e.SCANNING_REPO = 4] = "SCANNING_REPO",
        e[e.GENERATING_EMBEDDINGS = 5] = "GENERATING_EMBEDDINGS",
        e[e.VECTOR_INDEXING = 6] = "VECTOR_INDEXING",
        e[e.DONE = 7] = "DONE",
        e[e.CANCELING = 8] = "CANCELING",
        e[e.CANCELED = 9] = "CANCELED"
    }(rs || (rs = {})),
    ye.util.setEnumType(rs, "exa.index_pb.IndexingStatus", [{
        no: 0,
        name: "INDEXING_STATUS_UNSPECIFIED"
    }, {
        no: 1,
        name: "INDEXING_STATUS_ERROR"
    }, {
        no: 2,
        name: "INDEXING_STATUS_QUEUED"
    }, {
        no: 3,
        name: "INDEXING_STATUS_CLONING_REPO"
    }, {
        no: 4,
        name: "INDEXING_STATUS_SCANNING_REPO"
    }, {
        no: 5,
        name: "INDEXING_STATUS_GENERATING_EMBEDDINGS"
    }, {
        no: 6,
        name: "INDEXING_STATUS_VECTOR_INDEXING"
    }, {
        no: 7,
        name: "INDEXING_STATUS_DONE"
    }, {
        no: 8,
        name: "INDEXING_STATUS_CANCELING"
    }, {
        no: 9,
        name: "INDEXING_STATUS_CANCELED"
    }]);
    class so extends E {
        version = 0;
        enterpriseVersion = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.IndexDbVersion";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "version",
            kind: "scalar",
            T: 5
        }, {
            no: 2,
            name: "enterprise_version",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new so).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new so).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new so).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(so, e, t)
        }
    }
    class io extends E {
        cciTimeoutSecs = 0;
        indexMode = as.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.IndexBuildConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 2,
            name: "db_version",
            kind: "message",
            T: so
        }, {
            no: 3,
            name: "cci_timeout_secs",
            kind: "scalar",
            T: 5
        }, {
            no: 4,
            name: "index_mode",
            kind: "enum",
            T: ye.getEnumType(as)
        }]));
        static fromBinary(e, t) {
            return (new io).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new io).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new io).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(io, e, t)
        }
    }
    class oo extends E {
        gitUrl = "";
        scmProvider = it.UNSPECIFIED;
        storeSnippets = !1;
        whitelistedGroups = [];
        useGithubApp = !1;
        authUid = "";
        email = "";
        serviceKeyId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.RepositoryConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "git_url",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "scm_provider",
            kind: "enum",
            T: ye.getEnumType(it)
        }, {
            no: 3,
            name: "auto_index_config",
            kind: "message",
            T: mo
        }, {
            no: 4,
            name: "store_snippets",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "whitelisted_groups",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 6,
            name: "use_github_app",
            kind: "scalar",
            T: 8
        }, {
            no: 7,
            name: "auth_uid",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "email",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "service_key_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new oo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new oo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new oo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(oo, e, t)
        }
    }
    class mo extends E {
        branchName = "";
        maxNumAutoIndexes = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.RepositoryConfig.AutoIndexConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "branch_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "interval",
            kind: "message",
            T: Je
        }, {
            no: 3,
            name: "max_num_auto_indexes",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new mo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new mo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new mo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(mo, e, t)
        }
    }
    class co extends E {
        enablePrune = !1;
        enableSmallestRepoFirst = !1;
        enableRoundRobin = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.IndexConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "prune_time",
            kind: "message",
            T: De
        }, {
            no: 2,
            name: "prune_interval",
            kind: "message",
            T: Je
        }, {
            no: 3,
            name: "enable_prune",
            kind: "scalar",
            T: 8
        }, {
            no: 4,
            name: "enable_smallest_repo_first",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "enable_round_robin",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new co).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new co).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new co).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(co, e, t)
        }
    }
    class uo extends E {
        numEmbeddings = A.zero;
        indexBytesCount = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.VectorIndexStats";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "num_embeddings",
            kind: "scalar",
            T: 3
        }, {
            no: 2,
            name: "index_bytes_count",
            kind: "scalar",
            T: 3
        }]));
        static fromBinary(e, t) {
            return (new uo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new uo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new uo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(uo, e, t)
        }
    }
    class lo extends E {
        progress = 0;
        text = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.ProgressBar";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "progress",
            kind: "scalar",
            T: 2
        }, {
            no: 2,
            name: "text",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "remaining_time",
            kind: "message",
            T: Je
        }]));
        static fromBinary(e, t) {
            return (new lo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new lo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new lo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(lo, e, t)
        }
    }
    class _o extends E {
        id = "";
        repoName = "";
        workspace = "";
        status = rs.UNSPECIFIED;
        statusDetail = "";
        autoIndexed = !1;
        hasSnippets = !1;
        authUid = "";
        email = "";
        indexingProgress = {};
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.Index";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "repo_name",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "workspace",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "repo_info",
            kind: "message",
            T: Xn
        }, {
            no: 5,
            name: "created_at",
            kind: "message",
            T: De
        }, {
            no: 6,
            name: "updated_at",
            kind: "message",
            T: De
        }, {
            no: 13,
            name: "scheduled_at",
            kind: "message",
            T: De
        }, {
            no: 7,
            name: "status",
            kind: "enum",
            T: ye.getEnumType(rs)
        }, {
            no: 8,
            name: "status_detail",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "auto_indexed",
            kind: "scalar",
            T: 8
        }, {
            no: 12,
            name: "has_snippets",
            kind: "scalar",
            T: 8
        }, {
            no: 15,
            name: "auth_uid",
            kind: "scalar",
            T: 9
        }, {
            no: 16,
            name: "email",
            kind: "scalar",
            T: 9
        }, {
            no: 14,
            name: "repo_stats",
            kind: "message",
            T: Eo
        }, {
            no: 10,
            name: "indexing_progress",
            kind: "map",
            K: 9,
            V: {
                kind: "message",
                T: lo
            }
        }, {
            no: 11,
            name: "index_stats",
            kind: "message",
            T: uo
        }]));
        static fromBinary(e, t) {
            return (new _o).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new _o).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new _o).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(_o, e, t)
        }
    }
    class Eo extends E {
        size = A.zero;
        fileCount = A.zero;
        sizeNoIgnore = A.zero;
        fileCountNoIgnore = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.Index.RepoStats";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "size",
            kind: "scalar",
            T: 3
        }, {
            no: 2,
            name: "file_count",
            kind: "scalar",
            T: 3
        }, {
            no: 3,
            name: "size_no_ignore",
            kind: "scalar",
            T: 3
        }, {
            no: 4,
            name: "file_count_no_ignore",
            kind: "scalar",
            T: 3
        }]));
        static fromBinary(e, t) {
            return (new Eo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Eo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Eo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Eo, e, t)
        }
    }
    class To extends E {
        repoName = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.Repository";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "repo_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "config",
            kind: "message",
            T: oo
        }, {
            no: 4,
            name: "created_at",
            kind: "message",
            T: De
        }, {
            no: 5,
            name: "updated_at",
            kind: "message",
            T: De
        }, {
            no: 3,
            name: "latest_index",
            kind: "message",
            T: _o
        }]));
        static fromBinary(e, t) {
            return (new To).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new To).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new To).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(To, e, t)
        }
    }
    class fo extends E {
        version = {
            case: void 0
        };
        versionAlias = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.RequestIndexVersion";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "commit",
            kind: "scalar",
            T: 9,
            oneof: "version"
        }, {
            no: 2,
            name: "branch",
            kind: "scalar",
            T: 9,
            oneof: "version"
        }, {
            no: 3,
            name: "version_alias",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new fo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new fo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new fo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(fo, e, t)
        }
    }
    class po extends E {
        authToken = "";
        authUid = "";
        serviceKey = "";
        forceTargetPublicIndex = !1;
        forceTeamId = "";
        serviceKeyId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.ManagementMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "auth_token",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "auth_uid",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "service_key",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "force_target_public_index",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "force_team_id",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "service_key_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new po).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new po).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new po).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(po, e, t)
        }
    }
    class So extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "config",
            kind: "message",
            T: oo
        }, {
            no: 3,
            name: "initial_index",
            kind: "message",
            T: fo
        }]));
        static fromBinary(e, t) {
            return (new So).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new So).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new So).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(So, e, t)
        }
    }
    class No extends (null) {
        repoName = "";
        indexId = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "repo_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "index_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new No).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new No).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new No).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(No, e, t)
        }
    }
    class Co extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "config",
            kind: "message",
            T: io
        }]));
        static fromBinary(e, t) {
            return (new Co).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Co).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Co).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Co, e, t)
        }
    }
    class Io extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Io).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Io).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Io).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Io, e, t)
        }
    }
    class go extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }]));
        static fromBinary(e, t) {
            return (new go).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new go).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new go).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(go, e, t)
        }
    }
    class Oo extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Oo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Oo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Oo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Oo, e, t)
        }
    }
    class Ao extends (null) {
        repoName = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "repo_name",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "config",
            kind: "message",
            T: oo
        }]));
        static fromBinary(e, t) {
            return (new Ao).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ao).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ao).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Ao, e, t)
        }
    }
    class Po extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Po).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Po).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Po).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Po, e, t)
        }
    }
    class Lo extends (null) {
        repoName = "";
        repoNames = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "repo_name",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "repo_names",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Lo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Lo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Lo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Lo, e, t)
        }
    }
    class Ro extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Ro).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ro).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ro).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Ro, e, t)
        }
    }
    class yo extends E {
        repoName = "";
        groupId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.GetRepositoriesFilter";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "repo_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "group_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new yo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new yo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new yo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(yo, e, t)
        }
    }
    class wo extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "filter",
            kind: "message",
            T: yo
        }]));
        static fromBinary(e, t) {
            return (new wo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new wo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new wo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(wo, e, t)
        }
    }
    class ko extends (null) {
        repositories = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "repositories",
            kind: "message",
            T: To,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new ko).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ko).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ko).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(ko, e, t)
        }
    }
    class Do extends (null) {
        repoName = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "repo_name",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Do).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Do).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Do).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Do, e, t)
        }
    }
    class Jo extends (null) {
        indexes = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "indexes",
            kind: "message",
            T: _o,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Jo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Jo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Jo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Jo, e, t)
        }
    }
    class Mo extends (null) {
        indexId = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "index_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Mo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Mo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Mo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Mo, e, t)
        }
    }
    class Uo extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "index",
            kind: "message",
            T: _o
        }, {
            no: 2,
            name: "repository",
            kind: "message",
            T: To
        }]));
        static fromBinary(e, t) {
            return (new Uo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Uo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Uo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Uo, e, t)
        }
    }
    class xo extends E {
        indexId = "";
        cciCount = A.zero;
        snippetCount = A.zero;
        embeddingCount = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.RemoteIndexStats";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "index_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "cci_count",
            kind: "scalar",
            T: 3
        }, {
            no: 3,
            name: "snippet_count",
            kind: "scalar",
            T: 3
        }, {
            no: 4,
            name: "embedding_count",
            kind: "scalar",
            T: 3
        }]));
        static fromBinary(e, t) {
            return (new xo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new xo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new xo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(xo, e, t)
        }
    }
    class Bo extends (null) {
        indexIds = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "index_ids",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Bo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Bo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Bo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Bo, e, t)
        }
    }
    class ho extends (null) {
        indexStats = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "index_stats",
            kind: "message",
            T: xo,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new ho).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ho).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ho).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(ho, e, t)
        }
    }
    class Fo extends (null) {
        repoName = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "repo_name",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "version",
            kind: "message",
            T: fo
        }]));
        static fromBinary(e, t) {
            return (new Fo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Fo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Fo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Fo, e, t)
        }
    }
    class bo extends (null) {
        indexId = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "index_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new bo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new bo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new bo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(bo, e, t)
        }
    }
    class qo extends (null) {
        indexId = "";
        indexIds = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "index_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "index_ids",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new qo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new qo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new qo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(qo, e, t)
        }
    }
    class Go extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Go).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Go).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Go).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Go, e, t)
        }
    }
    class Ho extends (null) {
        indexId = "";
        indexIds = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "index_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "index_ids",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Ho).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ho).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ho).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Ho, e, t)
        }
    }
    class vo extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new vo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new vo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new vo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(vo, e, t)
        }
    }
    class Vo extends (null) {
        indexId = "";
        indexIds = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "index_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "index_ids",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Vo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Vo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Vo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Vo, e, t)
        }
    }
    class Yo extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Yo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Yo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Yo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Yo, e, t)
        }
    }
    class Xo extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }]));
        static fromBinary(e, t) {
            return (new Xo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Xo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Xo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Xo, e, t)
        }
    }
    class Ko extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Ko).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ko).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ko).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Ko, e, t)
        }
    }
    class Wo extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }]));
        static fromBinary(e, t) {
            return (new Wo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Wo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Wo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Wo, e, t)
        }
    }
    class zo extends (null) {
        databaseTotalBytesCount = protoInt64.zero;
        tableTotalBytesCount = protoInt64.zero;
        indexTotalBytesCount = protoInt64.zero;
        estimatePrunableBytes = protoInt64.zero;
        isPruning = !1;
        lastPruneError = "";
        allTablesBytesCount = protoInt64.zero;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "database_total_bytes_count",
            kind: "scalar",
            T: 3
        }, {
            no: 2,
            name: "table_total_bytes_count",
            kind: "scalar",
            T: 3
        }, {
            no: 3,
            name: "index_total_bytes_count",
            kind: "scalar",
            T: 3
        }, {
            no: 4,
            name: "estimate_prunable_bytes",
            kind: "scalar",
            T: 3
        }, {
            no: 5,
            name: "is_pruning",
            kind: "scalar",
            T: 8
        }, {
            no: 6,
            name: "last_prune_error",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "all_tables_bytes_count",
            kind: "scalar",
            T: 3
        }]));
        static fromBinary(e, t) {
            return (new zo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new zo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new zo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(zo, e, t)
        }
    }
    class jo extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "index_config",
            kind: "message",
            T: co
        }]));
        static fromBinary(e, t) {
            return (new jo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new jo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new jo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(jo, e, t)
        }
    }
    class Qo extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Qo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Qo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Qo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Qo, e, t)
        }
    }
    class $o extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }]));
        static fromBinary(e, t) {
            return (new $o).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new $o).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new $o).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals($o, e, t)
        }
    }
    class Zo extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "index_config",
            kind: "message",
            T: co
        }]));
        static fromBinary(e, t) {
            return (new Zo).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Zo).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Zo).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Zo, e, t)
        }
    }
    class em extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }]));
        static fromBinary(e, t) {
            return (new em).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new em).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new em).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(em, e, t)
        }
    }
    class tm extends (null) {
        connectionsMap = {};
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "connections_map",
            kind: "map",
            K: 9,
            V: {
                kind: "scalar",
                T: 13
            }
        }]));
        static fromBinary(e, t) {
            return (new tm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new tm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new tm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(tm, e, t)
        }
    }
    class nm extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }]));
        static fromBinary(e, t) {
            return (new nm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new nm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new nm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(nm, e, t)
        }
    }
    class am extends (null) {
        debugInfo = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "debug_info",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new am).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new am).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new am).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(am, e, t)
        }
    }
    class rm extends (null) {
        includeIncomplete = !1;
        groupIdsFilter = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "include_incomplete",
            kind: "scalar",
            T: 8
        }, {
            no: 3,
            name: "group_ids_filter",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new rm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new rm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new rm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(rm, e, t)
        }
    }
    class sm extends (null) {
        repositories = [];
        indexes = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "repositories",
            kind: "message",
            T: Xn,
            repeated: !0
        }, {
            no: 2,
            name: "indexes",
            kind: "message",
            T: _o,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new sm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new sm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new sm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(sm, e, t)
        }
    }
    class im extends E {
        excludedFiles = [];
        filterPaths = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.RepositoryFilter";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "repository",
            kind: "message",
            T: Xn
        }, {
            no: 2,
            name: "excluded_files",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 3,
            name: "filter_paths",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new im).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new im).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new im).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(im, e, t)
        }
    }
    class om extends (null) {
        query = "";
        maxItems = 0;
        groupIdsFilter = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "repository",
            kind: "message",
            T: Xn
        }, {
            no: 3,
            name: "query",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "max_items",
            kind: "scalar",
            T: 13
        }, {
            no: 5,
            name: "group_ids_filter",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new om).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new om).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new om).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(om, e, t)
        }
    }
    class mm extends (null) {
        relativeFilePaths = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "relative_file_paths",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new mm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new mm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new mm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(mm, e, t)
        }
    }
    class cm extends (null) {
        repositoryFilters = [];
        maxResults = protoInt64.zero;
        groupIdsFilter = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "embedding",
            kind: "message",
            T: gn
        }, {
            no: 3,
            name: "repository_filters",
            kind: "message",
            T: im,
            repeated: !0
        }, {
            no: 4,
            name: "max_results",
            kind: "scalar",
            T: 3
        }, {
            no: 5,
            name: "group_ids_filter",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new cm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new cm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new cm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(cm, e, t)
        }
    }
    class um extends E {
        score = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.ScoredContextItem";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "code_context_item",
            kind: "message",
            T: Kn
        }, {
            no: 2,
            name: "score",
            kind: "scalar",
            T: 2
        }]));
        static fromBinary(e, t) {
            return (new um).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new um).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new um).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(um, e, t)
        }
    }
    class lm extends (null) {
        scoredContextItems = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "scored_context_items",
            kind: "message",
            T: um,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new lm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new lm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new lm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(lm, e, t)
        }
    }
    class _m extends (null) {
        codeContextItems = [];
        snippetType = ContextSnippetType.UNSPECIFIED;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "code_context_items",
            kind: "message",
            T: Kn,
            repeated: !0
        }, {
            no: 3,
            name: "snippet_type",
            kind: "enum",
            T: ye.getEnumType(ut)
        }]));
        static fromBinary(e, t) {
            return (new _m).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new _m).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new _m).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(_m, e, t)
        }
    }
    class Em extends (null) {
        embeddings = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "embeddings",
            kind: "message",
            T: gn,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Em).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Em).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Em).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Em, e, t)
        }
    }
    class dm extends E {
        repositoryName = "";
        fileCount = A.zero;
        codeContextItemCount = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.IndexStats";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "repository_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "file_count",
            kind: "scalar",
            T: 3
        }, {
            no: 3,
            name: "code_context_item_count",
            kind: "scalar",
            T: 3
        }]));
        static fromBinary(e, t) {
            return (new dm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new dm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new dm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(dm, e, t)
        }
    }
    class Tm extends (null) {
        uid = protoInt64.zero;
        eventOneof = {
            case: void 0
        };
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "uid",
            kind: "scalar",
            T: 4
        }, {
            no: 2,
            name: "deletion",
            kind: "message",
            T: fm,
            oneof: "event_oneof"
        }, {
            no: 3,
            name: "untrack",
            kind: "message",
            T: pm,
            oneof: "event_oneof"
        }, {
            no: 4,
            name: "update",
            kind: "message",
            T: Sm,
            oneof: "event_oneof"
        }, {
            no: 5,
            name: "add_workspace",
            kind: "message",
            T: Cm,
            oneof: "event_oneof"
        }, {
            no: 6,
            name: "remove_workspace",
            kind: "message",
            T: Im,
            oneof: "event_oneof"
        }, {
            no: 7,
            name: "ignore_workspace",
            kind: "message",
            T: gm,
            oneof: "event_oneof"
        }, {
            no: 8,
            name: "add_commit",
            kind: "message",
            T: Om,
            oneof: "event_oneof"
        }]));
        static fromBinary(e, t) {
            return (new Tm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Tm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Tm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Tm, e, t)
        }
    }
    class fm extends E {
        absoluteUri = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.IndexerEvent.Deletion";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "absolute_uri",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new fm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new fm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new fm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(fm, e, t)
        }
    }
    class pm extends E {
        absoluteUri = "";
        paths = [];
        workspaceUri = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.IndexerEvent.Untrack";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "absolute_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "paths",
            kind: "message",
            T: Dn,
            repeated: !0
        }, {
            no: 3,
            name: "workspace_uri",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new pm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new pm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new pm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(pm, e, t)
        }
    }
    class Sm extends E {
        absoluteUri = "";
        paths = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.IndexerEvent.Update";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "absolute_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "paths",
            kind: "message",
            T: Dn,
            repeated: !0
        }, {
            no: 3,
            name: "mod_time",
            kind: "message",
            T: De
        }, {
            no: 4,
            name: "add_workspace_info",
            kind: "message",
            T: Nm
        }]));
        static fromBinary(e, t) {
            return (new Sm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Sm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Sm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Sm, e, t)
        }
    }
    class Nm extends E {
        addWorkspaceUid = A.zero;
        addWorkspaceQueueUid = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.IndexerEvent.Update.AddWorkspaceInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "add_workspace_uid",
            kind: "scalar",
            T: 4
        }, {
            no: 2,
            name: "add_workspace_queue_uid",
            kind: "scalar",
            T: 4
        }]));
        static fromBinary(e, t) {
            return (new Nm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Nm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Nm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Nm, e, t)
        }
    }
    class Cm extends E {
        addWorkspaceUid = A.zero;
        addWorkspaceQueueUid = A.zero;
        workspaceUri = "";
        numFiles = A.zero;
        size = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.IndexerEvent.AddWorkspace";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "add_workspace_uid",
            kind: "scalar",
            T: 4
        }, {
            no: 2,
            name: "add_workspace_queue_uid",
            kind: "scalar",
            T: 4
        }, {
            no: 3,
            name: "workspace_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "num_files",
            kind: "scalar",
            T: 3
        }, {
            no: 5,
            name: "size",
            kind: "scalar",
            T: 3
        }]));
        static fromBinary(e, t) {
            return (new Cm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Cm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Cm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Cm, e, t)
        }
    }
    class Im extends E {
        workspaceUri = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.IndexerEvent.RemoveWorkspace";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "workspace_uri",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Im).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Im).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Im).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Im, e, t)
        }
    }
    class gm extends E {
        workspaceUri = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.IndexerEvent.IgnoreWorkspace";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "workspace_uri",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new gm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new gm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new gm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(gm, e, t)
        }
    }
    class Om extends E {
        sha = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.index_pb.IndexerEvent.AddCommit";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "sha",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Om).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Om).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Om).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Om, e, t)
        }
    }
    !function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.SAME_COMMIT_OLD = 1] = "SAME_COMMIT_OLD",
        e[e.SAME_COMMIT_NEW = 2] = "SAME_COMMIT_NEW",
        e[e.REF_IN_DELETION = 3] = "REF_IN_DELETION",
        e[e.REF_IN_INSERTION = 4] = "REF_IN_INSERTION",
        e[e.NOT_RELEVANT = 99] = "NOT_RELEVANT"
    }(ss || (ss = {})),
    ye.util.setEnumType(ss, "exa.code_edit.code_edit_pb.RelevanceReason", [{
        no: 0,
        name: "RELEVANCE_REASON_UNSPECIFIED"
    }, {
        no: 1,
        name: "RELEVANCE_REASON_SAME_COMMIT_OLD"
    }, {
        no: 2,
        name: "RELEVANCE_REASON_SAME_COMMIT_NEW"
    }, {
        no: 3,
        name: "RELEVANCE_REASON_REF_IN_DELETION"
    }, {
        no: 4,
        name: "RELEVANCE_REASON_REF_IN_INSERTION"
    }, {
        no: 99,
        name: "RELEVANCE_REASON_NOT_RELEVANT"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.EDIT_COMMAND = 1] = "EDIT_COMMAND",
        e[e.INSERTION_COMMAND = 2] = "INSERTION_COMMAND"
    }(is || (is = {})),
    ye.util.setEnumType(is, "exa.code_edit.code_edit_pb.DescriptionType", [{
        no: 0,
        name: "DESCRIPTION_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "DESCRIPTION_TYPE_EDIT_COMMAND"
    }, {
        no: 2,
        name: "DESCRIPTION_TYPE_INSERTION_COMMAND"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.COMMIT_GOAL = 1] = "COMMIT_GOAL",
        e[e.DIFF_SEARCH = 2] = "DIFF_SEARCH",
        e[e.CLEAN_COMMIT = 3] = "CLEAN_COMMIT",
        e[e.CCI_SIGNATURE_SEARCH = 4] = "CCI_SIGNATURE_SEARCH",
        e[e.CCI_RAW_SOURCE_SEARCH = 5] = "CCI_RAW_SOURCE_SEARCH"
    }(os || (os = {})),
    ye.util.setEnumType(os, "exa.code_edit.code_edit_pb.IntentType", [{
        no: 0,
        name: "INTENT_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "INTENT_TYPE_COMMIT_GOAL"
    }, {
        no: 2,
        name: "INTENT_TYPE_DIFF_SEARCH"
    }, {
        no: 3,
        name: "INTENT_TYPE_CLEAN_COMMIT"
    }, {
        no: 4,
        name: "INTENT_TYPE_CCI_SIGNATURE_SEARCH"
    }, {
        no: 5,
        name: "INTENT_TYPE_CCI_RAW_SOURCE_SEARCH"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.CONTEXT_MODULE_LOCAL = 1] = "CONTEXT_MODULE_LOCAL",
        e[e.CONTEXT_MODULE_SEARCH = 2] = "CONTEXT_MODULE_SEARCH",
        e[e.SEARCH = 3] = "SEARCH",
        e[e.MQUERY_OPENAI = 4] = "MQUERY_OPENAI",
        e[e.MQUERY_CODEIUM = 5] = "MQUERY_CODEIUM",
        e[e.CONTEXT_MODULE_SEARCH_MQUERY_SCORER = 6] = "CONTEXT_MODULE_SEARCH_MQUERY_SCORER",
        e[e.COMMIT_GRAPH = 7] = "COMMIT_GRAPH",
        e[e.MORPH_NORMAL = 8] = "MORPH_NORMAL",
        e[e.MORPH_ADVANCED = 9] = "MORPH_ADVANCED",
        e[e.GRAPH_CLUSTERS = 10] = "GRAPH_CLUSTERS",
        e[e.OPENSEARCH = 11] = "OPENSEARCH"
    }(ms || (ms = {})),
    ye.util.setEnumType(ms, "exa.code_edit.code_edit_pb.RetrieverType", [{
        no: 0,
        name: "RETRIEVER_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "RETRIEVER_TYPE_CONTEXT_MODULE_LOCAL"
    }, {
        no: 2,
        name: "RETRIEVER_TYPE_CONTEXT_MODULE_SEARCH"
    }, {
        no: 3,
        name: "RETRIEVER_TYPE_SEARCH"
    }, {
        no: 4,
        name: "RETRIEVER_TYPE_MQUERY_OPENAI"
    }, {
        no: 5,
        name: "RETRIEVER_TYPE_MQUERY_CODEIUM"
    }, {
        no: 6,
        name: "RETRIEVER_TYPE_CONTEXT_MODULE_SEARCH_MQUERY_SCORER"
    }, {
        no: 7,
        name: "RETRIEVER_TYPE_COMMIT_GRAPH"
    }, {
        no: 8,
        name: "RETRIEVER_TYPE_MORPH_NORMAL"
    }, {
        no: 9,
        name: "RETRIEVER_TYPE_MORPH_ADVANCED"
    }, {
        no: 10,
        name: "RETRIEVER_TYPE_GRAPH_CLUSTERS"
    }, {
        no: 11,
        name: "RETRIEVER_TYPE_OPENSEARCH"
    }]);
    class Am extends E {
        relevanceReason = ss.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.code_edit.code_edit_pb.RelevantCodeContext";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "code_context_item",
            kind: "message",
            T: Kn
        }, {
            no: 3,
            name: "relevance_reason",
            kind: "enum",
            T: ye.getEnumType(ss)
        }]));
        static fromBinary(e, t) {
            return (new Am).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Am).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Am).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Am, e, t)
        }
    }
    class Pm extends E {
        intent = "";
        relevanceScore = 0;
        rationale = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.code_edit.code_edit_pb.IntentRelevance";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "intent",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "relevance_score",
            kind: "scalar",
            T: 2
        }, {
            no: 3,
            name: "rationale",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Pm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Pm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Pm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Pm, e, t)
        }
    }
    class Lm extends E {
        relevantCodeContexts = [];
        descriptionByType = {};
        intentRelevance = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.code_edit.code_edit_pb.CodeContextItemChange";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "start_cci",
            kind: "message",
            T: Kn
        }, {
            no: 2,
            name: "end_cci",
            kind: "message",
            T: Kn
        }, {
            no: 3,
            name: "relevant_code_contexts",
            kind: "message",
            T: Am,
            repeated: !0
        }, {
            no: 4,
            name: "description_by_type",
            kind: "map",
            K: 9,
            V: {
                kind: "scalar",
                T: 9
            }
        }, {
            no: 5,
            name: "intent_relevance",
            kind: "message",
            T: Pm,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Lm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Lm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Lm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Lm, e, t)
        }
    }
    class Rm extends E {
        startFilePathMigrateMeToUri = "";
        startFileUri = "";
        startFileRelPath = "";
        endFilePathMigrateMeToUri = "";
        endFileUri = "";
        endFileRelPath = "";
        oldFileContent = "";
        newFileContent = "";
        codeContextItemChanges = [];
        unchangedCodeContextItems = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.code_edit.code_edit_pb.FileChange";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "start_file_path_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 10,
            name: "start_file_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "start_file_rel_path",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "end_file_path_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 11,
            name: "end_file_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "end_file_rel_path",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "old_file_content",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "new_file_content",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "code_context_item_changes",
            kind: "message",
            T: Lm,
            repeated: !0
        }, {
            no: 7,
            name: "unchanged_code_context_items",
            kind: "message",
            T: Kn,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Rm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Rm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Rm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Rm, e, t)
        }
    }
    class ym extends E {
        intent = "";
        intentType = os.UNSPECIFIED;
        includeTestFiles = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.code_edit.code_edit_pb.Intent";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "intent",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "intent_type",
            kind: "enum",
            T: ye.getEnumType(os)
        }, {
            no: 3,
            name: "include_test_files",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new ym).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ym).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ym).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ym, e, t)
        }
    }
    class wm extends E {
        fileChanges = [];
        testFileChanges = [];
        intent = "";
        codeChangeDataSource = {
            case: void 0
        };
        unrelatedCcis = [];
        syntheticIntents = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.code_edit.code_edit_pb.CodeChangeWithContext";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "repository",
            kind: "message",
            T: Xn
        }, {
            no: 2,
            name: "file_changes",
            kind: "message",
            T: Rm,
            repeated: !0
        }, {
            no: 9,
            name: "test_file_changes",
            kind: "message",
            T: Rm,
            repeated: !0
        }, {
            no: 3,
            name: "intent",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "git_commit",
            kind: "message",
            T: km,
            oneof: "code_change_data_source"
        }, {
            no: 5,
            name: "index_stats",
            kind: "message",
            T: dm
        }, {
            no: 6,
            name: "unrelated_ccis",
            kind: "message",
            T: Kn,
            repeated: !0
        }, {
            no: 8,
            name: "synthetic_intents",
            kind: "message",
            T: ym,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new wm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new wm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new wm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(wm, e, t)
        }
    }
    class km extends E {
        commitHash = "";
        parentCommitHash = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.code_edit.code_edit_pb.GitCommit";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "commit_hash",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "parent_commit_hash",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new km).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new km).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new km).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(km, e, t)
        }
    }
    class Dm extends (null) {
        repoRoot = "";
        unrelatedCciMultiple = 0;
        dbDir = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "repo_root",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "repository",
            kind: "message",
            T: Xn
        }, {
            no: 3,
            name: "unrelated_cci_multiple",
            kind: "scalar",
            T: 5
        }, {
            no: 4,
            name: "db_dir",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Dm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Dm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Dm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Dm, e, t)
        }
    }
    class Jm extends (null) {
        from = "";
        to = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "from",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "to",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Jm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Jm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Jm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Jm, e, t)
        }
    }
    class Mm extends (null) {
        fileChanges = [];
        parentCommitHash = "";
        unrelatedCcis = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "file_changes",
            kind: "message",
            T: Rm,
            repeated: !0
        }, {
            no: 2,
            name: "parent_commit_hash",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "index_stats",
            kind: "message",
            T: dm
        }, {
            no: 4,
            name: "unrelated_ccis",
            kind: "message",
            T: Kn,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Mm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Mm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Mm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Mm, e, t)
        }
    }
    class Um extends (null) {
        query = "";
        targetCodeContexts = [];
        subdirectory = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "repository",
            kind: "message",
            T: Xn
        }, {
            no: 5,
            name: "commit_info",
            kind: "message",
            T: km
        }, {
            no: 2,
            name: "query",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "target_code_contexts",
            kind: "message",
            T: Am,
            repeated: !0
        }, {
            no: 4,
            name: "subdirectory",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Um).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Um).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Um).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Um, e, t)
        }
    }
    class xm extends (null) {
        retrieverName = "";
        codeContextWithMetadatas = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "repository",
            kind: "message",
            T: Xn
        }, {
            no: 3,
            name: "retriever_name",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "retriever_info",
            kind: "message",
            T: Fm
        }, {
            no: 5,
            name: "code_context_with_metadatas",
            kind: "message",
            T: ji,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new xm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new xm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new xm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(xm, e, t)
        }
    }
    class Bm extends E {
        relevanceScore = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.code_edit.code_edit_pb.RetrieverClassification";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "relevance_score",
            kind: "scalar",
            T: 2
        }, {
            no: 2,
            name: "retriever_info",
            kind: "message",
            T: Fm
        }]));
        static fromBinary(e, t) {
            return (new Bm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Bm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Bm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Bm, e, t)
        }
    }
    class hm extends E {
        relevant = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.code_edit.code_edit_pb.CodeContextItemWithClassification";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "code_context_item",
            kind: "message",
            T: Am
        }, {
            no: 2,
            name: "relevant",
            kind: "scalar",
            T: 8
        }, {
            no: 3,
            name: "prediction",
            kind: "message",
            T: Bm
        }]));
        static fromBinary(e, t) {
            return (new hm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new hm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new hm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(hm, e, t)
        }
    }
    class Fm extends E {
        type = ms.UNSPECIFIED;
        modelName = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.code_edit.code_edit_pb.RetrieverInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "type",
            kind: "enum",
            T: ye.getEnumType(ms)
        }, {
            no: 2,
            name: "model_name",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Fm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Fm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Fm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Fm, e, t)
        }
    }
    class bm extends E {
        precisionScore = 0;
        recallScore = 0;
        accuracyScore = 0;
        labelRankingAveragePrecisionScore = 0;
        rocAucScore = 0;
        averagePrecisionScore = 0;
        threshold = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.code_edit.code_edit_pb.RetrievalMetrics";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "retriever_info",
            kind: "message",
            T: Fm
        }, {
            no: 2,
            name: "precision_score",
            kind: "scalar",
            T: 2
        }, {
            no: 3,
            name: "recall_score",
            kind: "scalar",
            T: 2
        }, {
            no: 4,
            name: "accuracy_score",
            kind: "scalar",
            T: 2
        }, {
            no: 5,
            name: "label_ranking_average_precision_score",
            kind: "scalar",
            T: 2
        }, {
            no: 6,
            name: "roc_auc_score",
            kind: "scalar",
            T: 2
        }, {
            no: 7,
            name: "average_precision_score",
            kind: "scalar",
            T: 2
        }, {
            no: 8,
            name: "threshold",
            kind: "scalar",
            T: 2
        }]));
        static fromBinary(e, t) {
            return (new bm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new bm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new bm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(bm, e, t)
        }
    }
    class qm extends (null) {
        classifiedItems = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "repository",
            kind: "message",
            T: Xn
        }, {
            no: 2,
            name: "classified_items",
            kind: "message",
            T: hm,
            repeated: !0
        }, {
            no: 3,
            name: "metrics",
            kind: "message",
            T: bm
        }]));
        static fromBinary(e, t) {
            return (new qm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new qm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new qm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(qm, e, t)
        }
    }
    class Gm extends E {
        id = 0;
        file = "";
        function = "";
        instruction = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.code_edit.code_edit_pb.InstructionWithId";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "id",
            kind: "scalar",
            T: 5
        }, {
            no: 2,
            name: "file",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "function",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "instruction",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Gm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Gm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Gm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Gm, e, t)
        }
    }
    class Hm extends (null) {
        instructions = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "instructions",
            kind: "message",
            T: Gm,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Hm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Hm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Hm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Hm, e, t)
        }
    }
    !function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.HYBRID = 1] = "HYBRID",
        e[e.KEYWORD = 2] = "KEYWORD",
        e[e.APPROXIMATE_KNN = 3] = "APPROXIMATE_KNN",
        e[e.BRUTE_FORCE_KNN = 4] = "BRUTE_FORCE_KNN"
    }(cs || (cs = {})),
    ye.util.setEnumType(cs, "exa.opensearch_clients_pb.SearchMode", [{
        no: 0,
        name: "SEARCH_MODE_UNSPECIFIED"
    }, {
        no: 1,
        name: "SEARCH_MODE_HYBRID"
    }, {
        no: 2,
        name: "SEARCH_MODE_KEYWORD"
    }, {
        no: 3,
        name: "SEARCH_MODE_APPROXIMATE_KNN"
    }, {
        no: 4,
        name: "SEARCH_MODE_BRUTE_FORCE_KNN"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.FAILURE = 1] = "FAILURE",
        e[e.SAVED = 2] = "SAVED",
        e[e.SUCCESS = 3] = "SUCCESS"
    }(us || (us = {})),
    ye.util.setEnumType(us, "exa.opensearch_clients_pb.ForwardStatus", [{
        no: 0,
        name: "FORWARD_STATUS_UNSPECIFIED"
    }, {
        no: 1,
        name: "FORWARD_STATUS_FAILURE"
    }, {
        no: 2,
        name: "FORWARD_STATUS_SAVED"
    }, {
        no: 3,
        name: "FORWARD_STATUS_SUCCESS"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.GITHUB = 1] = "GITHUB",
        e[e.SLACK = 2] = "SLACK",
        e[e.GOOGLE_DRIVE = 3] = "GOOGLE_DRIVE",
        e[e.JIRA = 4] = "JIRA",
        e[e.CODEIUM = 5] = "CODEIUM",
        e[e.EMAIL = 6] = "EMAIL"
    }(ls || (ls = {})),
    ye.util.setEnumType(ls, "exa.opensearch_clients_pb.ConnectorType", [{
        no: 0,
        name: "CONNECTOR_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CONNECTOR_TYPE_GITHUB"
    }, {
        no: 2,
        name: "CONNECTOR_TYPE_SLACK"
    }, {
        no: 3,
        name: "CONNECTOR_TYPE_GOOGLE_DRIVE"
    }, {
        no: 4,
        name: "CONNECTOR_TYPE_JIRA"
    }, {
        no: 5,
        name: "CONNECTOR_TYPE_CODEIUM"
    }, {
        no: 6,
        name: "CONNECTOR_TYPE_EMAIL"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.QUEUED = 1] = "QUEUED",
        e[e.RUNNING = 2] = "RUNNING",
        e[e.COMPLETED = 3] = "COMPLETED",
        e[e.CANCELLED = 4] = "CANCELLED",
        e[e.CANCELLING = 5] = "CANCELLING",
        e[e.ERRORED = 6] = "ERRORED",
        e[e.RETRYABLE = 7] = "RETRYABLE"
    }(_s || (_s = {})),
    ye.util.setEnumType(_s, "exa.opensearch_clients_pb.JobStatus", [{
        no: 0,
        name: "JOB_STATUS_UNSPECIFIED"
    }, {
        no: 1,
        name: "JOB_STATUS_QUEUED"
    }, {
        no: 2,
        name: "JOB_STATUS_RUNNING"
    }, {
        no: 3,
        name: "JOB_STATUS_COMPLETED"
    }, {
        no: 4,
        name: "JOB_STATUS_CANCELLED"
    }, {
        no: 5,
        name: "JOB_STATUS_CANCELLING"
    }, {
        no: 6,
        name: "JOB_STATUS_ERRORED"
    }, {
        no: 7,
        name: "JOB_STATUS_RETRYABLE"
    }]);
    class vm extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.TimeRange";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "start",
            kind: "message",
            T: De
        }, {
            no: 2,
            name: "end",
            kind: "message",
            T: De
        }]));
        static fromBinary(e, t) {
            return (new vm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new vm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new vm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(vm, e, t)
        }
    }
    class Vm extends E {
        authUid = "";
        username = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.GithubUser";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "auth_uid",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "username",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Vm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Vm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Vm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Vm, e, t)
        }
    }
    class Ym extends (null) {
        users = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "users",
            kind: "message",
            T: Vm,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Ym).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ym).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ym).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Ym, e, t)
        }
    }
    class Xm extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Xm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Xm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Xm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Xm, e, t)
        }
    }
    class Km extends E {
        authUid = "";
        email = "";
        name = "";
        photoUrl = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.UserInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "auth_uid",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "email",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "name",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "photo_url",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Km).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Km).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Km).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Km, e, t)
        }
    }
    class Wm extends (null) {
        users = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "users",
            kind: "message",
            T: Km,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Wm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Wm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Wm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Wm, e, t)
        }
    }
    class zm extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new zm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new zm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new zm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(zm, e, t)
        }
    }
    class jm extends (null) {
        maxResults = protoInt64.zero;
        queries = [];
        urls = [];
        documentIds = [];
        aggregateIds = [];
        chatMessagePrompts = [];
        documentTypes = [];
        searchMode = cs.UNSPECIFIED;
        disableReranking = !1;
        disableContextualLookup = !1;
        indexChoices = [];
        query = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 2,
            name: "max_results",
            kind: "scalar",
            T: 3
        }, {
            no: 3,
            name: "queries",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 4,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 12,
            name: "urls",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 13,
            name: "document_ids",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 5,
            name: "aggregate_ids",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 6,
            name: "chat_message_prompts",
            kind: "message",
            T: wi,
            repeated: !0
        }, {
            no: 7,
            name: "time_range",
            kind: "message",
            T: vm
        }, {
            no: 14,
            name: "document_types",
            kind: "enum",
            T: ye.getEnumType(Lt),
            repeated: !0
        }, {
            no: 9,
            name: "search_mode",
            kind: "enum",
            T: ye.getEnumType(cs)
        }, {
            no: 10,
            name: "disable_reranking",
            kind: "scalar",
            T: 8
        }, {
            no: 11,
            name: "disable_contextual_lookup",
            kind: "scalar",
            T: 8
        }, {
            no: 8,
            name: "index_choices",
            kind: "enum",
            T: ye.getEnumType(xt),
            repeated: !0
        }, {
            no: 1,
            name: "query",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new jm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new jm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new jm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(jm, e, t)
        }
    }
    class Qm extends (null) {
        knowledgeBaseGroups = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "knowledge_base_groups",
            kind: "message",
            T: Sr,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Qm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Qm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Qm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Qm, e, t)
        }
    }
    class $m extends (null) {
        query = "";
        documentTypes = [];
        indexChoices = [];
        indexNames = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "query",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 5,
            name: "document_types",
            kind: "enum",
            T: ye.getEnumType(Lt),
            repeated: !0
        }, {
            no: 4,
            name: "index_choices",
            kind: "enum",
            T: ye.getEnumType(xt),
            repeated: !0
        }, {
            no: 2,
            name: "index_names",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new $m).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new $m).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new $m).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals($m, e, t)
        }
    }
    class Zm extends (null) {
        scopeItems = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "scope_items",
            kind: "message",
            T: Oa,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Zm).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Zm).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Zm).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Zm, e, t)
        }
    }
    class ec extends (null) {
        scopeItems = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 2,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 3,
            name: "scope_items",
            kind: "message",
            T: Oa,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new ec).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ec).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ec).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(ec, e, t)
        }
    }
    class tc extends (null) {
        knowledgeBaseItemsWithMetadata = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "knowledge_base_items_with_metadata",
            kind: "message",
            T: pr,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new tc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new tc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new tc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(tc, e, t)
        }
    }
    class nc extends (null) {
        channelIds = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "channel_ids",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new nc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new nc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new nc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(nc, e, t)
        }
    }
    class ac extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new ac).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ac).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ac).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(ac, e, t)
        }
    }
    class rc extends (null) {
        organization = "";
        repository = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 3,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 1,
            name: "organization",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "repository",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new rc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new rc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new rc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(rc, e, t)
        }
    }
    class sc extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new sc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new sc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new sc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(sc, e, t)
        }
    }
    class ic extends (null) {
        folderIds = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 2,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 3,
            name: "folder_ids",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new ic).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ic).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ic).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(ic, e, t)
        }
    }
    class oc extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new oc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new oc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new oc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(oc, e, t)
        }
    }
    class mc extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 4,
            name: "metadata",
            kind: "message",
            T: po
        }]));
        static fromBinary(e, t) {
            return (new mc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new mc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new mc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(mc, e, t)
        }
    }
    class cc extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new cc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new cc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new cc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(cc, e, t)
        }
    }
    class uc extends (null) {
        body = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 3,
            name: "body",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new uc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new uc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new uc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(uc, e, t)
        }
    }
    class lc extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new lc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new lc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new lc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(lc, e, t)
        }
    }
    class _c extends E {
        status = us.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.ForwardResult";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "status",
            kind: "enum",
            T: ye.getEnumType(us)
        }, {
            no: 2,
            name: "error",
            kind: "scalar",
            T: 9,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new _c).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new _c).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new _c).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(_c, e, t)
        }
    }
    class Ec extends (null) {
        bodies = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "bodies",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Ec).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ec).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ec).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Ec, e, t)
        }
    }
    class dc extends (null) {
        results = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "results",
            kind: "message",
            T: _c,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new dc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new dc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new dc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(dc, e, t)
        }
    }
    class Tc extends (null) {
        payload = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "payload",
            kind: "message",
            T: iu,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Tc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Tc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Tc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Tc, e, t)
        }
    }
    class fc extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new fc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new fc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new fc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(fc, e, t)
        }
    }
    class pc extends E {
        documentId = "";
        text = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.CommonDocument";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "document_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "text",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new pc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new pc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new pc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(pc, e, t)
        }
    }
    class Sc extends E {
        score = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.CommonDocumentWithScore";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "document",
            kind: "message",
            T: pc
        }, {
            no: 2,
            name: "score",
            kind: "scalar",
            T: 2
        }]));
        static fromBinary(e, t) {
            return (new Sc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Sc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Sc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Sc, e, t)
        }
    }
    class Nc extends (null) {
        text = "";
        url = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "text",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "url",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Nc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Nc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Nc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Nc, e, t)
        }
    }
    class Cc extends (null) {
        documentWithScores = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "document_with_scores",
            kind: "message",
            T: Sc,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Cc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Cc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Cc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Cc, e, t)
        }
    }
    class Ic extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "config",
            kind: "message",
            T: oo
        }, {
            no: 3,
            name: "initial_index",
            kind: "message",
            T: fo
        }]));
        static fromBinary(e, t) {
            return (new Ic).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ic).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ic).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Ic, e, t)
        }
    }
    class gc extends (null) {
        repoName = "";
        indexId = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "repo_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "index_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new gc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new gc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new gc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(gc, e, t)
        }
    }
    class Oc extends (null) {
        indexId = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "index_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Oc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Oc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Oc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Oc, e, t)
        }
    }
    class Ac extends (null) {
        status = IndexingStatus.UNSPECIFIED;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "status",
            kind: "enum",
            T: ye.getEnumType(rs)
        }]));
        static fromBinary(e, t) {
            return (new Ac).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ac).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ac).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Ac, e, t)
        }
    }
    class Pc extends (null) {
        query = "";
        maxResults = protoInt64.zero;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "query",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "embedding",
            kind: "message",
            T: gn
        }, {
            no: 3,
            name: "max_results",
            kind: "scalar",
            T: 3
        }]));
        static fromBinary(e, t) {
            return (new Pc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Pc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Pc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Pc, e, t)
        }
    }
    class Lc extends (null) {
        documentWithScores = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "document_with_scores",
            kind: "message",
            T: Sc,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Lc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Lc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Lc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Lc, e, t)
        }
    }
    class Rc extends (null) {
        query = "";
        maxResults = protoInt64.zero;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "query",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "embedding",
            kind: "message",
            T: gn
        }, {
            no: 3,
            name: "max_results",
            kind: "scalar",
            T: 3
        }]));
        static fromBinary(e, t) {
            return (new Rc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Rc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Rc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Rc, e, t)
        }
    }
    class yc extends (null) {
        documentWithScores = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "document_with_scores",
            kind: "message",
            T: Sc,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new yc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new yc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new yc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(yc, e, t)
        }
    }
    class wc extends E {
        config = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.ConnectorConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "slack",
            kind: "message",
            T: kc,
            oneof: "config"
        }, {
            no: 2,
            name: "github",
            kind: "message",
            T: Dc,
            oneof: "config"
        }, {
            no: 3,
            name: "google_drive",
            kind: "message",
            T: Jc,
            oneof: "config"
        }, {
            no: 4,
            name: "jira",
            kind: "message",
            T: Mc,
            oneof: "config"
        }]));
        static fromBinary(e, t) {
            return (new wc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new wc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new wc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(wc, e, t)
        }
    }
    class kc extends E {
        includeChannelIds = [];
        excludeChannelIds = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.ConnectorConfigSlack";
        static fields = ye.util.newFieldList(( () => [{
            no: 3,
            name: "include_channel_ids",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 4,
            name: "exclude_channel_ids",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new kc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new kc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new kc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(kc, e, t)
        }
    }
    class Dc extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.ConnectorConfigGithub";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Dc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Dc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Dc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Dc, e, t)
        }
    }
    class Jc extends E {
        includeDriveIds = [];
        excludeDriveIds = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.ConnectorConfigGoogleDrive";
        static fields = ye.util.newFieldList(( () => [{
            no: 2,
            name: "include_drive_ids",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 3,
            name: "exclude_drive_ids",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Jc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Jc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Jc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Jc, e, t)
        }
    }
    class Mc extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.ConnectorConfigJira";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Mc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Mc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Mc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Mc, e, t)
        }
    }
    class Uc extends E {
        config = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.ConnectorInternalConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "slack",
            kind: "message",
            T: xc,
            oneof: "config"
        }, {
            no: 2,
            name: "github",
            kind: "message",
            T: hc,
            oneof: "config"
        }, {
            no: 3,
            name: "google_drive",
            kind: "message",
            T: Fc,
            oneof: "config"
        }, {
            no: 4,
            name: "jira",
            kind: "message",
            T: bc,
            oneof: "config"
        }]));
        static fromBinary(e, t) {
            return (new Uc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Uc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Uc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Uc, e, t)
        }
    }
    class xc extends E {
        clientId = "";
        clientSecret = "";
        signingSecret = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.ConnectorInternalConfigSlack";
        static fields = ye.util.newFieldList(( () => [{
            no: 2,
            name: "client_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "client_secret",
            kind: "scalar",
            T: 9
        }, {
            no: 1,
            name: "signing_secret",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new xc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new xc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new xc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(xc, e, t)
        }
    }
    class Bc extends E {
        organization = "";
        repository = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.GithubRepoConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "organization",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "repository",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Bc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Bc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Bc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Bc, e, t)
        }
    }
    class hc extends E {
        installationId = A.zero;
        repoConfigs = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.ConnectorInternalConfigGithub";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "installation_id",
            kind: "scalar",
            T: 3
        }, {
            no: 2,
            name: "repo_configs",
            kind: "message",
            T: Bc,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new hc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new hc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new hc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(hc, e, t)
        }
    }
    class Fc extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.ConnectorInternalConfigGoogleDrive";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Fc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Fc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Fc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Fc, e, t)
        }
    }
    class bc extends E {
        webhookId = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.ConnectorInternalConfigJira";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "webhook_id",
            kind: "scalar",
            T: 3
        }]));
        static fromBinary(e, t) {
            return (new bc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new bc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new bc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(bc, e, t)
        }
    }
    class qc extends (null) {
        connector = ls.UNSPECIFIED;
        accessToken = "";
        refreshToken = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 7,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "connector",
            kind: "enum",
            T: ye.getEnumType(ls)
        }, {
            no: 3,
            name: "access_token",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "access_token_expires_at",
            kind: "message",
            T: De
        }, {
            no: 5,
            name: "refresh_token",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "refresh_token_expires_at",
            kind: "message",
            T: De
        }, {
            no: 8,
            name: "additional_params",
            kind: "message",
            T: Yc
        }]));
        static fromBinary(e, t) {
            return (new qc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new qc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new qc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(qc, e, t)
        }
    }
    class Gc extends (null) {
        connector = ls.UNSPECIFIED;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "connector",
            kind: "enum",
            T: ye.getEnumType(ls)
        }]));
        static fromBinary(e, t) {
            return (new Gc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Gc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Gc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Gc, e, t)
        }
    }
    class Hc extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Hc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Hc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Hc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Hc, e, t)
        }
    }
    class vc extends (null) {
        connector = ls.UNSPECIFIED;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "connector",
            kind: "enum",
            T: ye.getEnumType(ls)
        }, {
            no: 3,
            name: "config",
            kind: "message",
            T: wc
        }]));
        static fromBinary(e, t) {
            return (new vc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new vc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new vc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(vc, e, t)
        }
    }
    class Vc extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Vc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Vc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Vc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Vc, e, t)
        }
    }
    class Yc extends E {
        config = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.ConnectorAdditionalParams";
        static fields = ye.util.newFieldList(( () => [{
            no: 2,
            name: "slack",
            kind: "message",
            T: Xc,
            oneof: "config"
        }, {
            no: 1,
            name: "github",
            kind: "message",
            T: Kc,
            oneof: "config"
        }]));
        static fromBinary(e, t) {
            return (new Yc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Yc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Yc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Yc, e, t)
        }
    }
    class Xc extends E {
        clientId = "";
        clientSecret = "";
        signingSecret = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.ConnectorAdditionalParamsSlack";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "client_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "client_secret",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "signing_secret",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Xc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Xc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Xc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Xc, e, t)
        }
    }
    class Kc extends E {
        installationId = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.ConnectorAdditionalParamsGithub";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "installation_id",
            kind: "scalar",
            T: 3
        }]));
        static fromBinary(e, t) {
            return (new Kc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Kc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Kc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Kc, e, t)
        }
    }
    class Wc extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Wc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Wc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Wc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Wc, e, t)
        }
    }
    class zc extends (null) {
        jobIds = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "job_ids",
            kind: "scalar",
            T: 3,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new zc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new zc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new zc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(zc, e, t)
        }
    }
    class jc extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new jc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new jc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new jc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(jc, e, t)
        }
    }
    class Qc extends E {
        documentType = Lt.UNSPECIFIED;
        count = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.DocumentTypeCount";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "document_type",
            kind: "enum",
            T: ye.getEnumType(Lt)
        }, {
            no: 2,
            name: "count",
            kind: "scalar",
            T: 3
        }]));
        static fromBinary(e, t) {
            return (new Qc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Qc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Qc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Qc, e, t)
        }
    }
    class $c extends E {
        connector = ls.UNSPECIFIED;
        initialized = !1;
        documentTypeCounts = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.ConnectorState";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "connector",
            kind: "enum",
            T: ye.getEnumType(ls)
        }, {
            no: 2,
            name: "initialized",
            kind: "scalar",
            T: 8
        }, {
            no: 3,
            name: "config",
            kind: "message",
            T: wc
        }, {
            no: 4,
            name: "document_type_counts",
            kind: "message",
            T: Qc,
            repeated: !0
        }, {
            no: 5,
            name: "last_indexed_at",
            kind: "message",
            T: De
        }, {
            no: 6,
            name: "unhealthy_since",
            kind: "message",
            T: De
        }, {
            no: 7,
            name: "last_configured_at",
            kind: "message",
            T: De
        }]));
        static fromBinary(e, t) {
            return (new $c).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new $c).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new $c).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals($c, e, t)
        }
    }
    class Zc extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }]));
        static fromBinary(e, t) {
            return (new Zc).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Zc).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Zc).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Zc, e, t)
        }
    }
    class eu extends (null) {
        connectorStates = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "connector_states",
            kind: "message",
            T: $c,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new eu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new eu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new eu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(eu, e, t)
        }
    }
    class tu extends E {
        connector = ls.UNSPECIFIED;
        id = A.zero;
        status = _s.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.JobState";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "connector",
            kind: "enum",
            T: ye.getEnumType(ls)
        }, {
            no: 2,
            name: "id",
            kind: "scalar",
            T: 3
        }, {
            no: 3,
            name: "status",
            kind: "enum",
            T: ye.getEnumType(_s)
        }]));
        static fromBinary(e, t) {
            return (new tu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new tu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new tu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(tu, e, t)
        }
    }
    class nu extends (null) {
        connectorTypes = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }, {
            no: 2,
            name: "connector_types",
            kind: "enum",
            T: ye.getEnumType(ls),
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new nu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new nu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new nu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(nu, e, t)
        }
    }
    class au extends (null) {
        jobStates = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "job_states",
            kind: "message",
            T: tu,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new au).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new au).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new au).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(au, e, t)
        }
    }
    class ru extends E {
        datasetId = "";
        previousMessageDatasetId = "";
        type = "";
        channelId = "";
        user = "";
        text = "";
        timestamp = "";
        threadTimestamp = "";
        channelName = "";
        teamName = "";
        teamId = "";
        isPrivateChannel = !1;
        teamDomain = "";
        originalTimestamp = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.SlackMessagePayload";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "dataset_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "previous_message_dataset_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "type",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "channel_id",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "user",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "text",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "timestamp",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "thread_timestamp",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "channel_name",
            kind: "scalar",
            T: 9
        }, {
            no: 10,
            name: "team_name",
            kind: "scalar",
            T: 9
        }, {
            no: 11,
            name: "team_id",
            kind: "scalar",
            T: 9
        }, {
            no: 12,
            name: "is_private_channel",
            kind: "scalar",
            T: 8
        }, {
            no: 13,
            name: "team_domain",
            kind: "scalar",
            T: 9
        }, {
            no: 14,
            name: "original_timestamp",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new ru).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ru).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ru).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ru, e, t)
        }
    }
    class su extends E {
        type = "";
        channelId = "";
        channelName = "";
        description = "";
        teamId = "";
        isPrivateChannel = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.SlackChannelPayload";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "type",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "channel_id",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "channel_name",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "description",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "team_id",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "is_private_channel",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new su).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new su).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new su).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(su, e, t)
        }
    }
    class iu extends E {
        payload = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.opensearch_clients_pb.SlackPayload";
        static fields = ye.util.newFieldList(( () => [{
            no: 13,
            name: "message",
            kind: "message",
            T: ru,
            oneof: "payload"
        }, {
            no: 14,
            name: "channel",
            kind: "message",
            T: su,
            oneof: "payload"
        }]));
        static fromBinary(e, t) {
            return (new iu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new iu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new iu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(iu, e, t)
        }
    }
    class ou extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: po
        }]));
        static fromBinary(e, t) {
            return (new ou).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ou).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ou).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(ou, e, t)
        }
    }
    class mu extends (null) {
        webhookUrl = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "webhook_url",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new mu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new mu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new mu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(mu, e, t)
        }
    }
    class cu extends (null) {
        connector = ls.UNSPECIFIED;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "connector",
            kind: "enum",
            T: ye.getEnumType(ls)
        }]));
        static fromBinary(e, t) {
            return (new cu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new cu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new cu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(cu, e, t)
        }
    }
    class uu extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "internal_config",
            kind: "message",
            T: Uc
        }]));
        static fromBinary(e, t) {
            return (new uu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new uu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new uu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(uu, e, t)
        }
    }
    !function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.ERROR = 1] = "ERROR",
        e[e.INITIALIZED = 2] = "INITIALIZED",
        e[e.PREPARING = 3] = "PREPARING",
        e[e.PREPARED = 4] = "PREPARED",
        e[e.APPLYING = 5] = "APPLYING",
        e[e.APPLIED = 6] = "APPLIED",
        e[e.REJECTED = 7] = "REJECTED"
    }(Es || (Es = {})),
    ye.util.setEnumType(Es, "exa.cortex_pb.ActionStatus", [{
        no: 0,
        name: "ACTION_STATUS_UNSPECIFIED"
    }, {
        no: 1,
        name: "ACTION_STATUS_ERROR"
    }, {
        no: 2,
        name: "ACTION_STATUS_INITIALIZED"
    }, {
        no: 3,
        name: "ACTION_STATUS_PREPARING"
    }, {
        no: 4,
        name: "ACTION_STATUS_PREPARED"
    }, {
        no: 5,
        name: "ACTION_STATUS_APPLYING"
    }, {
        no: 6,
        name: "ACTION_STATUS_APPLIED"
    }, {
        no: 7,
        name: "ACTION_STATUS_REJECTED"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.INITIALIZED = 1] = "INITIALIZED",
        e[e.PLANNING = 2] = "PLANNING",
        e[e.PLANNED = 3] = "PLANNED",
        e[e.ERROR = 4] = "ERROR"
    }(ds || (ds = {})),
    ye.util.setEnumType(ds, "exa.cortex_pb.PlanStatus", [{
        no: 0,
        name: "PLAN_STATUS_UNSPECIFIED"
    }, {
        no: 1,
        name: "PLAN_STATUS_INITIALIZED"
    }, {
        no: 2,
        name: "PLAN_STATUS_PLANNING"
    }, {
        no: 3,
        name: "PLAN_STATUS_PLANNED"
    }, {
        no: 4,
        name: "PLAN_STATUS_ERROR"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.CASCADE = 1] = "CASCADE",
        e[e.USER_IMPLICIT = 2] = "USER_IMPLICIT"
    }(Ts || (Ts = {})),
    ye.util.setEnumType(Ts, "exa.cortex_pb.CortexRequestSource", [{
        no: 0,
        name: "CORTEX_REQUEST_SOURCE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CORTEX_REQUEST_SOURCE_CASCADE"
    }, {
        no: 2,
        name: "CORTEX_REQUEST_SOURCE_USER_IMPLICIT"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.CASCADE_CLIENT = 1] = "CASCADE_CLIENT",
        e[e.EXPLAIN_PROBLEM = 2] = "EXPLAIN_PROBLEM",
        e[e.REFACTOR_FUNCTION = 3] = "REFACTOR_FUNCTION",
        e[e.EVAL = 4] = "EVAL",
        e[e.EVAL_TASK = 5] = "EVAL_TASK"
    }(fs || (fs = {})),
    ye.util.setEnumType(fs, "exa.cortex_pb.CortexTrajectorySource", [{
        no: 0,
        name: "CORTEX_TRAJECTORY_SOURCE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CORTEX_TRAJECTORY_SOURCE_CASCADE_CLIENT"
    }, {
        no: 2,
        name: "CORTEX_TRAJECTORY_SOURCE_EXPLAIN_PROBLEM"
    }, {
        no: 3,
        name: "CORTEX_TRAJECTORY_SOURCE_REFACTOR_FUNCTION"
    }, {
        no: 4,
        name: "CORTEX_TRAJECTORY_SOURCE_EVAL"
    }, {
        no: 5,
        name: "CORTEX_TRAJECTORY_SOURCE_EVAL_TASK"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.USER_MAINLINE = 1] = "USER_MAINLINE",
        e[e.USER_GRANULAR = 2] = "USER_GRANULAR",
        e[e.SUPERCOMPLETE = 3] = "SUPERCOMPLETE",
        e[e.CASCADE = 4] = "CASCADE",
        e[e.BACKGROUND_RESEARCH = 5] = "BACKGROUND_RESEARCH",
        e[e.CHECKPOINT = 6] = "CHECKPOINT",
        e[e.RETRIEVE_MEMORY = 7] = "RETRIEVE_MEMORY",
        e[e.CUSTOM_TOOL = 8] = "CUSTOM_TOOL",
        e[e.AUTO_CASCADE = 9] = "AUTO_CASCADE",
        e[e.AUTO_CASCADE_MANAGER = 10] = "AUTO_CASCADE_MANAGER",
        e[e.APPLIER = 11] = "APPLIER",
        e[e.TOOL_CALL_PROPOSAL = 12] = "TOOL_CALL_PROPOSAL",
        e[e.TRAJECTORY_CHOICE = 13] = "TRAJECTORY_CHOICE",
        e[e.LLM_JUDGE = 14] = "LLM_JUDGE"
    }(ps || (ps = {})),
    ye.util.setEnumType(ps, "exa.cortex_pb.CortexTrajectoryType", [{
        no: 0,
        name: "CORTEX_TRAJECTORY_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CORTEX_TRAJECTORY_TYPE_USER_MAINLINE"
    }, {
        no: 2,
        name: "CORTEX_TRAJECTORY_TYPE_USER_GRANULAR"
    }, {
        no: 3,
        name: "CORTEX_TRAJECTORY_TYPE_SUPERCOMPLETE"
    }, {
        no: 4,
        name: "CORTEX_TRAJECTORY_TYPE_CASCADE"
    }, {
        no: 5,
        name: "CORTEX_TRAJECTORY_TYPE_BACKGROUND_RESEARCH"
    }, {
        no: 6,
        name: "CORTEX_TRAJECTORY_TYPE_CHECKPOINT"
    }, {
        no: 7,
        name: "CORTEX_TRAJECTORY_TYPE_RETRIEVE_MEMORY"
    }, {
        no: 8,
        name: "CORTEX_TRAJECTORY_TYPE_CUSTOM_TOOL"
    }, {
        no: 9,
        name: "CORTEX_TRAJECTORY_TYPE_AUTO_CASCADE"
    }, {
        no: 10,
        name: "CORTEX_TRAJECTORY_TYPE_AUTO_CASCADE_MANAGER"
    }, {
        no: 11,
        name: "CORTEX_TRAJECTORY_TYPE_APPLIER"
    }, {
        no: 12,
        name: "CORTEX_TRAJECTORY_TYPE_TOOL_CALL_PROPOSAL"
    }, {
        no: 13,
        name: "CORTEX_TRAJECTORY_TYPE_TRAJECTORY_CHOICE"
    }, {
        no: 14,
        name: "CORTEX_TRAJECTORY_TYPE_LLM_JUDGE"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.MANUAL = 1] = "MANUAL",
        e[e.MODEL = 2] = "MODEL",
        e[e.USER_IMPLICIT = 3] = "USER_IMPLICIT",
        e[e.USER_EXPLICIT = 4] = "USER_EXPLICIT",
        e[e.SYSTEM = 5] = "SYSTEM"
    }(Ss || (Ss = {})),
    ye.util.setEnumType(Ss, "exa.cortex_pb.CortexStepSource", [{
        no: 0,
        name: "CORTEX_STEP_SOURCE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CORTEX_STEP_SOURCE_MANUAL"
    }, {
        no: 2,
        name: "CORTEX_STEP_SOURCE_MODEL"
    }, {
        no: 3,
        name: "CORTEX_STEP_SOURCE_USER_IMPLICIT"
    }, {
        no: 4,
        name: "CORTEX_STEP_SOURCE_USER_EXPLICIT"
    }, {
        no: 5,
        name: "CORTEX_STEP_SOURCE_SYSTEM"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.LINT_FIXING_DISCOUNT = 1] = "LINT_FIXING_DISCOUNT"
    }(Ns || (Ns = {})),
    ye.util.setEnumType(Ns, "exa.cortex_pb.CortexStepCreditReason", [{
        no: 0,
        name: "CORTEX_STEP_CREDIT_REASON_UNSPECIFIED"
    }, {
        no: 1,
        name: "CORTEX_STEP_CREDIT_REASON_LINT_FIXING_DISCOUNT"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.INVOCATION_BLOCKING = 1] = "INVOCATION_BLOCKING",
        e[e.EXECUTOR_BLOCKING = 2] = "EXECUTOR_BLOCKING",
        e[e.FULL_ASYNC = 3] = "FULL_ASYNC"
    }(Cs || (Cs = {})),
    ye.util.setEnumType(Cs, "exa.cortex_pb.ExecutionAsyncLevel", [{
        no: 0,
        name: "EXECUTION_ASYNC_LEVEL_UNSPECIFIED"
    }, {
        no: 1,
        name: "EXECUTION_ASYNC_LEVEL_INVOCATION_BLOCKING"
    }, {
        no: 2,
        name: "EXECUTION_ASYNC_LEVEL_EXECUTOR_BLOCKING"
    }, {
        no: 3,
        name: "EXECUTION_ASYNC_LEVEL_FULL_ASYNC"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.GENERATING = 8] = "GENERATING",
        e[e.HALTED = 10] = "HALTED",
        e[e.PENDING = 1] = "PENDING",
        e[e.RUNNING = 2] = "RUNNING",
        e[e.WAITING = 9] = "WAITING",
        e[e.DONE = 3] = "DONE",
        e[e.INVALID = 4] = "INVALID",
        e[e.CLEARED = 5] = "CLEARED",
        e[e.CANCELED = 6] = "CANCELED",
        e[e.ERROR = 7] = "ERROR"
    }(Is || (Is = {})),
    ye.util.setEnumType(Is, "exa.cortex_pb.CortexStepStatus", [{
        no: 0,
        name: "CORTEX_STEP_STATUS_UNSPECIFIED"
    }, {
        no: 8,
        name: "CORTEX_STEP_STATUS_GENERATING"
    }, {
        no: 10,
        name: "CORTEX_STEP_STATUS_HALTED"
    }, {
        no: 1,
        name: "CORTEX_STEP_STATUS_PENDING"
    }, {
        no: 2,
        name: "CORTEX_STEP_STATUS_RUNNING"
    }, {
        no: 9,
        name: "CORTEX_STEP_STATUS_WAITING"
    }, {
        no: 3,
        name: "CORTEX_STEP_STATUS_DONE"
    }, {
        no: 4,
        name: "CORTEX_STEP_STATUS_INVALID"
    }, {
        no: 5,
        name: "CORTEX_STEP_STATUS_CLEARED"
    }, {
        no: 6,
        name: "CORTEX_STEP_STATUS_CANCELED"
    }, {
        no: 7,
        name: "CORTEX_STEP_STATUS_ERROR"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.IDLE = 1] = "IDLE",
        e[e.RUNNING = 2] = "RUNNING",
        e[e.CANCELING = 3] = "CANCELING",
        e[e.BUSY = 4] = "BUSY"
    }(gs || (gs = {})),
    ye.util.setEnumType(gs, "exa.cortex_pb.CascadeRunStatus", [{
        no: 0,
        name: "CASCADE_RUN_STATUS_UNSPECIFIED"
    }, {
        no: 1,
        name: "CASCADE_RUN_STATUS_IDLE"
    }, {
        no: 2,
        name: "CASCADE_RUN_STATUS_RUNNING"
    }, {
        no: 3,
        name: "CASCADE_RUN_STATUS_CANCELING"
    }, {
        no: 4,
        name: "CASCADE_RUN_STATUS_BUSY"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.SMARTLINT = 1] = "SMARTLINT"
    }(Os || (Os = {})),
    ye.util.setEnumType(Os, "exa.cortex_pb.AgenticMixin", [{
        no: 0,
        name: "AGENTIC_MIXIN_UNSPECIFIED"
    }, {
        no: 1,
        name: "AGENTIC_MIXIN_SMARTLINT"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.ONLY_COMMAND = 1] = "ONLY_COMMAND",
        e[e.COMMAND_AND_EDITS = 2] = "COMMAND_AND_EDITS",
        e[e.NO_SEARCH = 3] = "NO_SEARCH"
    }(As || (As = {})),
    ye.util.setEnumType(As, "exa.cortex_pb.CascadeAgentToolSet", [{
        no: 0,
        name: "CASCADE_AGENT_TOOL_SET_UNSPECIFIED"
    }, {
        no: 1,
        name: "CASCADE_AGENT_TOOL_SET_ONLY_COMMAND"
    }, {
        no: 2,
        name: "CASCADE_AGENT_TOOL_SET_COMMAND_AND_EDITS"
    }, {
        no: 3,
        name: "CASCADE_AGENT_TOOL_SET_NO_SEARCH"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.DUMMY = 1] = "DUMMY",
        e[e.FINISH = 2] = "FINISH",
        e[e.PLAN_INPUT = 3] = "PLAN_INPUT",
        e[e.MQUERY = 4] = "MQUERY",
        e[e.CODE_ACTION = 5] = "CODE_ACTION",
        e[e.GIT_COMMIT = 6] = "GIT_COMMIT",
        e[e.GREP_SEARCH = 7] = "GREP_SEARCH",
        e[e.VIEW_FILE = 8] = "VIEW_FILE",
        e[e.LIST_DIRECTORY = 9] = "LIST_DIRECTORY",
        e[e.COMPILE = 10] = "COMPILE",
        e[e.INFORM = 11] = "INFORM",
        e[e.FILE_BREAKDOWN = 12] = "FILE_BREAKDOWN",
        e[e.VIEW_CODE_ITEM = 13] = "VIEW_CODE_ITEM",
        e[e.USER_INPUT = 14] = "USER_INPUT",
        e[e.PLANNER_RESPONSE = 15] = "PLANNER_RESPONSE",
        e[e.WRITE_TO_FILE = 16] = "WRITE_TO_FILE",
        e[e.ERROR_MESSAGE = 17] = "ERROR_MESSAGE",
        e[e.CLUSTER_QUERY = 18] = "CLUSTER_QUERY",
        e[e.LIST_CLUSTERS = 19] = "LIST_CLUSTERS",
        e[e.INSPECT_CLUSTER = 20] = "INSPECT_CLUSTER",
        e[e.RUN_COMMAND = 21] = "RUN_COMMAND",
        e[e.RELATED_FILES = 22] = "RELATED_FILES",
        e[e.CHECKPOINT = 23] = "CHECKPOINT",
        e[e.PROPOSE_CODE = 24] = "PROPOSE_CODE",
        e[e.FIND = 25] = "FIND",
        e[e.SEARCH_KNOWLEDGE_BASE = 26] = "SEARCH_KNOWLEDGE_BASE",
        e[e.SUGGESTED_RESPONSES = 27] = "SUGGESTED_RESPONSES",
        e[e.COMMAND_STATUS = 28] = "COMMAND_STATUS",
        e[e.MEMORY = 29] = "MEMORY",
        e[e.LOOKUP_KNOWLEDGE_BASE = 30] = "LOOKUP_KNOWLEDGE_BASE",
        e[e.READ_URL_CONTENT = 31] = "READ_URL_CONTENT",
        e[e.VIEW_CONTENT_CHUNK = 32] = "VIEW_CONTENT_CHUNK",
        e[e.SEARCH_WEB = 33] = "SEARCH_WEB",
        e[e.RETRIEVE_MEMORY = 34] = "RETRIEVE_MEMORY",
        e[e.AUTO_CASCADE_BROADCAST = 35] = "AUTO_CASCADE_BROADCAST",
        e[e.CUSTOM_TOOL = 36] = "CUSTOM_TOOL",
        e[e.CREATE_RECIPE = 37] = "CREATE_RECIPE",
        e[e.MCP_TOOL = 38] = "MCP_TOOL",
        e[e.MANAGER_FEEDBACK = 39] = "MANAGER_FEEDBACK",
        e[e.TOOL_CALL_PROPOSAL = 40] = "TOOL_CALL_PROPOSAL",
        e[e.TOOL_CALL_CHOICE = 41] = "TOOL_CALL_CHOICE",
        e[e.TRAJECTORY_CHOICE = 42] = "TRAJECTORY_CHOICE",
        e[e.PROXY_WEB_SERVER = 43] = "PROXY_WEB_SERVER",
        e[e.DEPLOY_WEB_APP = 44] = "DEPLOY_WEB_APP",
        e[e.CLIPBOARD = 45] = "CLIPBOARD",
        e[e.READ_DEPLOYMENT_CONFIG = 46] = "READ_DEPLOYMENT_CONFIG",
        e[e.VIEW_FILE_OUTLINE = 47] = "VIEW_FILE_OUTLINE"
    }(Ps || (Ps = {})),
    ye.util.setEnumType(Ps, "exa.cortex_pb.CortexStepType", [{
        no: 0,
        name: "CORTEX_STEP_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CORTEX_STEP_TYPE_DUMMY"
    }, {
        no: 2,
        name: "CORTEX_STEP_TYPE_FINISH"
    }, {
        no: 3,
        name: "CORTEX_STEP_TYPE_PLAN_INPUT"
    }, {
        no: 4,
        name: "CORTEX_STEP_TYPE_MQUERY"
    }, {
        no: 5,
        name: "CORTEX_STEP_TYPE_CODE_ACTION"
    }, {
        no: 6,
        name: "CORTEX_STEP_TYPE_GIT_COMMIT"
    }, {
        no: 7,
        name: "CORTEX_STEP_TYPE_GREP_SEARCH"
    }, {
        no: 8,
        name: "CORTEX_STEP_TYPE_VIEW_FILE"
    }, {
        no: 9,
        name: "CORTEX_STEP_TYPE_LIST_DIRECTORY"
    }, {
        no: 10,
        name: "CORTEX_STEP_TYPE_COMPILE"
    }, {
        no: 11,
        name: "CORTEX_STEP_TYPE_INFORM"
    }, {
        no: 12,
        name: "CORTEX_STEP_TYPE_FILE_BREAKDOWN"
    }, {
        no: 13,
        name: "CORTEX_STEP_TYPE_VIEW_CODE_ITEM"
    }, {
        no: 14,
        name: "CORTEX_STEP_TYPE_USER_INPUT"
    }, {
        no: 15,
        name: "CORTEX_STEP_TYPE_PLANNER_RESPONSE"
    }, {
        no: 16,
        name: "CORTEX_STEP_TYPE_WRITE_TO_FILE"
    }, {
        no: 17,
        name: "CORTEX_STEP_TYPE_ERROR_MESSAGE"
    }, {
        no: 18,
        name: "CORTEX_STEP_TYPE_CLUSTER_QUERY"
    }, {
        no: 19,
        name: "CORTEX_STEP_TYPE_LIST_CLUSTERS"
    }, {
        no: 20,
        name: "CORTEX_STEP_TYPE_INSPECT_CLUSTER"
    }, {
        no: 21,
        name: "CORTEX_STEP_TYPE_RUN_COMMAND"
    }, {
        no: 22,
        name: "CORTEX_STEP_TYPE_RELATED_FILES"
    }, {
        no: 23,
        name: "CORTEX_STEP_TYPE_CHECKPOINT"
    }, {
        no: 24,
        name: "CORTEX_STEP_TYPE_PROPOSE_CODE"
    }, {
        no: 25,
        name: "CORTEX_STEP_TYPE_FIND"
    }, {
        no: 26,
        name: "CORTEX_STEP_TYPE_SEARCH_KNOWLEDGE_BASE"
    }, {
        no: 27,
        name: "CORTEX_STEP_TYPE_SUGGESTED_RESPONSES"
    }, {
        no: 28,
        name: "CORTEX_STEP_TYPE_COMMAND_STATUS"
    }, {
        no: 29,
        name: "CORTEX_STEP_TYPE_MEMORY"
    }, {
        no: 30,
        name: "CORTEX_STEP_TYPE_LOOKUP_KNOWLEDGE_BASE"
    }, {
        no: 31,
        name: "CORTEX_STEP_TYPE_READ_URL_CONTENT"
    }, {
        no: 32,
        name: "CORTEX_STEP_TYPE_VIEW_CONTENT_CHUNK"
    }, {
        no: 33,
        name: "CORTEX_STEP_TYPE_SEARCH_WEB"
    }, {
        no: 34,
        name: "CORTEX_STEP_TYPE_RETRIEVE_MEMORY"
    }, {
        no: 35,
        name: "CORTEX_STEP_TYPE_AUTO_CASCADE_BROADCAST"
    }, {
        no: 36,
        name: "CORTEX_STEP_TYPE_CUSTOM_TOOL"
    }, {
        no: 37,
        name: "CORTEX_STEP_TYPE_CREATE_RECIPE"
    }, {
        no: 38,
        name: "CORTEX_STEP_TYPE_MCP_TOOL"
    }, {
        no: 39,
        name: "CORTEX_STEP_TYPE_MANAGER_FEEDBACK"
    }, {
        no: 40,
        name: "CORTEX_STEP_TYPE_TOOL_CALL_PROPOSAL"
    }, {
        no: 41,
        name: "CORTEX_STEP_TYPE_TOOL_CALL_CHOICE"
    }, {
        no: 42,
        name: "CORTEX_STEP_TYPE_TRAJECTORY_CHOICE"
    }, {
        no: 43,
        name: "CORTEX_STEP_TYPE_PROXY_WEB_SERVER"
    }, {
        no: 44,
        name: "CORTEX_STEP_TYPE_DEPLOY_WEB_APP"
    }, {
        no: 45,
        name: "CORTEX_STEP_TYPE_CLIPBOARD"
    }, {
        no: 46,
        name: "CORTEX_STEP_TYPE_READ_DEPLOYMENT_CONFIG"
    }, {
        no: 47,
        name: "CORTEX_STEP_TYPE_VIEW_FILE_OUTLINE"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.EXPERIMENT = 1] = "EXPERIMENT",
        e[e.SUBAGENT = 2] = "SUBAGENT"
    }(Ls || (Ls = {})),
    ye.util.setEnumType(Ls, "exa.cortex_pb.CheckpointType", [{
        no: 0,
        name: "CHECKPOINT_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CHECKPOINT_TYPE_EXPERIMENT"
    }, {
        no: 2,
        name: "CHECKPOINT_TYPE_SUBAGENT"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.MQUERY = 1] = "MQUERY",
        e[e.VECTOR_INDEX = 2] = "VECTOR_INDEX"
    }(Rs || (Rs = {})),
    ye.util.setEnumType(Rs, "exa.cortex_pb.SemanticCodebaseSearchType", [{
        no: 0,
        name: "SEMANTIC_CODEBASE_SEARCH_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "SEMANTIC_CODEBASE_SEARCH_TYPE_MQUERY"
    }, {
        no: 2,
        name: "SEMANTIC_CODEBASE_SEARCH_TYPE_VECTOR_INDEX"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.ACTIVE_NODE_CHANGE = 1] = "ACTIVE_NODE_CHANGE",
        e[e.COMMIT = 2] = "COMMIT",
        e[e.AUTOCOMPLETE = 3] = "AUTOCOMPLETE",
        e[e.COMMAND_REQUEST = 4] = "COMMAND_REQUEST",
        e[e.COMMAND_ACCEPT = 5] = "COMMAND_ACCEPT",
        e[e.COMMAND_REJECT = 6] = "COMMAND_REJECT",
        e[e.SUPERCOMPLETE = 7] = "SUPERCOMPLETE",
        e[e.SHELL_COMMAND = 8] = "SHELL_COMMAND"
    }(ys || (ys = {})),
    ye.util.setEnumType(ys, "exa.cortex_pb.CodeActionBoundaryType", [{
        no: 0,
        name: "CODE_ACTION_BOUNDARY_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CODE_ACTION_BOUNDARY_TYPE_ACTIVE_NODE_CHANGE"
    }, {
        no: 2,
        name: "CODE_ACTION_BOUNDARY_TYPE_COMMIT"
    }, {
        no: 3,
        name: "CODE_ACTION_BOUNDARY_TYPE_AUTOCOMPLETE"
    }, {
        no: 4,
        name: "CODE_ACTION_BOUNDARY_TYPE_COMMAND_REQUEST"
    }, {
        no: 5,
        name: "CODE_ACTION_BOUNDARY_TYPE_COMMAND_ACCEPT"
    }, {
        no: 6,
        name: "CODE_ACTION_BOUNDARY_TYPE_COMMAND_REJECT"
    }, {
        no: 7,
        name: "CODE_ACTION_BOUNDARY_TYPE_SUPERCOMPLETE"
    }, {
        no: 8,
        name: "CODE_ACTION_BOUNDARY_TYPE_SHELL_COMMAND"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.ACCEPT = 1] = "ACCEPT",
        e[e.REJECT = 2] = "REJECT"
    }(ws || (ws = {})),
    ye.util.setEnumType(ws, "exa.cortex_pb.AcknowledgementType", [{
        no: 0,
        name: "ACKNOWLEDGEMENT_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "ACKNOWLEDGEMENT_TYPE_ACCEPT"
    }, {
        no: 2,
        name: "ACKNOWLEDGEMENT_TYPE_REJECT"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.LAZY_COMMENT = 1] = "LAZY_COMMENT",
        e[e.DELETED_LINES = 2] = "DELETED_LINES"
    }(ks || (ks = {})),
    ye.util.setEnumType(ks, "exa.cortex_pb.CodeHeuristicFailure", [{
        no: 0,
        name: "CODE_HEURISTIC_FAILURE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CODE_HEURISTIC_FAILURE_LAZY_COMMENT"
    }, {
        no: 2,
        name: "CODE_HEURISTIC_FAILURE_DELETED_LINES"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.CCIS = 1] = "CCIS",
        e[e.DIRECTORY_TREE = 2] = "DIRECTORY_TREE",
        e[e.CLUSTERS = 3] = "CLUSTERS"
    }(Ds || (Ds = {})),
    ye.util.setEnumType(Ds, "exa.cortex_pb.InformPlannerMode", [{
        no: 0,
        name: "INFORM_PLANNER_MODE_UNSPECIFIED"
    }, {
        no: 1,
        name: "INFORM_PLANNER_MODE_CCIS"
    }, {
        no: 2,
        name: "INFORM_PLANNER_MODE_DIRECTORY_TREE"
    }, {
        no: 3,
        name: "INFORM_PLANNER_MODE_CLUSTERS"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.FILE = 1] = "FILE",
        e[e.DIRECTORY = 2] = "DIRECTORY",
        e[e.ANY = 3] = "ANY"
    }(Js || (Js = {})),
    ye.util.setEnumType(Js, "exa.cortex_pb.FindResultType", [{
        no: 0,
        name: "FIND_RESULT_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "FIND_RESULT_TYPE_FILE"
    }, {
        no: 2,
        name: "FIND_RESULT_TYPE_DIRECTORY"
    }, {
        no: 3,
        name: "FIND_RESULT_TYPE_ANY"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.PYLINT = 1] = "PYLINT"
    }(Ms || (Ms = {})),
    ye.util.setEnumType(Ms, "exa.cortex_pb.CortexStepCompileTool", [{
        no: 0,
        name: "CORTEX_STEP_COMPILE_TOOL_UNSPECIFIED"
    }, {
        no: 1,
        name: "CORTEX_STEP_COMPILE_TOOL_PYLINT"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.USER_ALLOW = 1] = "USER_ALLOW",
        e[e.USER_DENY = 2] = "USER_DENY",
        e[e.SYSTEM_ALLOW = 3] = "SYSTEM_ALLOW",
        e[e.SYSTEM_DENY = 4] = "SYSTEM_DENY",
        e[e.MODEL_ALLOW = 5] = "MODEL_ALLOW",
        e[e.MODEL_DENY = 6] = "MODEL_DENY",
        e[e.DEFAULT_ALLOW = 7] = "DEFAULT_ALLOW",
        e[e.DEFAULT_DENY = 8] = "DEFAULT_DENY"
    }(Us || (Us = {})),
    ye.util.setEnumType(Us, "exa.cortex_pb.AutoRunDecision", [{
        no: 0,
        name: "AUTO_RUN_DECISION_UNSPECIFIED"
    }, {
        no: 1,
        name: "AUTO_RUN_DECISION_USER_ALLOW"
    }, {
        no: 2,
        name: "AUTO_RUN_DECISION_USER_DENY"
    }, {
        no: 3,
        name: "AUTO_RUN_DECISION_SYSTEM_ALLOW"
    }, {
        no: 4,
        name: "AUTO_RUN_DECISION_SYSTEM_DENY"
    }, {
        no: 5,
        name: "AUTO_RUN_DECISION_MODEL_ALLOW"
    }, {
        no: 6,
        name: "AUTO_RUN_DECISION_MODEL_DENY"
    }, {
        no: 7,
        name: "AUTO_RUN_DECISION_DEFAULT_ALLOW"
    }, {
        no: 8,
        name: "AUTO_RUN_DECISION_DEFAULT_DENY"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.PENDING = 1] = "PENDING",
        e[e.IN_PROGRESS = 2] = "IN_PROGRESS",
        e[e.SUCCESS = 3] = "SUCCESS",
        e[e.FAILURE = 4] = "FAILURE"
    }(xs || (xs = {})),
    ye.util.setEnumType(xs, "exa.cortex_pb.DeployWebAppFileUploadStatus", [{
        no: 0,
        name: "DEPLOY_WEB_APP_FILE_UPLOAD_STATUS_UNSPECIFIED"
    }, {
        no: 1,
        name: "DEPLOY_WEB_APP_FILE_UPLOAD_STATUS_PENDING"
    }, {
        no: 2,
        name: "DEPLOY_WEB_APP_FILE_UPLOAD_STATUS_IN_PROGRESS"
    }, {
        no: 3,
        name: "DEPLOY_WEB_APP_FILE_UPLOAD_STATUS_SUCCESS"
    }, {
        no: 4,
        name: "DEPLOY_WEB_APP_FILE_UPLOAD_STATUS_FAILURE"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.TOP = 1] = "TOP",
        e[e.BOTTOM = 2] = "BOTTOM",
        e[e.SPLIT = 3] = "SPLIT"
    }(Bs || (Bs = {})),
    ye.util.setEnumType(Bs, "exa.cortex_pb.CommandOutputPriority", [{
        no: 0,
        name: "COMMAND_OUTPUT_PRIORITY_UNSPECIFIED"
    }, {
        no: 1,
        name: "COMMAND_OUTPUT_PRIORITY_TOP"
    }, {
        no: 2,
        name: "COMMAND_OUTPUT_PRIORITY_BOTTOM"
    }, {
        no: 3,
        name: "COMMAND_OUTPUT_PRIORITY_SPLIT"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.USER = 1] = "USER",
        e[e.CASCADE = 2] = "CASCADE",
        e[e.AUTO_CASCADE = 3] = "AUTO_CASCADE"
    }(hs || (hs = {})),
    ye.util.setEnumType(hs, "exa.cortex_pb.CortexMemorySource", [{
        no: 0,
        name: "CORTEX_MEMORY_SOURCE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CORTEX_MEMORY_SOURCE_USER"
    }, {
        no: 2,
        name: "CORTEX_MEMORY_SOURCE_CASCADE"
    }, {
        no: 3,
        name: "CORTEX_MEMORY_SOURCE_AUTO_CASCADE"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.CREATE = 1] = "CREATE",
        e[e.UPDATE = 2] = "UPDATE",
        e[e.DELETE = 3] = "DELETE"
    }(Fs || (Fs = {})),
    ye.util.setEnumType(Fs, "exa.cortex_pb.MemoryActionType", [{
        no: 0,
        name: "MEMORY_ACTION_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "MEMORY_ACTION_TYPE_CREATE"
    }, {
        no: 2,
        name: "MEMORY_ACTION_TYPE_UPDATE"
    }, {
        no: 3,
        name: "MEMORY_ACTION_TYPE_DELETE"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.APPROVED = 1] = "APPROVED",
        e[e.DENIED = 2] = "DENIED",
        e[e.ERROR = 3] = "ERROR"
    }(bs || (bs = {})),
    ye.util.setEnumType(bs, "exa.cortex_pb.CortexStepManagerFeedbackStatus", [{
        no: 0,
        name: "CORTEX_STEP_MANAGER_FEEDBACK_STATUS_UNSPECIFIED"
    }, {
        no: 1,
        name: "CORTEX_STEP_MANAGER_FEEDBACK_STATUS_APPROVED"
    }, {
        no: 2,
        name: "CORTEX_STEP_MANAGER_FEEDBACK_STATUS_DENIED"
    }, {
        no: 3,
        name: "CORTEX_STEP_MANAGER_FEEDBACK_STATUS_ERROR"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.PENDING = 1] = "PENDING",
        e[e.READY = 2] = "READY",
        e[e.ERROR = 3] = "ERROR"
    }(qs || (qs = {})),
    ye.util.setEnumType(qs, "exa.cortex_pb.McpServerStatus", [{
        no: 0,
        name: "MCP_SERVER_STATUS_UNSPECIFIED"
    }, {
        no: 1,
        name: "MCP_SERVER_STATUS_PENDING"
    }, {
        no: 2,
        name: "MCP_SERVER_STATUS_READY"
    }, {
        no: 3,
        name: "MCP_SERVER_STATUS_ERROR"
    }]);
    class lu extends E {
        component = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexPlanSummaryComponent";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "text",
            kind: "scalar",
            T: 9,
            oneof: "component"
        }, {
            no: 2,
            name: "citation",
            kind: "message",
            T: ya,
            oneof: "component"
        }]));
        static fromBinary(e, t) {
            return (new lu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new lu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new lu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(lu, e, t)
        }
    }
    class _u extends E {
        planId = "";
        goal = "";
        actionStates = [];
        outlines = [];
        summaryComponents = [];
        postSummaryText = "";
        planFullyGenerated = !1;
        planFinished = !1;
        planSummaryConfirmed = !1;
        planSummaryFullyGenerated = !1;
        cciList = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CodingStepState";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "plan_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "goal",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "action_states",
            kind: "message",
            T: yu,
            repeated: !0
        }, {
            no: 7,
            name: "outlines",
            kind: "message",
            T: du,
            repeated: !0
        }, {
            no: 8,
            name: "summary_components",
            kind: "message",
            T: lu,
            repeated: !0
        }, {
            no: 9,
            name: "post_summary_text",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "plan_fully_generated",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "plan_finished",
            kind: "scalar",
            T: 8
        }, {
            no: 6,
            name: "debug_info",
            kind: "message",
            T: xu
        }, {
            no: 10,
            name: "plan_summary_confirmed",
            kind: "scalar",
            T: 8
        }, {
            no: 11,
            name: "plan_summary_fully_generated",
            kind: "scalar",
            T: 8
        }, {
            no: 12,
            name: "cci_list",
            kind: "message",
            T: zi,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new _u).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new _u).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new _u).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(_u, e, t)
        }
    }
    class Eu extends E {
        steps = [];
        outlines = [];
        currentStepIndex = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexPlanState";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "steps",
            kind: "message",
            T: Tu,
            repeated: !0
        }, {
            no: 2,
            name: "outlines",
            kind: "message",
            T: du,
            repeated: !0
        }, {
            no: 3,
            name: "current_step_index",
            kind: "scalar",
            T: 13
        }, {
            no: 4,
            name: "debug_info",
            kind: "message",
            T: xu
        }]));
        static fromBinary(e, t) {
            return (new Eu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Eu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Eu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Eu, e, t)
        }
    }
    class du extends E {
        stepNumber = 0;
        actionName = "";
        jsonArgs = "";
        parentStepNumbers = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepOutline";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "step_number",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "action_name",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "json_args",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "parent_step_numbers",
            kind: "scalar",
            T: 13,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new du).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new du).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new du).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(du, e, t)
        }
    }
    class Tu extends E {
        step = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepState";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "coding",
            kind: "message",
            T: _u,
            oneof: "step"
        }]));
        static fromBinary(e, t) {
            return (new Tu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Tu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Tu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Tu, e, t)
        }
    }
    class fu extends E {
        totalRetrievedCount = 0;
        topRetrievedItems = [];
        fullCciList = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexResearchState";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "total_retrieved_count",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "top_retrieved_items",
            kind: "message",
            T: fa,
            repeated: !0
        }, {
            no: 3,
            name: "debug_info",
            kind: "message",
            T: pu
        }, {
            no: 4,
            name: "full_cci_list",
            kind: "message",
            T: fa,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new fu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new fu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new fu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(fu, e, t)
        }
    }
    class pu extends E {
        query = "";
        filesScanned = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ResearchDebugInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "query",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "files_scanned",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new pu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new pu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new pu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(pu, e, t)
        }
    }
    class Su extends E {
        requestSource = Ts.UNSPECIFIED;
        goal = "";
        error = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexWorkflowState";
        static fields = ye.util.newFieldList(( () => [{
            no: 6,
            name: "request_source",
            kind: "enum",
            T: ye.getEnumType(Ts)
        }, {
            no: 1,
            name: "goal",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "plan_input",
            kind: "message",
            T: Cu
        }, {
            no: 3,
            name: "research_state",
            kind: "message",
            T: fu
        }, {
            no: 4,
            name: "plan_state",
            kind: "message",
            T: Eu
        }, {
            no: 5,
            name: "error",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Su).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Su).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Su).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Su, e, t)
        }
    }
    class Nu extends E {
        done = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexRunState";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "workflow_state",
            kind: "message",
            T: Su
        }, {
            no: 2,
            name: "execution_state",
            kind: "message",
            T: Da
        }, {
            no: 3,
            name: "done",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Nu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Nu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Nu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Nu, e, t)
        }
    }
    class Cu extends E {
        goal = "";
        nextSteps = [];
        targetDirectories = [];
        targetFiles = [];
        scopeItems = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.PlanInput";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "goal",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "next_steps",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 2,
            name: "target_directories",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 3,
            name: "target_files",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 4,
            name: "scope_items",
            kind: "message",
            T: ya,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Cu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Cu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Cu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Cu, e, t)
        }
    }
    class Iu extends E {
        spec = {
            case: void 0
        };
        parentStepIndices = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ActionSpec";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "command",
            kind: "message",
            T: Ru,
            oneof: "spec"
        }, {
            no: 2,
            name: "create_file",
            kind: "message",
            T: gu,
            oneof: "spec"
        }, {
            no: 4,
            name: "delete_file",
            kind: "message",
            T: Ou,
            oneof: "spec"
        }, {
            no: 3,
            name: "parent_step_indices",
            kind: "scalar",
            T: 13,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Iu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Iu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Iu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Iu, e, t)
        }
    }
    class gu extends E {
        instruction = "";
        referenceCcis = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ActionSpecCreateFile";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "instruction",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "path",
            kind: "message",
            T: Sa
        }, {
            no: 3,
            name: "reference_ccis",
            kind: "message",
            T: Kn,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new gu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new gu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new gu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(gu, e, t)
        }
    }
    class Ou extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ActionSpecDeleteFile";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "path",
            kind: "message",
            T: Sa
        }]));
        static fromBinary(e, t) {
            return (new Ou).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ou).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ou).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ou, e, t)
        }
    }
    class Au extends E {
        absoluteUri = "";
        startLine = 0;
        endLine = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.LineRangeTarget";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "absolute_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "start_line",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "end_line",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new Au).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Au).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Au).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Au, e, t)
        }
    }
    class Pu extends E {
        content = "";
        absoluteUri = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CommandContentTarget";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "content",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "absolute_uri",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Pu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Pu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Pu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Pu, e, t)
        }
    }
    class Lu extends E {
        targetContent = "";
        replacementContent = "";
        allowMultiple = !1;
        targetHasCarriageReturn = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ReplacementChunk";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "target_content",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "replacement_content",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "allow_multiple",
            kind: "scalar",
            T: 8
        }, {
            no: 4,
            name: "target_has_carriage_return",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Lu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Lu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Lu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Lu, e, t)
        }
    }
    class Ru extends E {
        instruction = "";
        replacementChunks = [];
        isEdit = !1;
        useFastApply = !1;
        target = {
            case: void 0
        };
        referenceCcis = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ActionSpecCommand";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "instruction",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "replacement_chunks",
            kind: "message",
            T: Lu,
            repeated: !0
        }, {
            no: 2,
            name: "is_edit",
            kind: "scalar",
            T: 8
        }, {
            no: 8,
            name: "use_fast_apply",
            kind: "scalar",
            T: 8
        }, {
            no: 3,
            name: "code_context",
            kind: "message",
            T: Kn,
            oneof: "target"
        }, {
            no: 4,
            name: "file",
            kind: "message",
            T: Sa,
            oneof: "target"
        }, {
            no: 6,
            name: "cci_with_subrange",
            kind: "message",
            T: fa,
            oneof: "target"
        }, {
            no: 7,
            name: "line_range",
            kind: "message",
            T: Au,
            oneof: "target"
        }, {
            no: 10,
            name: "content_target",
            kind: "message",
            T: Pu,
            oneof: "target"
        }, {
            no: 5,
            name: "reference_ccis",
            kind: "message",
            T: Kn,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Ru).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ru).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ru).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ru, e, t)
        }
    }
    class yu extends E {
        stepId = "";
        status = Es.UNSPECIFIED;
        error = "";
        stepVersion = 0;
        planVersion = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ActionState";
        static fields = ye.util.newFieldList(( () => [{
            no: 5,
            name: "step_id",
            kind: "scalar",
            T: 9
        }, {
            no: 1,
            name: "status",
            kind: "enum",
            T: ye.getEnumType(Es)
        }, {
            no: 2,
            name: "spec",
            kind: "message",
            T: Iu
        }, {
            no: 3,
            name: "result",
            kind: "message",
            T: wu
        }, {
            no: 4,
            name: "error",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "step_version",
            kind: "scalar",
            T: 13
        }, {
            no: 7,
            name: "plan_version",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new yu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new yu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new yu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(yu, e, t)
        }
    }
    class wu extends E {
        result = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ActionResult";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "edit",
            kind: "message",
            T: Ju,
            oneof: "result"
        }]));
        static fromBinary(e, t) {
            return (new wu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new wu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new wu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(wu, e, t)
        }
    }
    class ku extends E {
        entries = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ActionDebugInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "entries",
            kind: "message",
            T: Du,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new ku).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ku).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ku).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ku, e, t)
        }
    }
    class Du extends E {
        key = "";
        value = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ActionDebugInfo.DebugInfoEntry";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "key",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "value",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Du).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Du).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Du).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Du, e, t)
        }
    }
    class Ju extends E {
        absolutePathMigrateMeToUri = "";
        contextPrefix = "";
        contextSuffix = "";
        promptId = "";
        completionId = "";
        fileContentHash = "";
        absoluteUri = "";
        resultCcis = [];
        originalContent = "";
        createFile = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ActionResultEdit";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "absolute_path_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "diff",
            kind: "message",
            T: $s
        }, {
            no: 3,
            name: "context_prefix",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "context_suffix",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "debug_info",
            kind: "message",
            T: ku
        }, {
            no: 12,
            name: "prompt_id",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "completion_id",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "file_content_hash",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "absolute_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "result_ccis",
            kind: "message",
            T: Kn,
            repeated: !0
        }, {
            no: 10,
            name: "original_content",
            kind: "scalar",
            T: 9
        }, {
            no: 11,
            name: "create_file",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Ju).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ju).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ju).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ju, e, t)
        }
    }
    class Mu extends E {
        totalRetrievedCount = 0;
        topRetrievedItems = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.RetrievalStatus";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "total_retrieved_count",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "top_retrieved_items",
            kind: "message",
            T: fa,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Mu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Mu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Mu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Mu, e, t)
        }
    }
    class Uu extends (null) {
        status = ds.UNSPECIFIED;
        planId = "";
        actions = [];
        error = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 4,
            name: "status",
            kind: "enum",
            T: ye.getEnumType(ds)
        }, {
            no: 1,
            name: "plan_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "plan_input",
            kind: "message",
            T: Cu
        }, {
            no: 3,
            name: "actions",
            kind: "message",
            T: yu,
            repeated: !0
        }, {
            no: 6,
            name: "retrieval_status",
            kind: "message",
            T: Mu
        }, {
            no: 5,
            name: "error",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "debug_info",
            kind: "message",
            T: xu
        }]));
        static fromBinary(e, t) {
            return (new Uu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Uu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Uu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Uu, e, t)
        }
    }
    class xu extends E {
        rawResponse = "";
        planTokens = 0;
        planCost = 0;
        systemPrompt = "";
        messagePrompts = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.PlanDebugInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "raw_response",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "plan_tokens",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "plan_cost",
            kind: "scalar",
            T: 2
        }, {
            no: 4,
            name: "system_prompt",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "message_prompts",
            kind: "message",
            T: wi,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new xu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new xu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new xu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(xu, e, t)
        }
    }
    class Bu extends E {
        maxNominalContinuations = 0;
        maxErrorContinuations = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexPlanConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "model_config",
            kind: "message",
            T: Ua
        }, {
            no: 2,
            name: "max_nominal_continuations",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "max_error_continuations",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new Bu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Bu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Bu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Bu, e, t)
        }
    }
    class hu extends E {
        recordTelemetry = !1;
        addDistillNode = !1;
        mQueryModelName = "";
        useMacroPlanner = !1;
        autoPrepareApply = !1;
        numPrepareRetries = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 11,
            name: "record_telemetry",
            kind: "scalar",
            T: 8
        }, {
            no: 6,
            name: "add_distill_node",
            kind: "scalar",
            T: 8
        }, {
            no: 10,
            name: "distill_config",
            kind: "message",
            T: Ua
        }, {
            no: 8,
            name: "m_query_config",
            kind: "message",
            T: xa
        }, {
            no: 12,
            name: "m_query_model_name",
            kind: "scalar",
            T: 9
        }, {
            no: 1,
            name: "use_macro_planner",
            kind: "scalar",
            T: 8
        }, {
            no: 4,
            name: "macro_plan_config",
            kind: "message",
            T: Bu
        }, {
            no: 9,
            name: "plan_config",
            kind: "message",
            T: Fu
        }, {
            no: 5,
            name: "code_plan_config",
            kind: "message",
            T: Bu
        }, {
            no: 2,
            name: "auto_prepare_apply",
            kind: "scalar",
            T: 8
        }, {
            no: 3,
            name: "num_prepare_retries",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new hu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new hu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new hu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(hu, e, t)
        }
    }
    class Fu extends E {
        planModelName = "";
        maxTokensPerPlan = 0;
        maxTokenFraction = 0;
        chatTemperature = 0;
        chatCompletionMaxTokens = A.zero;
        augmentCommand = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.PlanConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "plan_model_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "max_tokens_per_plan",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "max_token_fraction",
            kind: "scalar",
            T: 2
        }, {
            no: 4,
            name: "chat_temperature",
            kind: "scalar",
            T: 2
        }, {
            no: 5,
            name: "chat_completion_max_tokens",
            kind: "scalar",
            T: 4
        }, {
            no: 9,
            name: "augment_command",
            kind: "scalar",
            T: 8
        }, {
            no: 7,
            name: "experiment_config",
            kind: "message",
            T: jt
        }, {
            no: 8,
            name: "m_query_config",
            kind: "message",
            T: xa
        }]));
        static fromBinary(e, t) {
            return (new Fu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Fu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Fu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Fu, e, t)
        }
    }
    class bu extends E {
        cortexId = "";
        done = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexPlanSummary";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cortex_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "plan_input",
            kind: "message",
            T: Cu
        }, {
            no: 3,
            name: "created_at",
            kind: "message",
            T: De
        }, {
            no: 4,
            name: "done",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new bu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new bu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new bu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(bu, e, t)
        }
    }
    class qu extends (null) {
        blocking = !1;
        skipHead = !1;
        skipDebounce = !1;
        skipIntentUpdate = !1;
        allowEmptyUpdate = !1;
        parsePendingCommands = !1;
        absolutePathUrisToUpdate = [];
        alwaysAddViewFileSteps = !1;
        includeOriginalContent = !1;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 2,
            name: "blocking",
            kind: "scalar",
            T: 8
        }, {
            no: 3,
            name: "skip_head",
            kind: "scalar",
            T: 8
        }, {
            no: 4,
            name: "skip_debounce",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "skip_intent_update",
            kind: "scalar",
            T: 8
        }, {
            no: 6,
            name: "allow_empty_update",
            kind: "scalar",
            T: 8
        }, {
            no: 7,
            name: "parse_pending_commands",
            kind: "scalar",
            T: 8
        }, {
            no: 10,
            name: "absolute_path_uris_to_update",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 11,
            name: "always_add_view_file_steps",
            kind: "scalar",
            T: 8
        }, {
            no: 12,
            name: "include_original_content",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new qu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new qu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new qu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(qu, e, t)
        }
    }
    class Gu extends E {
        workspaceFolderAbsoluteUri = "";
        gitRootAbsoluteUri = "";
        branchName = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexWorkspaceMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "workspace_folder_absolute_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "git_root_absolute_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "repository",
            kind: "message",
            T: jn
        }, {
            no: 4,
            name: "branch_name",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Gu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Gu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Gu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Gu, e, t)
        }
    }
    class Hu extends E {
        workspaces = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexTrajectoryMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "workspaces",
            kind: "message",
            T: Gu,
            repeated: !0
        }, {
            no: 2,
            name: "created_at",
            kind: "message",
            T: De
        }]));
        static fromBinary(e, t) {
            return (new Hu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Hu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Hu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Hu, e, t)
        }
    }
    class vu extends E {
        trajectoryId = "";
        cascadeId = "";
        trajectoryType = ps.UNSPECIFIED;
        steps = [];
        parentReferences = [];
        generatorMetadata = [];
        source = fs.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexTrajectory";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "trajectory_id",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "cascade_id",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "trajectory_type",
            kind: "enum",
            T: ye.getEnumType(ps)
        }, {
            no: 2,
            name: "steps",
            kind: "message",
            T: tl,
            repeated: !0
        }, {
            no: 5,
            name: "parent_references",
            kind: "message",
            T: Yu,
            repeated: !0
        }, {
            no: 3,
            name: "generator_metadata",
            kind: "message",
            T: Ku,
            repeated: !0
        }, {
            no: 8,
            name: "source",
            kind: "enum",
            T: ye.getEnumType(fs)
        }, {
            no: 7,
            name: "metadata",
            kind: "message",
            T: Hu
        }]));
        static fromBinary(e, t) {
            return (new vu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new vu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new vu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(vu, e, t)
        }
    }
    class Vu extends E {
        summary = "";
        stepCount = 0;
        trajectoryId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CascadeTrajectorySummary";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "summary",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "step_count",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "last_modified_time",
            kind: "message",
            T: De
        }, {
            no: 4,
            name: "trajectory_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Vu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Vu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Vu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Vu, e, t)
        }
    }
    class Yu extends E {
        trajectoryId = "";
        stepIndex = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexTrajectoryReference";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "trajectory_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "step_index",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new Yu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Yu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Yu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Yu, e, t)
        }
    }
    class Xu extends E {
        workspaceUri = "";
        gitRootUri = "";
        branchName = "";
        mainlineStepCountAtLastResearch = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ImplicitTrajectory";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "trajectory",
            kind: "message",
            T: vu
        }, {
            no: 5,
            name: "trajectory_scope",
            kind: "message",
            T: nl
        }, {
            no: 2,
            name: "workspace_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "git_root_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "branch_name",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "background_research",
            kind: "message",
            T: vu
        }, {
            no: 7,
            name: "mainline_step_count_at_last_research",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new Xu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Xu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Xu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Xu, e, t)
        }
    }
    class Ku extends E {
        stepIndices = [];
        metadata = {
            case: void 0
        };
        executionId = "";
        error = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepGeneratorMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 2,
            name: "step_indices",
            kind: "scalar",
            T: 13,
            repeated: !0
        }, {
            no: 1,
            name: "chat_model",
            kind: "message",
            T: zu,
            oneof: "metadata"
        }, {
            no: 3,
            name: "planner_config",
            kind: "message",
            T: Bl
        }, {
            no: 4,
            name: "execution_id",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "error",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Ku).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ku).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ku).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ku, e, t)
        }
    }
    class Wu extends E {
        messageIndex = 0;
        segmentIndex = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.MessagePromptMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "message_index",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "segment_index",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new Wu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Wu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Wu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Wu, e, t)
        }
    }
    class zu extends E {
        systemPrompt = "";
        messagePrompts = [];
        messageMetadata = [];
        model = be.MODEL_UNSPECIFIED;
        modelCost = 0;
        lastCacheIndex = 0;
        tools = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ChatModelMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "system_prompt",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "message_prompts",
            kind: "message",
            T: wi,
            repeated: !0
        }, {
            no: 10,
            name: "message_metadata",
            kind: "message",
            T: Wu,
            repeated: !0
        }, {
            no: 3,
            name: "model",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 4,
            name: "usage",
            kind: "message",
            T: sr
        }, {
            no: 5,
            name: "model_cost",
            kind: "scalar",
            T: 2
        }, {
            no: 6,
            name: "last_cache_index",
            kind: "scalar",
            T: 13
        }, {
            no: 7,
            name: "tool_choice",
            kind: "message",
            T: Ji
        }, {
            no: 8,
            name: "tools",
            kind: "message",
            T: Di,
            repeated: !0
        }, {
            no: 9,
            name: "chat_start_metadata",
            kind: "message",
            T: Qu
        }]));
        static fromBinary(e, t) {
            return (new zu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new zu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new zu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(zu, e, t)
        }
    }
    class ju extends E {
        index = 0;
        contentChecksum = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CacheBreakpointMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "index",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "options",
            kind: "message",
            T: ki
        }, {
            no: 3,
            name: "content_checksum",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new ju).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ju).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ju).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ju, e, t)
        }
    }
    class Qu extends E {
        startStepIndex = 0;
        checkpointIndex = 0;
        stepsCoveredByCheckpoint = [];
        latestStableMessageIndex = 0;
        cacheBreakpoints = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ChatStartMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 4,
            name: "created_at",
            kind: "message",
            T: De
        }, {
            no: 1,
            name: "start_step_index",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "checkpoint_index",
            kind: "scalar",
            T: 5
        }, {
            no: 3,
            name: "steps_covered_by_checkpoint",
            kind: "scalar",
            T: 13,
            repeated: !0
        }, {
            no: 5,
            name: "latest_stable_message_index",
            kind: "scalar",
            T: 5
        }, {
            no: 6,
            name: "cache_breakpoints",
            kind: "message",
            T: ju,
            repeated: !0
        }, {
            no: 7,
            name: "system_prompt_cache",
            kind: "message",
            T: ju
        }, {
            no: 8,
            name: "time_since_last_invocation",
            kind: "message",
            T: Je
        }]));
        static fromBinary(e, t) {
            return (new Qu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Qu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Qu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Qu, e, t)
        }
    }
    class $u extends E {
        source = Ss.UNSPECIFIED;
        argumentsOrder = [];
        modelCost = 0;
        generatorModel = be.MODEL_UNSPECIFIED;
        executionId = "";
        flowCreditsUsed = 0;
        promptCreditsUsed = 0;
        nonStandardCreditReasons = [];
        toolCallChoices = [];
        toolCallChoiceReason = "";
        cortexRequestSource = Ts.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "created_at",
            kind: "message",
            T: De
        }, {
            no: 6,
            name: "viewable_at",
            kind: "message",
            T: De
        }, {
            no: 7,
            name: "finished_generating_at",
            kind: "message",
            T: De
        }, {
            no: 8,
            name: "completed_at",
            kind: "message",
            T: De
        }, {
            no: 3,
            name: "source",
            kind: "enum",
            T: ye.getEnumType(Ss)
        }, {
            no: 4,
            name: "tool_call",
            kind: "message",
            T: ba
        }, {
            no: 5,
            name: "arguments_order",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 9,
            name: "model_usage",
            kind: "message",
            T: sr
        }, {
            no: 10,
            name: "model_cost",
            kind: "scalar",
            T: 2
        }, {
            no: 11,
            name: "generator_model",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 13,
            name: "requested_model",
            kind: "message",
            T: rn
        }, {
            no: 12,
            name: "execution_id",
            kind: "scalar",
            T: 9
        }, {
            no: 14,
            name: "flow_credits_used",
            kind: "scalar",
            T: 5
        }, {
            no: 15,
            name: "prompt_credits_used",
            kind: "scalar",
            T: 5
        }, {
            no: 18,
            name: "non_standard_credit_reasons",
            kind: "enum",
            T: ye.getEnumType(Ns),
            repeated: !0
        }, {
            no: 16,
            name: "tool_call_choices",
            kind: "message",
            T: ba,
            repeated: !0
        }, {
            no: 17,
            name: "tool_call_choice_reason",
            kind: "scalar",
            T: 9
        }, {
            no: 19,
            name: "cortex_request_source",
            kind: "enum",
            T: ye.getEnumType(Ts)
        }]));
        static fromBinary(e, t) {
            return (new $u).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new $u).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new $u).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals($u, e, t)
        }
    }
    class Zu extends (null) {
        stepIndex = 0;
        status = Is.UNSPECIFIED;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "step_index",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "step",
            kind: "message",
            T: tl
        }, {
            no: 3,
            name: "status",
            kind: "enum",
            T: ye.getEnumType(Is)
        }]));
        static fromBinary(e, t) {
            return (new Zu).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Zu).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Zu).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Zu, e, t)
        }
    }
    class el extends E {
        userErrorMessage = "";
        shortError = "";
        fullError = "";
        isBenign = !1;
        errorCode = 0;
        details = "";
        errorId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexErrorDetails";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "user_error_message",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "short_error",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "full_error",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "is_benign",
            kind: "scalar",
            T: 8
        }, {
            no: 7,
            name: "error_code",
            kind: "scalar",
            T: 13
        }, {
            no: 5,
            name: "details",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "error_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new el).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new el).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new el).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(el, e, t)
        }
    }
    class tl extends E {
        type = Ps.UNSPECIFIED;
        status = Is.UNSPECIFIED;
        asyncLevelOverride = Cs.UNSPECIFIED;
        step = {
            case: void 0
        };
        subtrajectories = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexTrajectoryStep";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "type",
            kind: "enum",
            T: ye.getEnumType(Ps)
        }, {
            no: 4,
            name: "status",
            kind: "enum",
            T: ye.getEnumType(Is)
        }, {
            no: 5,
            name: "metadata",
            kind: "message",
            T: $u
        }, {
            no: 31,
            name: "error",
            kind: "message",
            T: el
        }, {
            no: 33,
            name: "async_level_override",
            kind: "enum",
            T: ye.getEnumType(Cs)
        }, {
            no: 56,
            name: "requested_interaction",
            kind: "message",
            T: Hl
        }, {
            no: 7,
            name: "dummy",
            kind: "message",
            T: Vl,
            oneof: "step"
        }, {
            no: 12,
            name: "finish",
            kind: "message",
            T: Yl,
            oneof: "step"
        }, {
            no: 8,
            name: "plan_input",
            kind: "message",
            T: Xl,
            oneof: "step"
        }, {
            no: 9,
            name: "mquery",
            kind: "message",
            T: zl,
            oneof: "step"
        }, {
            no: 10,
            name: "code_action",
            kind: "message",
            T: Zl,
            oneof: "step"
        }, {
            no: 11,
            name: "git_commit",
            kind: "message",
            T: t_,
            oneof: "step"
        }, {
            no: 13,
            name: "grep_search",
            kind: "message",
            T: i_,
            oneof: "step"
        }, {
            no: 14,
            name: "view_file",
            kind: "message",
            T: m_,
            oneof: "step"
        }, {
            no: 15,
            name: "list_directory",
            kind: "message",
            T: u_,
            oneof: "step"
        }, {
            no: 16,
            name: "compile",
            kind: "message",
            T: d_,
            oneof: "step"
        }, {
            no: 17,
            name: "inform_planner",
            kind: "message",
            T: a_,
            oneof: "step"
        }, {
            no: 19,
            name: "user_input",
            kind: "message",
            T: f_,
            oneof: "step"
        }, {
            no: 20,
            name: "planner_response",
            kind: "message",
            T: S_,
            oneof: "step"
        }, {
            no: 21,
            name: "file_breakdown",
            kind: "message",
            T: N_,
            oneof: "step"
        }, {
            no: 22,
            name: "view_code_item",
            kind: "message",
            T: C_,
            oneof: "step"
        }, {
            no: 23,
            name: "write_to_file",
            kind: "message",
            T: I_,
            oneof: "step"
        }, {
            no: 24,
            name: "error_message",
            kind: "message",
            T: P_,
            oneof: "step"
        }, {
            no: 25,
            name: "cluster_query",
            kind: "message",
            T: __,
            oneof: "step"
        }, {
            no: 26,
            name: "list_clusters",
            kind: "message",
            T: E_,
            oneof: "step"
        }, {
            no: 27,
            name: "inspect_cluster",
            kind: "message",
            T: L_,
            oneof: "step"
        }, {
            no: 28,
            name: "run_command",
            kind: "message",
            T: y_,
            oneof: "step"
        }, {
            no: 29,
            name: "related_files",
            kind: "message",
            T: w_,
            oneof: "step"
        }, {
            no: 30,
            name: "checkpoint",
            kind: "message",
            T: Kl,
            oneof: "step"
        }, {
            no: 32,
            name: "propose_code",
            kind: "message",
            T: e_,
            oneof: "step"
        }, {
            no: 34,
            name: "find",
            kind: "message",
            T: o_,
            oneof: "step"
        }, {
            no: 35,
            name: "search_knowledge_base",
            kind: "message",
            T: g_,
            oneof: "step"
        }, {
            no: 36,
            name: "suggested_responses",
            kind: "message",
            T: A_,
            oneof: "step"
        }, {
            no: 37,
            name: "command_status",
            kind: "message",
            T: F_,
            oneof: "step"
        }, {
            no: 38,
            name: "memory",
            kind: "message",
            T: X_,
            oneof: "step"
        }, {
            no: 39,
            name: "lookup_knowledge_base",
            kind: "message",
            T: O_,
            oneof: "step"
        }, {
            no: 40,
            name: "read_url_content",
            kind: "message",
            T: k_,
            oneof: "step"
        }, {
            no: 41,
            name: "view_content_chunk",
            kind: "message",
            T: D_,
            oneof: "step"
        }, {
            no: 42,
            name: "search_web",
            kind: "message",
            T: J_,
            oneof: "step"
        }, {
            no: 43,
            name: "retrieve_memory",
            kind: "message",
            T: K_,
            oneof: "step"
        }, {
            no: 44,
            name: "auto_cascade_broadcast",
            kind: "message",
            T: nE,
            oneof: "step"
        }, {
            no: 45,
            name: "custom_tool",
            kind: "message",
            T: tE,
            oneof: "step"
        }, {
            no: 46,
            name: "create_recipe",
            kind: "message",
            T: uE,
            oneof: "step"
        }, {
            no: 47,
            name: "mcp_tool",
            kind: "message",
            T: sE,
            oneof: "step"
        }, {
            no: 48,
            name: "manager_feedback",
            kind: "message",
            T: iE,
            oneof: "step"
        }, {
            no: 49,
            name: "tool_call_proposal",
            kind: "message",
            T: oE,
            oneof: "step"
        }, {
            no: 50,
            name: "tool_call_choice",
            kind: "message",
            T: mE,
            oneof: "step"
        }, {
            no: 52,
            name: "trajectory_choice",
            kind: "message",
            T: cE,
            oneof: "step"
        }, {
            no: 53,
            name: "proxy_web_server",
            kind: "message",
            T: lE,
            oneof: "step"
        }, {
            no: 54,
            name: "deploy_web_app",
            kind: "message",
            T: U_,
            oneof: "step"
        }, {
            no: 55,
            name: "clipboard",
            kind: "message",
            T: x_,
            oneof: "step"
        }, {
            no: 57,
            name: "read_deployment_config",
            kind: "message",
            T: M_,
            oneof: "step"
        }, {
            no: 58,
            name: "view_file_outline",
            kind: "message",
            T: dE,
            oneof: "step"
        }, {
            no: 6,
            name: "subtrajectory",
            kind: "message",
            T: vu
        }, {
            no: 51,
            name: "subtrajectories",
            kind: "message",
            T: vu,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new tl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new tl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new tl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(tl, e, t)
        }
    }
    class nl extends E {
        workspaceUri = "";
        gitRootUri = "";
        branchName = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.TrajectoryScope";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "workspace_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "git_root_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "branch_name",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new nl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new nl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new nl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(nl, e, t)
        }
    }
    class al extends E {
        maxGeneratorInvocations = 0;
        terminalStepTypes = [];
        holdForValidCheckpointTimeout = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CascadeExecutorConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "disable_async",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 2,
            name: "max_generator_invocations",
            kind: "scalar",
            T: 5
        }, {
            no: 3,
            name: "terminal_step_types",
            kind: "enum",
            T: ye.getEnumType(Ps),
            repeated: !0
        }, {
            no: 4,
            name: "run_pending_steps",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 5,
            name: "hold_for_valid_checkpoint",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 6,
            name: "hold_for_valid_checkpoint_timeout",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new al).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new al).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new al).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(al, e, t)
        }
    }
    class rl extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CascadeConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "planner_config",
            kind: "message",
            T: Bl
        }, {
            no: 2,
            name: "checkpoint_config",
            kind: "message",
            T: Wl
        }, {
            no: 3,
            name: "executor_config",
            kind: "message",
            T: al
        }, {
            no: 4,
            name: "trajectory_conversion_config",
            kind: "message",
            T: sl
        }, {
            no: 5,
            name: "memory_config",
            kind: "message",
            T: W_
        }]));
        static fromBinary(e, t) {
            return (new rl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new rl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new rl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(rl, e, t)
        }
    }
    class sl extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.TrajectoryConversionConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "use_tool_format",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 2,
            name: "include_input_step",
            kind: "scalar",
            T: 8,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new sl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new sl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new sl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(sl, e, t)
        }
    }
    class il extends E {
        plannerMode = gt.UNSPECIFIED;
        clusterPath = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CascadeConversationalPlannerConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 4,
            name: "planner_mode",
            kind: "enum",
            T: ye.getEnumType(gt)
        }, {
            no: 2,
            name: "use_clusters",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 3,
            name: "cluster_path",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "eval_mode",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 6,
            name: "code_research_section_content",
            kind: "scalar",
            T: 9,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new il).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new il).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new il).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(il, e, t)
        }
    }
    class ol extends E {
        model = be.MODEL_UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CascadeAgenticPlannerManagerConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "enabled",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 2,
            name: "model",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 3,
            name: "condense_messages",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 4,
            name: "send_only_user_messages",
            kind: "scalar",
            T: 8,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new ol).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ol).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ol).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ol, e, t)
        }
    }
    class ml extends E {
        model = be.MODEL_UNSPECIFIED;
        numRollouts = 0;
        judgeModel = be.MODEL_UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CascadeAgenticPlannerApplierConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "enabled",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 2,
            name: "model",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 3,
            name: "num_rollouts",
            kind: "scalar",
            T: 5
        }, {
            no: 4,
            name: "judge_model",
            kind: "enum",
            T: ye.getEnumType(be)
        }]));
        static fromBinary(e, t) {
            return (new ml).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ml).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ml).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ml, e, t)
        }
    }
    class cl extends E {
        toolSet = As.UNSPECIFIED;
        mixin = Os.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CascadeAgenticPlannerConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "enable_feedback_loop",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 2,
            name: "eval_mode",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 5,
            name: "tool_set",
            kind: "enum",
            T: ye.getEnumType(As)
        }, {
            no: 6,
            name: "mixin",
            kind: "enum",
            T: ye.getEnumType(Os)
        }, {
            no: 3,
            name: "manager_config",
            kind: "message",
            T: ol,
            opt: !0
        }, {
            no: 4,
            name: "applier_config",
            kind: "message",
            T: ml,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new cl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new cl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new cl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(cl, e, t)
        }
    }
    class ul extends E {
        clusterPath = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CascadeResearchPlannerConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "add_reference_nodes",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 2,
            name: "use_clusters",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 3,
            name: "cluster_path",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new ul).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ul).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ul).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ul, e, t)
        }
    }
    class ll extends E {
        mQueryModel = be.MODEL_UNSPECIFIED;
        maxTokensPerMQuery = 0;
        maxLinesPerSnippet = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.MqueryToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "m_query_config",
            kind: "message",
            T: xa
        }, {
            no: 2,
            name: "m_query_model",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 3,
            name: "max_tokens_per_m_query",
            kind: "scalar",
            T: 13
        }, {
            no: 4,
            name: "num_items_full_source",
            kind: "scalar",
            T: 5,
            opt: !0
        }, {
            no: 5,
            name: "max_lines_per_snippet",
            kind: "scalar",
            T: 5
        }, {
            no: 6,
            name: "enable_search_in_file_tool",
            kind: "scalar",
            T: 8,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new ll).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ll).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ll).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ll, e, t)
        }
    }
    class _l extends E {
        maxGrepResults = 0;
        numFullSourceCcis = 0;
        maxBytesPerCci = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.GrepToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "max_grep_results",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "include_cci_in_result",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 3,
            name: "num_full_source_ccis",
            kind: "scalar",
            T: 13
        }, {
            no: 4,
            name: "max_bytes_per_cci",
            kind: "scalar",
            T: 13
        }, {
            no: 5,
            name: "enterprise_config",
            kind: "message",
            T: Ml
        }]));
        static fromBinary(e, t) {
            return (new _l).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new _l).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new _l).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(_l, e, t)
        }
    }
    class El extends E {
        maxFindResults = 0;
        fdPath = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.FindToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "max_find_results",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "fd_path",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new El).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new El).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new El).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(El, e, t)
        }
    }
    class dl extends E {
        maxClusterQueryResults = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ClusterQueryToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "max_cluster_query_results",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new dl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new dl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new dl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(dl, e, t)
        }
    }
    class Tl extends E {
        maxTokensPerInspectCluster = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.InspectClusterToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "max_tokens_per_inspect_cluster",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new Tl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Tl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Tl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Tl, e, t)
        }
    }
    class fl extends E {
        userAllowlist = [];
        userDenylist = [];
        systemAllowlist = [];
        systemDenylist = [];
        systemNooplist = [];
        autoExecutionPolicy = pt.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.AutoCommandConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "enable_model_auto_run",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 2,
            name: "user_allowlist",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 3,
            name: "user_denylist",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 4,
            name: "system_allowlist",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 5,
            name: "system_denylist",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 7,
            name: "system_nooplist",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 6,
            name: "auto_execution_policy",
            kind: "enum",
            T: ye.getEnumType(pt)
        }]));
        static fromBinary(e, t) {
            return (new fl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new fl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new fl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(fl, e, t)
        }
    }
    class pl extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ListDirToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "enterprise_config",
            kind: "message",
            T: Ml
        }]));
        static fromBinary(e, t) {
            return (new pl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new pl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new pl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(pl, e, t)
        }
    }
    class Sl extends E {
        maxCharsCommandStdout = 0;
        shellName = "";
        shellPath = "";
        maxTimeoutMs = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.RunCommandToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "max_chars_command_stdout",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "force_disable",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 3,
            name: "auto_command_config",
            kind: "message",
            T: fl
        }, {
            no: 4,
            name: "enable_ide_terminal_execution",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 8,
            name: "enable_midterm_output_processor",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 5,
            name: "shell_name",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "shell_path",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "max_timeout_ms",
            kind: "scalar",
            T: 13
        }, {
            no: 9,
            name: "enterprise_config",
            kind: "message",
            T: Ml
        }]));
        static fromBinary(e, t) {
            return (new Sl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Sl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Sl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Sl, e, t)
        }
    }
    class Nl extends E {
        maxTokensPerKnowledgeBaseSearch = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.KnowledgeBaseSearchToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "max_tokens_per_knowledge_base_search",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "prompt_fraction",
            kind: "scalar",
            T: 1,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new Nl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Nl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Nl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Nl, e, t)
        }
    }
    class Cl extends E {
        enabled = !1;
        promptUnchangedThreshold = 0;
        contentViewRadiusLines = 0;
        contentEditRadiusLines = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.FastApplyFallbackConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "enabled",
            kind: "scalar",
            T: 8
        }, {
            no: 2,
            name: "prompt_unchanged_threshold",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "content_view_radius_lines",
            kind: "scalar",
            T: 13
        }, {
            no: 4,
            name: "content_edit_radius_lines",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new Cl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Cl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Cl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Cl, e, t)
        }
    }
    class Il extends E {
        maxFuzzyEditDistanceFraction = 0;
        allowPartialReplacementSuccess = !1;
        viewFileRecencyMaxDistance = 0;
        enableFuzzySandwichMatch = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ReplaceContentToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "max_fuzzy_edit_distance_fraction",
            kind: "scalar",
            T: 2
        }, {
            no: 2,
            name: "allow_partial_replacement_success",
            kind: "scalar",
            T: 8
        }, {
            no: 3,
            name: "view_file_recency_max_distance",
            kind: "scalar",
            T: 13
        }, {
            no: 4,
            name: "enable_fuzzy_sandwich_match",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "fast_apply_fallback_config",
            kind: "message",
            T: Cl
        }]));
        static fromBinary(e, t) {
            return (new Il).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Il).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Il).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Il, e, t)
        }
    }
    class gl extends E {
        disableExtensions = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CodeToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "disable_extensions",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 2,
            name: "apply_edits",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 3,
            name: "use_replace_content_edit_tool",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 4,
            name: "replace_content_tool_config",
            kind: "message",
            T: Il
        }, {
            no: 5,
            name: "auto_fix_lints_config",
            kind: "message",
            T: kl
        }, {
            no: 6,
            name: "allow_edit_gitignore",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 7,
            name: "enterprise_config",
            kind: "message",
            T: Ml
        }]));
        static fromBinary(e, t) {
            return (new gl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new gl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new gl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(gl, e, t)
        }
    }
    class Ol extends E {
        intentModel = be.MODEL_UNSPECIFIED;
        maxContextTokens = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.IntentToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "intent_model",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 2,
            name: "max_context_tokens",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new Ol).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ol).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ol).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ol, e, t)
        }
    }
    class Al extends E {
        maxTokensPerOutline = 0;
        maxDocLinesFraction = 0;
        maxTotalOutlineBytes = 0;
        maxBytesPerOutlineItem = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ViewFileToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "max_tokens_per_outline",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "max_doc_lines_fraction",
            kind: "scalar",
            T: 2
        }, {
            no: 4,
            name: "allow_doc_outline",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 5,
            name: "use_line_numbers_for_raw",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 6,
            name: "use_prompt_prefix",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 7,
            name: "allow_view_gitignore",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 8,
            name: "split_outline_tool",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 9,
            name: "max_total_outline_bytes",
            kind: "scalar",
            T: 13
        }, {
            no: 11,
            name: "max_bytes_per_outline_item",
            kind: "scalar",
            T: 13
        }, {
            no: 10,
            name: "show_full_file_bytes",
            kind: "scalar",
            T: 13,
            opt: !0
        }, {
            no: 12,
            name: "enterprise_config",
            kind: "message",
            T: Ml
        }]));
        static fromBinary(e, t) {
            return (new Al).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Al).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Al).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Al, e, t)
        }
    }
    class Pl extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.SuggestedResponseConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "force_disable",
            kind: "scalar",
            T: 8,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new Pl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Pl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Pl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Pl, e, t)
        }
    }
    class Ll extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.SearchWebToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "force_disable",
            kind: "scalar",
            T: 8,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new Ll).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ll).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ll).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ll, e, t)
        }
    }
    class Rl extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.MemoryToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "force_disable",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 2,
            name: "disable_auto_generate_memories",
            kind: "scalar",
            T: 8,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new Rl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Rl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Rl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Rl, e, t)
        }
    }
    class yl extends E {
        maxOutputBytes = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.McpToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "force_disable",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 2,
            name: "max_output_bytes",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new yl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new yl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new yl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(yl, e, t)
        }
    }
    class wl extends E {
        subagentModel = be.MODEL_UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CustomRecipeConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "force_disable",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 2,
            name: "subagent_model",
            kind: "enum",
            T: ye.getEnumType(be)
        }]));
        static fromBinary(e, t) {
            return (new wl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new wl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new wl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(wl, e, t)
        }
    }
    class kl extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.AutoFixLintsConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "enabled",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 2,
            name: "notifying_prompt",
            kind: "scalar",
            T: 9,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new kl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new kl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new kl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(kl, e, t)
        }
    }
    class Dl extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ProxyWebServerToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "force_disable",
            kind: "scalar",
            T: 8,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new Dl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Dl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Dl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Dl, e, t)
        }
    }
    class Jl extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.DeployWebAppToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "enabled",
            kind: "scalar",
            T: 8,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new Jl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Jl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Jl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Jl, e, t)
        }
    }
    class Ml extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.EnterpriseToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "enforce_workspace_validation",
            kind: "scalar",
            T: 8,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new Ml).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ml).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ml).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ml, e, t)
        }
    }
    class Ul extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ViewCodeItemToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "max_num_items",
            kind: "scalar",
            T: 13,
            opt: !0
        }, {
            no: 2,
            name: "max_bytes_per_item",
            kind: "scalar",
            T: 13,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new Ul).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ul).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ul).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ul, e, t)
        }
    }
    class xl extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CascadeToolConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "mquery",
            kind: "message",
            T: ll
        }, {
            no: 2,
            name: "code",
            kind: "message",
            T: gl
        }, {
            no: 3,
            name: "intent",
            kind: "message",
            T: Ol
        }, {
            no: 4,
            name: "grep",
            kind: "message",
            T: _l
        }, {
            no: 5,
            name: "find",
            kind: "message",
            T: El
        }, {
            no: 6,
            name: "cluster_query",
            kind: "message",
            T: dl
        }, {
            no: 7,
            name: "inspect_cluster",
            kind: "message",
            T: Tl
        }, {
            no: 8,
            name: "run_command",
            kind: "message",
            T: Sl
        }, {
            no: 9,
            name: "knowledge_base_search",
            kind: "message",
            T: Nl
        }, {
            no: 10,
            name: "view_file",
            kind: "message",
            T: Al
        }, {
            no: 11,
            name: "suggested_response",
            kind: "message",
            T: Pl
        }, {
            no: 13,
            name: "search_web",
            kind: "message",
            T: Ll
        }, {
            no: 14,
            name: "memory",
            kind: "message",
            T: Rl
        }, {
            no: 15,
            name: "custom_recipe",
            kind: "message",
            T: wl
        }, {
            no: 16,
            name: "mcp",
            kind: "message",
            T: yl
        }, {
            no: 17,
            name: "proxy_web_server",
            kind: "message",
            T: Dl
        }, {
            no: 18,
            name: "deploy_web_app",
            kind: "message",
            T: Jl
        }, {
            no: 19,
            name: "list_dir",
            kind: "message",
            T: pl
        }, {
            no: 20,
            name: "view_code_item",
            kind: "message",
            T: Ul
        }]));
        static fromBinary(e, t) {
            return (new xl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new xl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new xl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(xl, e, t)
        }
    }
    class Bl extends E {
        plannerTypeConfig = {
            case: void 0
        };
        planModel = be.MODEL_UNSPECIFIED;
        maxIterations = 0;
        maxStepParseRetries = 0;
        maxOutputTokens = 0;
        truncationThresholdTokens = 0;
        numParallelRollouts = 0;
        judgeModel = be.MODEL_UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CascadePlannerConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 2,
            name: "conversational",
            kind: "message",
            T: il,
            oneof: "planner_type_config"
        }, {
            no: 3,
            name: "agentic",
            kind: "message",
            T: cl,
            oneof: "planner_type_config"
        }, {
            no: 10,
            name: "research",
            kind: "message",
            T: ul,
            oneof: "planner_type_config"
        }, {
            no: 13,
            name: "tool_config",
            kind: "message",
            T: xl
        }, {
            no: 1,
            name: "plan_model",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 15,
            name: "requested_model",
            kind: "message",
            T: rn
        }, {
            no: 4,
            name: "max_iterations",
            kind: "scalar",
            T: 13
        }, {
            no: 5,
            name: "max_step_parse_retries",
            kind: "scalar",
            T: 13
        }, {
            no: 6,
            name: "max_output_tokens",
            kind: "scalar",
            T: 13
        }, {
            no: 7,
            name: "no_tool_explanation",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 11,
            name: "allow_pending_steps",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 12,
            name: "forbid_tool_use_on_last_retry",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 14,
            name: "truncation_threshold_tokens",
            kind: "scalar",
            T: 5
        }, {
            no: 17,
            name: "num_parallel_rollouts",
            kind: "scalar",
            T: 5
        }, {
            no: 19,
            name: "judge_model",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 20,
            name: "include_ephemeral_message",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 21,
            name: "ephemeral_messages_config",
            kind: "message",
            T: TE
        }]));
        static fromBinary(e, t) {
            return (new Bl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Bl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Bl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Bl, e, t)
        }
    }
    class hl extends E {
        identifier = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.BaseTrajectoryIdentifier";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cascade_id",
            kind: "scalar",
            T: 9,
            oneof: "identifier"
        }, {
            no: 2,
            name: "implicit_trajectory_file_uri",
            kind: "scalar",
            T: 9,
            oneof: "identifier"
        }, {
            no: 3,
            name: "last_active_doc",
            kind: "scalar",
            T: 8,
            oneof: "identifier"
        }, {
            no: 4,
            name: "trajectory",
            kind: "message",
            T: vu,
            oneof: "identifier"
        }]));
        static fromBinary(e, t) {
            return (new hl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new hl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new hl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(hl, e, t)
        }
    }
    class Fl extends E {
        confirm = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CascadeUserBinaryConfirmation";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "confirm",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Fl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Fl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Fl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Fl, e, t)
        }
    }
    class bl extends (null) {
        subdomain = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "subdomain",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new bl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new bl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new bl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(bl, e, t)
        }
    }
    class ql extends E {
        cancel = !1;
        provider = "";
        subdomain = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CascadeDeployInteraction";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cancel",
            kind: "scalar",
            T: 8
        }, {
            no: 2,
            name: "provider",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "subdomain",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new ql).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ql).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ql).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ql, e, t)
        }
    }
    class Gl extends E {
        providerOptions = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CascadeDeployInteractionSpec";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "provider_options",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Gl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Gl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Gl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Gl, e, t)
        }
    }
    class Hl extends E {
        interaction = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.RequestedInteraction";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "binary",
            kind: "scalar",
            T: 8,
            oneof: "interaction"
        }, {
            no: 2,
            name: "deploy",
            kind: "message",
            T: Gl,
            oneof: "interaction"
        }]));
        static fromBinary(e, t) {
            return (new Hl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Hl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Hl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Hl, e, t)
        }
    }
    class vl extends E {
        trajectoryId = "";
        stepIndex = 0;
        interaction = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CascadeUserInteraction";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "trajectory_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "step_index",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "binary_confirmation",
            kind: "message",
            T: Fl,
            oneof: "interaction"
        }, {
            no: 4,
            name: "deploy",
            kind: "message",
            T: ql,
            oneof: "interaction"
        }]));
        static fromBinary(e, t) {
            return (new vl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new vl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new vl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(vl, e, t)
        }
    }
    class Vl extends E {
        input = 0;
        output = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepDummy";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "input",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "output",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new Vl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Vl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Vl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Vl, e, t)
        }
    }
    class Yl extends E {
        output = {};
        outputString = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepFinish";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "output",
            kind: "map",
            K: 9,
            V: {
                kind: "scalar",
                T: 9
            }
        }, {
            no: 2,
            name: "output_string",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Yl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Yl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Yl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Yl, e, t)
        }
    }
    class Xl extends E {
        userProvided = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepPlanInput";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "plan_input",
            kind: "message",
            T: Cu
        }, {
            no: 2,
            name: "user_provided",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Xl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Xl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Xl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Xl, e, t)
        }
    }
    class Kl extends E {
        checkpointIndex = 0;
        intentOnly = !1;
        includedStepIndexStart = 0;
        includedStepIndexEnd = 0;
        conversationTitle = "";
        userIntent = "";
        sessionSummary = "";
        codeChangeSummary = "";
        editedFileMap = {};
        includedStepIndices = [];
        memorySummary = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepCheckpoint";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "checkpoint_index",
            kind: "scalar",
            T: 13
        }, {
            no: 9,
            name: "intent_only",
            kind: "scalar",
            T: 8
        }, {
            no: 11,
            name: "included_step_index_start",
            kind: "scalar",
            T: 13
        }, {
            no: 12,
            name: "included_step_index_end",
            kind: "scalar",
            T: 13
        }, {
            no: 10,
            name: "conversation_title",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "user_intent",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "session_summary",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "code_change_summary",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "edited_file_map",
            kind: "map",
            K: 9,
            V: {
                kind: "message",
                T: ri
            }
        }, {
            no: 3,
            name: "included_step_indices",
            kind: "scalar",
            T: 13,
            repeated: !0
        }, {
            no: 8,
            name: "memory_summary",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Kl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Kl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Kl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Kl, e, t)
        }
    }
    class Wl extends E {
        tokenThreshold = 0;
        maxOverheadRatio = 0;
        movingWindowSize = 0;
        maxTokenLimit = 0;
        maxOutputTokens = 0;
        checkpointModel = be.MODEL_UNSPECIFIED;
        type = Ls.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CheckpointConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "token_threshold",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "max_overhead_ratio",
            kind: "scalar",
            T: 2
        }, {
            no: 4,
            name: "moving_window_size",
            kind: "scalar",
            T: 13
        }, {
            no: 5,
            name: "max_token_limit",
            kind: "scalar",
            T: 13
        }, {
            no: 11,
            name: "max_output_tokens",
            kind: "scalar",
            T: 13
        }, {
            no: 7,
            name: "checkpoint_model",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 6,
            name: "enabled",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 9,
            name: "type",
            kind: "enum",
            T: ye.getEnumType(Ls)
        }, {
            no: 10,
            name: "condense_input_trajectory",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 8,
            name: "use_subagent_checkpointer",
            kind: "scalar",
            T: 8,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new Wl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Wl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Wl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Wl, e, t)
        }
    }
    class zl extends E {
        ccis = [];
        numTokensProcessed = 0;
        numItemsScored = 0;
        searchType = Rs.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepMquery";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "input",
            kind: "message",
            T: Cu
        }, {
            no: 2,
            name: "ccis",
            kind: "message",
            T: zi,
            repeated: !0
        }, {
            no: 3,
            name: "num_tokens_processed",
            kind: "scalar",
            T: 13
        }, {
            no: 4,
            name: "num_items_scored",
            kind: "scalar",
            T: 13
        }, {
            no: 5,
            name: "search_type",
            kind: "enum",
            T: ye.getEnumType(Rs)
        }]));
        static fromBinary(e, t) {
            return (new zl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new zl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new zl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(zl, e, t)
        }
    }
    class jl extends E {
        boundaryType = ys.UNSPECIFIED;
        completionId = "";
        intent = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ImplicitCodeActionMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "boundary_type",
            kind: "enum",
            T: ye.getEnumType(ys)
        }, {
            no: 2,
            name: "completion_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "intent",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new jl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new jl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new jl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(jl, e, t)
        }
    }
    class Ql extends E {
        fuzzyMatch = "";
        editDistance = 0;
        relEditDistance = 0;
        numMatches = 0;
        isNonExact = !1;
        boundaryLinesMatch = !1;
        error = !1;
        errorStr = "";
        fastApplyFixable = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ReplacementChunkInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "original_chunk",
            kind: "message",
            T: Lu
        }, {
            no: 2,
            name: "fuzzy_match",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "edit_distance",
            kind: "scalar",
            T: 5
        }, {
            no: 4,
            name: "rel_edit_distance",
            kind: "scalar",
            T: 2
        }, {
            no: 5,
            name: "num_matches",
            kind: "scalar",
            T: 13
        }, {
            no: 7,
            name: "is_non_exact",
            kind: "scalar",
            T: 8
        }, {
            no: 8,
            name: "boundary_lines_match",
            kind: "scalar",
            T: 8
        }, {
            no: 6,
            name: "error",
            kind: "scalar",
            T: 8
        }, {
            no: 9,
            name: "error_str",
            kind: "scalar",
            T: 9
        }, {
            no: 10,
            name: "fast_apply_fixable",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Ql).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ql).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ql).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ql, e, t)
        }
    }
    class $l extends E {
        fallbackAttempted = !1;
        fallbackError = "";
        heuristicFailure = ks.UNSPECIFIED;
        fastApplyPrompt = "";
        numFastApplyEditsMasked = 0;
        fallbackMatchHadNoDiff = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.FastApplyFallbackInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "fallback_attempted",
            kind: "scalar",
            T: 8
        }, {
            no: 2,
            name: "fallback_error",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "fast_apply_result",
            kind: "message",
            T: wu
        }, {
            no: 4,
            name: "heuristic_failure",
            kind: "enum",
            T: ye.getEnumType(ks)
        }, {
            no: 5,
            name: "fast_apply_prompt",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "num_fast_apply_edits_masked",
            kind: "scalar",
            T: 13
        }, {
            no: 7,
            name: "fallback_match_had_no_diff",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new $l).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new $l).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new $l).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals($l, e, t)
        }
    }
    class Zl extends E {
        useFastApply = !1;
        acknowledgementType = ws.UNSPECIFIED;
        blocking = !1;
        heuristicFailure = ks.UNSPECIFIED;
        codeInstruction = "";
        markdownLanguage = "";
        dryRun = !1;
        lintErrors = [];
        persistentLintErrors = [];
        replacementInfos = [];
        lintErrorIdsAimingToFix = [];
        targetFileHasCarriageReturns = !1;
        targetFileHasAllCarriageReturns = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepCodeAction";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "action_spec",
            kind: "message",
            T: Iu
        }, {
            no: 2,
            name: "action_result",
            kind: "message",
            T: wu
        }, {
            no: 3,
            name: "implicit_metadata",
            kind: "message",
            T: jl
        }, {
            no: 4,
            name: "use_fast_apply",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "acknowledgement_type",
            kind: "enum",
            T: ye.getEnumType(ws)
        }, {
            no: 6,
            name: "blocking",
            kind: "scalar",
            T: 8
        }, {
            no: 7,
            name: "heuristic_failure",
            kind: "enum",
            T: ye.getEnumType(ks)
        }, {
            no: 8,
            name: "code_instruction",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "markdown_language",
            kind: "scalar",
            T: 9
        }, {
            no: 10,
            name: "dry_run",
            kind: "scalar",
            T: 8
        }, {
            no: 11,
            name: "lint_errors",
            kind: "message",
            T: or,
            repeated: !0
        }, {
            no: 12,
            name: "persistent_lint_errors",
            kind: "message",
            T: or,
            repeated: !0
        }, {
            no: 13,
            name: "replacement_infos",
            kind: "message",
            T: Ql,
            repeated: !0
        }, {
            no: 14,
            name: "lint_error_ids_aiming_to_fix",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 15,
            name: "fast_apply_fallback_info",
            kind: "message",
            T: $l
        }, {
            no: 16,
            name: "target_file_has_carriage_returns",
            kind: "scalar",
            T: 8
        }, {
            no: 17,
            name: "target_file_has_all_carriage_returns",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Zl).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Zl).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Zl).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Zl, e, t)
        }
    }
    class e_ extends E {
        codeInstruction = "";
        markdownLanguage = "";
        blocking = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepProposeCode";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "action_spec",
            kind: "message",
            T: Iu
        }, {
            no: 2,
            name: "action_result",
            kind: "message",
            T: wu
        }, {
            no: 3,
            name: "code_instruction",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "markdown_language",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "blocking",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new e_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new e_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new e_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(e_, e, t)
        }
    }
    class t_ extends E {
        commitMessage = "";
        commitHash = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepGitCommit";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "input",
            kind: "message",
            T: Cu
        }, {
            no: 2,
            name: "commit_message",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "commit_hash",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new t_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new t_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new t_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(t_, e, t)
        }
    }
    class n_ extends E {
        relativePath = "";
        lineNumber = 0;
        content = "";
        absolutePath = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.GrepSearchResult";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "relative_path",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "line_number",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "content",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "absolute_path",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "cci",
            kind: "message",
            T: Kn
        }]));
        static fromBinary(e, t) {
            return (new n_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new n_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new n_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(n_, e, t)
        }
    }
    class a_ extends E {
        informCciList = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepInformPlanner";
        static fields = ye.util.newFieldList(( () => [{
            no: 3,
            name: "target_code_change",
            kind: "message",
            T: wm
        }, {
            no: 4,
            name: "inform_cci_list",
            kind: "message",
            T: zi,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new a_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new a_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new a_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(a_, e, t)
        }
    }
    class r_ extends (null) {
        cciRatio = 0;
        randomize = !1;
        manualSeed = 0;
        mode = Ds.UNSPECIFIED;
        isCertain = !1;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cci_ratio",
            kind: "scalar",
            T: 2
        }, {
            no: 2,
            name: "randomize",
            kind: "scalar",
            T: 8
        }, {
            no: 3,
            name: "manual_seed",
            kind: "scalar",
            T: 13
        }, {
            no: 4,
            name: "mode",
            kind: "enum",
            T: ye.getEnumType(Ds)
        }, {
            no: 5,
            name: "is_certain",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new r_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new r_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new r_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(r_, e, t)
        }
    }
    class s_ extends (null) {
        numSamplesPerCommit = 0;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "num_samples_per_commit",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new s_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new s_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new s_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(s_, e, t)
        }
    }
    class i_ extends E {
        searchPathUri = "";
        query = "";
        matchPerLine = !1;
        includes = [];
        caseInsensitive = !1;
        results = [];
        totalResults = 0;
        rawOutput = "";
        commandRun = "";
        noFilesSearched = !1;
        grepError = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepGrepSearch";
        static fields = ye.util.newFieldList(( () => [{
            no: 11,
            name: "search_path_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 1,
            name: "query",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "match_per_line",
            kind: "scalar",
            T: 8
        }, {
            no: 2,
            name: "includes",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 9,
            name: "case_insensitive",
            kind: "scalar",
            T: 8
        }, {
            no: 4,
            name: "results",
            kind: "message",
            T: n_,
            repeated: !0
        }, {
            no: 7,
            name: "total_results",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "raw_output",
            kind: "scalar",
            T: 9
        }, {
            no: 10,
            name: "command_run",
            kind: "scalar",
            T: 9
        }, {
            no: 12,
            name: "no_files_searched",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "grep_error",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new i_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new i_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new i_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(i_, e, t)
        }
    }
    class o_ extends E {
        searchDirectory = "";
        pattern = "";
        excludes = [];
        type = Js.UNSPECIFIED;
        maxDepth = 0;
        extensions = [];
        fullPath = !1;
        truncatedOutput = "";
        truncatedTotalResults = 0;
        totalResults = 0;
        rawOutput = "";
        commandRun = "";
        includes = [];
        findError = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepFind";
        static fields = ye.util.newFieldList(( () => [{
            no: 10,
            name: "search_directory",
            kind: "scalar",
            T: 9
        }, {
            no: 1,
            name: "pattern",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "excludes",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 4,
            name: "type",
            kind: "enum",
            T: ye.getEnumType(Js)
        }, {
            no: 5,
            name: "max_depth",
            kind: "scalar",
            T: 5
        }, {
            no: 12,
            name: "extensions",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 13,
            name: "full_path",
            kind: "scalar",
            T: 8
        }, {
            no: 14,
            name: "truncated_output",
            kind: "scalar",
            T: 9
        }, {
            no: 15,
            name: "truncated_total_results",
            kind: "scalar",
            T: 13
        }, {
            no: 7,
            name: "total_results",
            kind: "scalar",
            T: 13
        }, {
            no: 11,
            name: "raw_output",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "command_run",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "includes",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 8,
            name: "find_error",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new o_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new o_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new o_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(o_, e, t)
        }
    }
    class m_ extends E {
        absolutePathUri = "";
        startLine = 0;
        endLine = 0;
        includeSummaryOfOtherLines = !1;
        hasLineNumbers = !1;
        maxTokens = 0;
        async = !1;
        content = "";
        rawContent = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepViewFile";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "absolute_path_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "start_line",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "end_line",
            kind: "scalar",
            T: 13
        }, {
            no: 7,
            name: "include_summary_of_other_lines",
            kind: "scalar",
            T: 8
        }, {
            no: 8,
            name: "has_line_numbers",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "max_tokens",
            kind: "scalar",
            T: 13
        }, {
            no: 6,
            name: "async",
            kind: "scalar",
            T: 8
        }, {
            no: 4,
            name: "content",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "raw_content",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new m_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new m_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new m_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(m_, e, t)
        }
    }
    class c_ extends E {
        name = "";
        isDir = !1;
        numChildren = 0;
        sizeBytes = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ListDirectoryResult";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "is_dir",
            kind: "scalar",
            T: 8
        }, {
            no: 3,
            name: "num_children",
            kind: "scalar",
            T: 13
        }, {
            no: 4,
            name: "size_bytes",
            kind: "scalar",
            T: 4
        }]));
        static fromBinary(e, t) {
            return (new c_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new c_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new c_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(c_, e, t)
        }
    }
    class u_ extends E {
        directoryPathUri = "";
        children = [];
        results = [];
        dirNotFound = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepListDirectory";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "directory_path_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "children",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 3,
            name: "results",
            kind: "message",
            T: c_,
            repeated: !0
        }, {
            no: 4,
            name: "dir_not_found",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new u_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new u_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new u_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(u_, e, t)
        }
    }
    class l_ extends E {
        message = "";
        path = "";
        line = 0;
        column = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepCompileDiagnostic";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "message",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "path",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "line",
            kind: "scalar",
            T: 13
        }, {
            no: 4,
            name: "column",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new l_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new l_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new l_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(l_, e, t)
        }
    }
    class __ extends E {
        query = "";
        inputClusters = [];
        repoName = "";
        scores = [];
        outputClusters = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepClusterQuery";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "query",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "input_clusters",
            kind: "message",
            T: Er,
            repeated: !0
        }, {
            no: 5,
            name: "repo_name",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "scores",
            kind: "scalar",
            T: 2,
            repeated: !0
        }, {
            no: 6,
            name: "output_clusters",
            kind: "message",
            T: Er,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new __).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new __).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new __).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(__, e, t)
        }
    }
    class E_ extends E {
        clusters = [];
        repoName = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepListClusters";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "clusters",
            kind: "message",
            T: Er,
            repeated: !0
        }, {
            no: 2,
            name: "repo_name",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new E_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new E_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new E_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(E_, e, t)
        }
    }
    class d_ extends E {
        tool = Ms.UNSPECIFIED;
        inputSpec = "";
        options = {};
        target = "";
        artifactPath = "";
        artifactIsExecutable = !1;
        errors = [];
        warnings = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepCompile";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "tool",
            kind: "enum",
            T: ye.getEnumType(Ms)
        }, {
            no: 2,
            name: "input_spec",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "options",
            kind: "map",
            K: 9,
            V: {
                kind: "scalar",
                T: 9
            }
        }, {
            no: 4,
            name: "target",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "artifact_path",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "artifact_is_executable",
            kind: "scalar",
            T: 8
        }, {
            no: 7,
            name: "errors",
            kind: "message",
            T: l_,
            repeated: !0
        }, {
            no: 8,
            name: "warnings",
            kind: "message",
            T: l_,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new d_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new d_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new d_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(d_, e, t)
        }
    }
    class T_ extends (null) {
        promptFraction = 0;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "prompt_fraction",
            kind: "scalar",
            T: 2
        }]));
        static fromBinary(e, t) {
            return (new T_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new T_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new T_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(T_, e, t)
        }
    }
    class f_ extends E {
        query = "";
        userResponse = "";
        items = [];
        images = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepUserInput";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "query",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "user_response",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "items",
            kind: "message",
            T: Ya,
            repeated: !0
        }, {
            no: 4,
            name: "active_user_state",
            kind: "message",
            T: ao
        }, {
            no: 5,
            name: "images",
            kind: "message",
            T: Nr,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new f_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new f_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new f_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(f_, e, t)
        }
    }
    class p_ extends (null) {
        openDocuments = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "active_document",
            kind: "message",
            T: va
        }, {
            no: 2,
            name: "open_documents",
            kind: "message",
            T: va,
            repeated: !0
        }, {
            no: 3,
            name: "active_node",
            kind: "message",
            T: Kn
        }]));
        static fromBinary(e, t) {
            return (new p_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new p_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new p_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(p_, e, t)
        }
    }
    class S_ extends E {
        response = "";
        thinking = "";
        signature = "";
        thinkingRedacted = !1;
        messageId = "";
        knowledgeBaseItems = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepPlannerResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "response",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "thinking",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "signature",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "thinking_redacted",
            kind: "scalar",
            T: 8
        }, {
            no: 6,
            name: "message_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "knowledge_base_items",
            kind: "message",
            T: pr,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new S_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new S_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new S_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(S_, e, t)
        }
    }
    class N_ extends E {
        absolutePath = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepFileBreakdown";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "absolute_path",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "document_outline",
            kind: "message",
            T: lr
        }]));
        static fromBinary(e, t) {
            return (new N_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new N_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new N_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(N_, e, t)
        }
    }
    class C_ extends E {
        absoluteUri = "";
        nodePaths = [];
        ccis = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepViewCodeItem";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "absolute_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "node_paths",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 5,
            name: "ccis",
            kind: "message",
            T: Kn,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new C_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new C_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new C_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(C_, e, t)
        }
    }
    class I_ extends E {
        targetFileUri = "";
        codeContent = [];
        fileCreated = !1;
        acknowledgementType = ws.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepWriteToFile";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "target_file_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "code_content",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 3,
            name: "diff",
            kind: "message",
            T: $s
        }, {
            no: 4,
            name: "file_created",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "acknowledgement_type",
            kind: "enum",
            T: ye.getEnumType(ws)
        }]));
        static fromBinary(e, t) {
            return (new I_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new I_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new I_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(I_, e, t)
        }
    }
    class g_ extends E {
        queries = [];
        connectorTypes = [];
        aggregateIds = [];
        knowledgeBaseGroups = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepSearchKnowledgeBase";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "queries",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 3,
            name: "time_range",
            kind: "message",
            T: vm
        }, {
            no: 4,
            name: "connector_types",
            kind: "enum",
            T: ye.getEnumType(ls),
            repeated: !0
        }, {
            no: 7,
            name: "aggregate_ids",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 2,
            name: "knowledge_base_groups",
            kind: "message",
            T: Sr,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new g_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new g_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new g_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(g_, e, t)
        }
    }
    class O_ extends E {
        urls = [];
        documentIds = [];
        knowledgeBaseItems = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepLookupKnowledgeBase";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "urls",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 2,
            name: "document_ids",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 3,
            name: "knowledge_base_items",
            kind: "message",
            T: pr,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new O_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new O_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new O_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(O_, e, t)
        }
    }
    class A_ extends E {
        suggestions = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepSuggestedResponses";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "suggestions",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new A_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new A_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new A_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(A_, e, t)
        }
    }
    class P_ extends E {
        shouldShowModel = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepErrorMessage";
        static fields = ye.util.newFieldList(( () => [{
            no: 3,
            name: "error",
            kind: "message",
            T: el
        }, {
            no: 4,
            name: "should_show_model",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new P_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new P_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new P_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(P_, e, t)
        }
    }
    class L_ extends E {
        clusterId = "";
        query = "";
        ccis = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepInspectCluster";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cluster_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "query",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "matched_cluster",
            kind: "message",
            T: Er
        }, {
            no: 4,
            name: "ccis",
            kind: "message",
            T: zi,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new L_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new L_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new L_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(L_, e, t)
        }
    }
    class R_ extends E {
        full = "";
        truncated = "";
        numLinesAbove = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.RunCommandOutput";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "full",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "truncated",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "num_lines_above",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new R_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new R_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new R_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(R_, e, t)
        }
    }
    class y_ extends E {
        commandLine = "";
        cwd = "";
        blocking = !1;
        waitMsBeforeAsync = A.zero;
        shouldAutoRun = !1;
        requestedTerminalId = "";
        commandId = "";
        userRejected = !1;
        autoRunDecision = Us.UNSPECIFIED;
        terminalId = "";
        usedIdeTerminal = !1;
        rawDebugOutput = "";
        command = "";
        args = [];
        stdout = "";
        stderr = "";
        stdoutBuffer = "";
        stderrBuffer = "";
        stdoutLinesAbove = 0;
        stderrLinesAbove = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepRunCommand";
        static fields = ye.util.newFieldList(( () => [{
            no: 23,
            name: "command_line",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "cwd",
            kind: "scalar",
            T: 9
        }, {
            no: 11,
            name: "blocking",
            kind: "scalar",
            T: 8
        }, {
            no: 12,
            name: "wait_ms_before_async",
            kind: "scalar",
            T: 4
        }, {
            no: 15,
            name: "should_auto_run",
            kind: "scalar",
            T: 8
        }, {
            no: 17,
            name: "requested_terminal_id",
            kind: "scalar",
            T: 9
        }, {
            no: 13,
            name: "command_id",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "exit_code",
            kind: "scalar",
            T: 5,
            opt: !0
        }, {
            no: 14,
            name: "user_rejected",
            kind: "scalar",
            T: 8
        }, {
            no: 16,
            name: "auto_run_decision",
            kind: "enum",
            T: ye.getEnumType(Us)
        }, {
            no: 18,
            name: "terminal_id",
            kind: "scalar",
            T: 9
        }, {
            no: 19,
            name: "stdout_output",
            kind: "message",
            T: R_
        }, {
            no: 20,
            name: "stderr_output",
            kind: "message",
            T: R_
        }, {
            no: 21,
            name: "combined_output",
            kind: "message",
            T: R_
        }, {
            no: 22,
            name: "used_ide_terminal",
            kind: "scalar",
            T: 8
        }, {
            no: 24,
            name: "raw_debug_output",
            kind: "scalar",
            T: 9
        }, {
            no: 1,
            name: "command",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "args",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 4,
            name: "stdout",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "stderr",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "stdout_buffer",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "stderr_buffer",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "stdout_lines_above",
            kind: "scalar",
            T: 13
        }, {
            no: 10,
            name: "stderr_lines_above",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new y_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new y_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new y_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(y_, e, t)
        }
    }
    class w_ extends E {
        absoluteUri = "";
        relatedFileAbsoluteUris = [];
        scores = [];
        relatedFileError = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepRelatedFiles";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "absolute_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "related_file_absolute_uris",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 3,
            name: "scores",
            kind: "scalar",
            T: 2,
            repeated: !0
        }, {
            no: 4,
            name: "related_file_error",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new w_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new w_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new w_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(w_, e, t)
        }
    }
    class k_ extends E {
        url = "";
        resolvedUrl = "";
        latencyMs = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepReadUrlContent";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "url",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "web_document",
            kind: "message",
            T: fr
        }, {
            no: 3,
            name: "resolved_url",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "latency_ms",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new k_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new k_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new k_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(k_, e, t)
        }
    }
    class D_ extends E {
        url = "";
        position = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepViewContentChunk";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "url",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "position",
            kind: "scalar",
            T: 5
        }, {
            no: 3,
            name: "cropped_web_document",
            kind: "message",
            T: fr
        }]));
        static fromBinary(e, t) {
            return (new D_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new D_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new D_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(D_, e, t)
        }
    }
    class J_ extends E {
        query = "";
        domain = "";
        webDocuments = [];
        webSearchUrl = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepSearchWeb";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "query",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "domain",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "web_documents",
            kind: "message",
            T: fr,
            repeated: !0
        }, {
            no: 4,
            name: "web_search_url",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new J_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new J_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new J_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(J_, e, t)
        }
    }
    class M_ extends E {
        projectPath = "";
        deploymentConfigUri = "";
        missingFileUris = [];
        willUploadNodeModules = !1;
        willUploadDist = !1;
        ignoreFileUris = [];
        numFilesToUpload = 0;
        envFileUris = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepReadDeploymentConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "project_path",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "deployment_config_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "deployment_config",
            kind: "message",
            T: Dr
        }, {
            no: 4,
            name: "missing_file_uris",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 5,
            name: "will_upload_node_modules",
            kind: "scalar",
            T: 8
        }, {
            no: 6,
            name: "will_upload_dist",
            kind: "scalar",
            T: 8
        }, {
            no: 7,
            name: "ignore_file_uris",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 8,
            name: "num_files_to_upload",
            kind: "scalar",
            T: 13
        }, {
            no: 9,
            name: "env_file_uris",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new M_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new M_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new M_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(M_, e, t)
        }
    }
    class U_ extends E {
        projectPath = "";
        subdomain = "";
        projectId = "";
        framework = "";
        userConfirmed = !1;
        fileUploadStatus = {};
        deploymentConfigUri = "";
        subdomainUsed = "";
        claimUrl = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepDeployWebApp";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "project_path",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "subdomain",
            kind: "scalar",
            T: 9
        }, {
            no: 11,
            name: "project_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "framework",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "user_confirmed",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "file_upload_status",
            kind: "map",
            K: 9,
            V: {
                kind: "enum",
                T: ye.getEnumType(xs)
            }
        }, {
            no: 6,
            name: "deployment",
            kind: "message",
            T: yr
        }, {
            no: 7,
            name: "deployment_config_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "deployment_config_output",
            kind: "message",
            T: Dr
        }, {
            no: 9,
            name: "subdomain_used",
            kind: "scalar",
            T: 9
        }, {
            no: 10,
            name: "claim_url",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new U_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new U_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new U_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(U_, e, t)
        }
    }
    class x_ extends E {
        content = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepClipboard";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "content",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new x_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new x_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new x_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(x_, e, t)
        }
    }
    class B_ extends (null) {
        cascadeId = "";
        status = gs.UNSPECIFIED;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cascade_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "trajectory",
            kind: "message",
            T: vu
        }, {
            no: 3,
            name: "status",
            kind: "enum",
            T: ye.getEnumType(gs)
        }]));
        static fromBinary(e, t) {
            return (new B_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new B_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new B_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(B_, e, t)
        }
    }
    class h_ extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "plan_status",
            kind: "message",
            T: Hn
        }, {
            no: 2,
            name: "user_settings",
            kind: "message",
            T: ca
        }]));
        static fromBinary(e, t) {
            return (new h_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new h_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new h_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(h_, e, t)
        }
    }
    class F_ extends E {
        commandId = "";
        outputPriority = Bs.UNSPECIFIED;
        outputCharacterCount = 0;
        waitDurationSeconds = 0;
        status = Is.UNSPECIFIED;
        stdout = "";
        stderr = "";
        combined = "";
        waitedDurationSeconds = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepCommandStatus";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "command_id",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "output_priority",
            kind: "enum",
            T: ye.getEnumType(Bs)
        }, {
            no: 8,
            name: "output_character_count",
            kind: "scalar",
            T: 13
        }, {
            no: 10,
            name: "wait_duration_seconds",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "status",
            kind: "enum",
            T: ye.getEnumType(Is)
        }, {
            no: 3,
            name: "stdout",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "stderr",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "combined",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "exit_code",
            kind: "scalar",
            T: 5,
            opt: !0
        }, {
            no: 6,
            name: "error",
            kind: "message",
            T: el
        }, {
            no: 11,
            name: "waited_duration_seconds",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new F_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new F_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new F_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(F_, e, t)
        }
    }
    class b_ extends E {
        memoryId = "";
        title = "";
        source = hs.UNSPECIFIED;
        memory = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexMemory";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "memory_id",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "title",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "metadata",
            kind: "message",
            T: q_
        }, {
            no: 3,
            name: "source",
            kind: "enum",
            T: ye.getEnumType(hs)
        }, {
            no: 4,
            name: "scope",
            kind: "message",
            T: H_
        }, {
            no: 5,
            name: "text_memory",
            kind: "message",
            T: G_,
            oneof: "memory"
        }]));
        static fromBinary(e, t) {
            return (new b_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new b_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new b_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(b_, e, t)
        }
    }
    class q_ extends E {
        tags = [];
        userTriggered = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexMemoryMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "created_at",
            kind: "message",
            T: De
        }, {
            no: 2,
            name: "last_modified",
            kind: "message",
            T: De
        }, {
            no: 3,
            name: "last_accessed",
            kind: "message",
            T: De
        }, {
            no: 4,
            name: "tags",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 5,
            name: "user_triggered",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new q_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new q_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new q_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(q_, e, t)
        }
    }
    class G_ extends E {
        content = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexMemoryText";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "content",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new G_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new G_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new G_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(G_, e, t)
        }
    }
    class H_ extends E {
        scope = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexMemoryScope";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "global_scope",
            kind: "message",
            T: v_,
            oneof: "scope"
        }, {
            no: 2,
            name: "local_scope",
            kind: "message",
            T: V_,
            oneof: "scope"
        }, {
            no: 3,
            name: "all_scope",
            kind: "message",
            T: Y_,
            oneof: "scope"
        }]));
        static fromBinary(e, t) {
            return (new H_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new H_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new H_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(H_, e, t)
        }
    }
    class v_ extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexMemoryGlobalScope";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new v_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new v_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new v_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(v_, e, t)
        }
    }
    class V_ extends E {
        corpusNames = [];
        baseDirUris = [];
        repoBaseDirUri = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexMemoryLocalScope";
        static fields = ye.util.newFieldList(( () => [{
            no: 2,
            name: "corpus_names",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 3,
            name: "base_dir_uris",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 1,
            name: "repo_base_dir_uri",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new V_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new V_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new V_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(V_, e, t)
        }
    }
    class Y_ extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexMemoryAllScope";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Y_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Y_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Y_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Y_, e, t)
        }
    }
    class X_ extends E {
        memoryId = "";
        action = Fs.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepMemory";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "memory_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "memory",
            kind: "message",
            T: b_
        }, {
            no: 4,
            name: "prev_memory",
            kind: "message",
            T: b_
        }, {
            no: 3,
            name: "action",
            kind: "enum",
            T: ye.getEnumType(Fs)
        }]));
        static fromBinary(e, t) {
            return (new X_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new X_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new X_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(X_, e, t)
        }
    }
    class K_ extends E {
        runSubagent = !1;
        addUserMemories = !1;
        addAutoCascadeMemories = !1;
        cascadeMemorySummary = "";
        userMemorySummary = "";
        autoCascadeMemorySummary = "";
        reason = "";
        showReason = !1;
        retrievedMemories = [];
        blocking = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepRetrieveMemory";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "run_subagent",
            kind: "scalar",
            T: 8
        }, {
            no: 8,
            name: "add_user_memories",
            kind: "scalar",
            T: 8
        }, {
            no: 10,
            name: "add_auto_cascade_memories",
            kind: "scalar",
            T: 8
        }, {
            no: 2,
            name: "cascade_memory_summary",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "user_memory_summary",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "auto_cascade_memory_summary",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "reason",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "show_reason",
            kind: "scalar",
            T: 8
        }, {
            no: 6,
            name: "retrieved_memories",
            kind: "message",
            T: b_,
            repeated: !0
        }, {
            no: 7,
            name: "blocking",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new K_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new K_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new K_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(K_, e, t)
        }
    }
    class W_ extends E {
        memoryModel = be.MODEL_UNSPECIFIED;
        numCheckpointsForContext = 0;
        numMemoriesToConsider = 0;
        maxGlobalCascadeMemories = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.MemoryConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "memory_model",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 5,
            name: "num_checkpoints_for_context",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "num_memories_to_consider",
            kind: "scalar",
            T: 5
        }, {
            no: 4,
            name: "max_global_cascade_memories",
            kind: "scalar",
            T: 5
        }, {
            no: 6,
            name: "condense_input_trajectory",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 7,
            name: "add_user_memories_to_system_prompt",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 2,
            name: "enabled",
            kind: "scalar",
            T: 8,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new W_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new W_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new W_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(W_, e, t)
        }
    }
    class z_ extends E {
        maxFilesInPrompt = 0;
        maxLinesPerFileInPrompt = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ViewedFileTrackerConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "max_steps_per_checkpoint",
            kind: "scalar",
            T: 13,
            opt: !0
        }, {
            no: 2,
            name: "max_files_in_prompt",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "max_lines_per_file_in_prompt",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new z_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new z_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new z_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(z_, e, t)
        }
    }
    class j_ extends E {
        diffBlockSeparationThreshold = A.zero;
        handleDeletions = !1;
        handleCreations = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CodeStepCreationOptions";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "diff_block_separation_threshold",
            kind: "scalar",
            T: 3
        }, {
            no: 2,
            name: "handle_deletions",
            kind: "scalar",
            T: 8
        }, {
            no: 3,
            name: "handle_creations",
            kind: "scalar",
            T: 8
        }, {
            no: 4,
            name: "include_original_content",
            kind: "scalar",
            T: 8,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new j_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new j_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new j_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(j_, e, t)
        }
    }
    class Q_ extends E {
        conditionOnEditStep = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.ViewFileStepCreationOptions";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "condition_on_edit_step",
            kind: "scalar",
            T: 8
        }, {
            no: 2,
            name: "include_raw_content",
            kind: "scalar",
            T: 8,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new Q_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Q_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Q_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Q_, e, t)
        }
    }
    class $_ extends E {
        numSearchEvents = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.UserGrepStepCreationOptions";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "num_search_events",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new $_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new $_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new $_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals($_, e, t)
        }
    }
    class Z_ extends (null) {
        stepTypeAllowList = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "code_step_creation_options",
            kind: "message",
            T: j_
        }, {
            no: 2,
            name: "view_file_step_creation_options",
            kind: "message",
            T: Q_
        }, {
            no: 3,
            name: "viewed_file_tracker_config",
            kind: "message",
            T: z_
        }, {
            no: 4,
            name: "step_type_allow_list",
            kind: "enum",
            T: ye.getEnumType(Ps),
            repeated: !0
        }, {
            no: 5,
            name: "user_grep_step_creation_options",
            kind: "message",
            T: $_
        }]));
        static fromBinary(e, t) {
            return (new Z_).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Z_).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Z_).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Z_, e, t)
        }
    }
    class eE extends E {
        recipeId = "";
        systemPrompt = "";
        requiresWriteMode = !1;
        isBuiltin = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CustomToolSpec";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "recipe_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "tool_definition",
            kind: "message",
            T: Di
        }, {
            no: 3,
            name: "system_prompt",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "config_override",
            kind: "message",
            T: rl
        }, {
            no: 5,
            name: "reference_trajectory",
            kind: "message",
            T: vu
        }, {
            no: 6,
            name: "requires_write_mode",
            kind: "scalar",
            T: 8
        }, {
            no: 7,
            name: "is_builtin",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new eE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new eE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new eE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(eE, e, t)
        }
    }
    class tE extends E {
        recipeId = "";
        argumentsJson = "";
        output = "";
        recipeName = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepCustomTool";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "recipe_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "arguments_json",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "output",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "recipe_name",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new tE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new tE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new tE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(tE, e, t)
        }
    }
    class nE extends E {
        message = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepAutoCascadeBroadcast";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "message",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new nE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new nE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new nE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(nE, e, t)
        }
    }
    class aE extends E {
        serverName = "";
        command = "";
        args = [];
        env = {};
        serverIndex = 0;
        serverUrl = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.McpServerSpec";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "server_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "command",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "args",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 4,
            name: "env",
            kind: "map",
            K: 9,
            V: {
                kind: "scalar",
                T: 9
            }
        }, {
            no: 5,
            name: "server_index",
            kind: "scalar",
            T: 13
        }, {
            no: 6,
            name: "server_url",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new aE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new aE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new aE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(aE, e, t)
        }
    }
    class rE extends E {
        name = "";
        version = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.McpServerInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "version",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new rE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new rE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new rE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(rE, e, t)
        }
    }
    class sE extends E {
        serverName = "";
        resultString = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepMcpTool";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "server_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "tool_call",
            kind: "message",
            T: ba
        }, {
            no: 4,
            name: "server_info",
            kind: "message",
            T: rE
        }, {
            no: 3,
            name: "result_string",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new sE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new sE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new sE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(sE, e, t)
        }
    }
    class iE extends E {
        status = bs.UNSPECIFIED;
        feedback = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepManagerFeedback";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "status",
            kind: "enum",
            T: ye.getEnumType(bs)
        }, {
            no: 2,
            name: "feedback",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new iE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new iE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new iE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(iE, e, t)
        }
    }
    class oE extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepToolCallProposal";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "tool_call",
            kind: "message",
            T: ba
        }]));
        static fromBinary(e, t) {
            return (new oE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new oE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new oE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(oE, e, t)
        }
    }
    class mE extends E {
        proposalToolCalls = [];
        choice = 0;
        reason = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepToolCallChoice";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "proposal_tool_calls",
            kind: "message",
            T: ba,
            repeated: !0
        }, {
            no: 2,
            name: "choice",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "reason",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new mE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new mE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new mE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(mE, e, t)
        }
    }
    class cE extends E {
        proposalTrajectoryIds = [];
        choice = 0;
        reason = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepTrajectoryChoice";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "proposal_trajectory_ids",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 2,
            name: "choice",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "reason",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new cE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new cE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new cE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(cE, e, t)
        }
    }
    class uE extends E {
        referenceTrajectoryId = "";
        referenceStepIndices = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepCreateRecipe";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "recipe",
            kind: "message",
            T: eE
        }, {
            no: 2,
            name: "reference_trajectory_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "reference_step_indices",
            kind: "scalar",
            T: 13,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new uE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new uE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new uE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(uE, e, t)
        }
    }
    class lE extends E {
        targetUrl = "";
        name = "";
        proxyUrl = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepProxyWebServer";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "target_url",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "name",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "proxy_url",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new lE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new lE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new lE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(lE, e, t)
        }
    }
    class _E extends E {
        status = qs.UNSPECIFIED;
        error = "";
        tools = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.McpServerState";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "spec",
            kind: "message",
            T: aE
        }, {
            no: 2,
            name: "status",
            kind: "enum",
            T: ye.getEnumType(qs)
        }, {
            no: 3,
            name: "error",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "tools",
            kind: "message",
            T: Di,
            repeated: !0
        }, {
            no: 5,
            name: "server_info",
            kind: "message",
            T: rE
        }]));
        static fromBinary(e, t) {
            return (new _E).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new _E).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new _E).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(_E, e, t)
        }
    }
    class EE extends (null) {
        maxStepsToJudge = 0;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "max_steps_to_judge",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new EE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new EE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new EE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(EE, e, t)
        }
    }
    class dE extends E {
        absolutePathUri = "";
        cciOffset = 0;
        ccis = [];
        outlineItems = [];
        numItemsScanned = 0;
        totalCciCount = 0;
        numLines = 0;
        numBytes = 0;
        contents = "";
        contentLinesTruncated = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.CortexStepViewFileOutline";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "absolute_path_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "cci_offset",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "ccis",
            kind: "message",
            T: Kn,
            repeated: !0
        }, {
            no: 9,
            name: "outline_items",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 10,
            name: "num_items_scanned",
            kind: "scalar",
            T: 13
        }, {
            no: 4,
            name: "total_cci_count",
            kind: "scalar",
            T: 13
        }, {
            no: 5,
            name: "num_lines",
            kind: "scalar",
            T: 13
        }, {
            no: 6,
            name: "num_bytes",
            kind: "scalar",
            T: 13
        }, {
            no: 7,
            name: "contents",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "content_lines_truncated",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new dE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new dE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new dE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(dE, e, t)
        }
    }
    class TE extends E {
        numSteps = 0;
        heuristicPrompts = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.EphemeralMessagesConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "enabled",
            kind: "scalar",
            T: 8,
            opt: !0
        }, {
            no: 2,
            name: "num_steps",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "heuristic_prompts",
            kind: "message",
            T: fE,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new TE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new TE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new TE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(TE, e, t)
        }
    }
    class fE extends E {
        heuristic = "";
        prompt = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.HeuristicPrompt";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "heuristic",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "prompt",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new fE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new fE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new fE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(fE, e, t)
        }
    }
    class pE extends E {
        revertedUris = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.cortex_pb.RevertMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 4,
            name: "reverted_uris",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new pE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new pE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new pE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(pE, e, t)
        }
    }
    class SE extends (null) {
        length = 0;
        tokens = 0;
        numSkipped = 0;
        numTruncated = 0;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "length",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "tokens",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "num_skipped",
            kind: "scalar",
            T: 13
        }, {
            no: 4,
            name: "num_truncated",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new SE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new SE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new SE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(SE, e, t)
        }
    }
    !function(e) {
        e[e.GITHUB_CI_CHECK_STATUS_UNSPECIFIED = 0] = "GITHUB_CI_CHECK_STATUS_UNSPECIFIED",
        e[e.GITHUB_CI_CHECK_STATUS_SUCCESS = 1] = "GITHUB_CI_CHECK_STATUS_SUCCESS",
        e[e.GITHUB_CI_CHECK_STATUS_FAILED = 2] = "GITHUB_CI_CHECK_STATUS_FAILED",
        e[e.GITHUB_CI_CHECK_STATUS_PENDING = 3] = "GITHUB_CI_CHECK_STATUS_PENDING"
    }(Gs || (Gs = {})),
    ye.util.setEnumType(Gs, "exa.auto_cascade_common_pb.GithubCICheckStatus", [{
        no: 0,
        name: "GITHUB_CI_CHECK_STATUS_UNSPECIFIED"
    }, {
        no: 1,
        name: "GITHUB_CI_CHECK_STATUS_SUCCESS"
    }, {
        no: 2,
        name: "GITHUB_CI_CHECK_STATUS_FAILED"
    }, {
        no: 3,
        name: "GITHUB_CI_CHECK_STATUS_PENDING"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.OPEN = 1] = "OPEN",
        e[e.CLOSED = 2] = "CLOSED",
        e[e.DRAFT = 3] = "DRAFT",
        e[e.MERGED = 4] = "MERGED"
    }(Hs || (Hs = {})),
    ye.util.setEnumType(Hs, "exa.auto_cascade_common_pb.GithubPullRequestBranchStatus", [{
        no: 0,
        name: "GITHUB_PULL_REQUEST_BRANCH_STATUS_UNSPECIFIED"
    }, {
        no: 1,
        name: "GITHUB_PULL_REQUEST_BRANCH_STATUS_OPEN"
    }, {
        no: 2,
        name: "GITHUB_PULL_REQUEST_BRANCH_STATUS_CLOSED"
    }, {
        no: 3,
        name: "GITHUB_PULL_REQUEST_BRANCH_STATUS_DRAFT"
    }, {
        no: 4,
        name: "GITHUB_PULL_REQUEST_BRANCH_STATUS_MERGED"
    }]);
    class NE extends E {
        repoName = "";
        branch = "";
        commit = "";
        prUrl = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.auto_cascade_common_pb.GitRepoInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "repo_name",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "branch",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "commit",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "pr_url",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new NE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new NE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new NE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(NE, e, t)
        }
    }
    class CE extends E {
        sessionId = "";
        explanation = "";
        sshUrl = "";
        status = gs.UNSPECIFIED;
        summary = "";
        sessionKey = "";
        gitRepos = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.auto_cascade_common_pb.SessionInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "session_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "explanation",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "ssh_url",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "status",
            kind: "enum",
            T: ye.getEnumType(gs)
        }, {
            no: 5,
            name: "summary",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "trajectory",
            kind: "message",
            T: vu
        }, {
            no: 7,
            name: "session_key",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "created_at",
            kind: "message",
            T: De
        }, {
            no: 9,
            name: "git_repos",
            kind: "message",
            T: NE,
            repeated: !0
        }, {
            no: 10,
            name: "updated_at",
            kind: "message",
            T: De
        }]));
        static fromBinary(e, t) {
            return (new CE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new CE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new CE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(CE, e, t)
        }
    }
    class IE extends E {
        url = "";
        owner = "";
        repo = "";
        title = "";
        number = "";
        ciStatus = Gs.GITHUB_CI_CHECK_STATUS_UNSPECIFIED;
        branchStatus = Hs.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.auto_cascade_common_pb.GithubPullRequestInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "url",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "owner",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "repo",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "title",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "number",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "ci_status",
            kind: "enum",
            T: ye.getEnumType(Gs)
        }, {
            no: 7,
            name: "branch_status",
            kind: "enum",
            T: ye.getEnumType(Hs)
        }, {
            no: 8,
            name: "updated_at",
            kind: "message",
            T: De
        }]));
        static fromBinary(e, t) {
            return (new IE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new IE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new IE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(IE, e, t)
        }
    }
    !function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.USER_APPLIED = 1] = "USER_APPLIED",
        e[e.USER_REJECTED = 2] = "USER_REJECTED"
    }(vs || (vs = {})),
    ye.util.setEnumType(vs, "exa.language_server_pb.ApplyActionType", [{
        no: 0,
        name: "APPLY_ACTION_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "APPLY_ACTION_TYPE_USER_APPLIED"
    }, {
        no: 2,
        name: "APPLY_ACTION_TYPE_USER_REJECTED"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.SAVE = 1] = "SAVE",
        e[e.SELECTION_CHANGED = 2] = "SELECTION_CHANGED",
        e[e.VISIBLE_RANGES_CHANGED = 3] = "VISIBLE_RANGES_CHANGED",
        e[e.ACTIVE_EDITOR_CHANGED = 4] = "ACTIVE_EDITOR_CHANGED"
    }(Vs || (Vs = {})),
    ye.util.setEnumType(Vs, "exa.language_server_pb.IdeAction", [{
        no: 0,
        name: "IDE_ACTION_UNSPECIFIED"
    }, {
        no: 1,
        name: "IDE_ACTION_SAVE"
    }, {
        no: 2,
        name: "IDE_ACTION_SELECTION_CHANGED"
    }, {
        no: 3,
        name: "IDE_ACTION_VISIBLE_RANGES_CHANGED"
    }, {
        no: 4,
        name: "IDE_ACTION_ACTIVE_EDITOR_CHANGED"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.INACTIVE = 1] = "INACTIVE",
        e[e.PROCESSING = 2] = "PROCESSING",
        e[e.SUCCESS = 3] = "SUCCESS",
        e[e.WARNING = 4] = "WARNING",
        e[e.ERROR = 5] = "ERROR"
    }(Ys || (Ys = {})),
    ye.util.setEnumType(Ys, "exa.language_server_pb.CodeiumState", [{
        no: 0,
        name: "CODEIUM_STATE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CODEIUM_STATE_INACTIVE"
    }, {
        no: 2,
        name: "CODEIUM_STATE_PROCESSING"
    }, {
        no: 3,
        name: "CODEIUM_STATE_SUCCESS"
    }, {
        no: 4,
        name: "CODEIUM_STATE_WARNING"
    }, {
        no: 5,
        name: "CODEIUM_STATE_ERROR"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.INLINE = 1] = "INLINE",
        e[e.BLOCK = 2] = "BLOCK",
        e[e.INLINE_MASK = 3] = "INLINE_MASK"
    }(Xs || (Xs = {})),
    ye.util.setEnumType(Xs, "exa.language_server_pb.CompletionPartType", [{
        no: 0,
        name: "COMPLETION_PART_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "COMPLETION_PART_TYPE_INLINE"
    }, {
        no: 2,
        name: "COMPLETION_PART_TYPE_BLOCK"
    }, {
        no: 3,
        name: "COMPLETION_PART_TYPE_INLINE_MASK"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.COMMIT_HISTORY = 1] = "COMMIT_HISTORY",
        e[e.CURRENT_PLAN = 2] = "CURRENT_PLAN"
    }(Ks || (Ks = {})),
    ye.util.setEnumType(Ks, "exa.language_server_pb.ContextSuggestionSource", [{
        no: 0,
        name: "CONTEXT_SUGGESTION_SOURCE_UNSPECIFIED"
    }, {
        no: 1,
        name: "CONTEXT_SUGGESTION_SOURCE_COMMIT_HISTORY"
    }, {
        no: 2,
        name: "CONTEXT_SUGGESTION_SOURCE_CURRENT_PLAN"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.INSERT = 1] = "INSERT",
        e[e.DELETE = 2] = "DELETE",
        e[e.UNCHANGED = 3] = "UNCHANGED"
    }(Ws || (Ws = {})),
    ye.util.setEnumType(Ws, "exa.language_server_pb.UnifiedDiffChangeType", [{
        no: 0,
        name: "UNIFIED_DIFF_CHANGE_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "UNIFIED_DIFF_CHANGE_TYPE_INSERT"
    }, {
        no: 2,
        name: "UNIFIED_DIFF_CHANGE_TYPE_DELETE"
    }, {
        no: 3,
        name: "UNIFIED_DIFF_CHANGE_TYPE_UNCHANGED"
    }]),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.LIGHT = 1] = "LIGHT",
        e[e.DARK = 2] = "DARK",
        e[e.HIGH_CONTRAST = 3] = "HIGH_CONTRAST",
        e[e.HIGH_CONTRAST_LIGHT = 4] = "HIGH_CONTRAST_LIGHT"
    }(zs || (zs = {})),
    ye.util.setEnumType(zs, "exa.language_server_pb.EditorThemeType", [{
        no: 0,
        name: "EDITOR_THEME_TYPE_UNSPECIFIED"
    }, {
        no: 1,
        name: "EDITOR_THEME_TYPE_LIGHT"
    }, {
        no: 2,
        name: "EDITOR_THEME_TYPE_DARK"
    }, {
        no: 3,
        name: "EDITOR_THEME_TYPE_HIGH_CONTRAST"
    }, {
        no: 4,
        name: "EDITOR_THEME_TYPE_HIGH_CONTRAST_LIGHT"
    }]);
    class gE extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetGithubPullRequestInfoRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }]));
        static fromBinary(e, t) {
            return (new gE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new gE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new gE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(gE, e, t)
        }
    }
    class OE extends E {
        pullRequestInfos = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetGithubPullRequestInfoResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "pull_request_infos",
            kind: "message",
            T: IE,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new OE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new OE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new OE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(OE, e, t)
        }
    }
    class AE extends E {
        githubToken = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.UpdateAutoCascadeGithubCredentialsRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "github_token",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new AE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new AE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new AE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(AE, e, t)
        }
    }
    class PE extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.UpdateAutoCascadeGithubCredentialsResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new PE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new PE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new PE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(PE, e, t)
        }
    }
    class LE extends E {
        items = [];
        images = [];
        sessionKey = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SendUserAutoCascadeMessageRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "items",
            kind: "message",
            T: Ya,
            repeated: !0
        }, {
            no: 3,
            name: "images",
            kind: "message",
            T: Nr,
            repeated: !0
        }, {
            no: 4,
            name: "session_key",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new LE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new LE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new LE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(LE, e, t)
        }
    }
    class RE extends E {
        sessionKey = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SendUserAutoCascadeMessageResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "session_key",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new RE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new RE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new RE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(RE, e, t)
        }
    }
    class yE extends E {
        sessionKey = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.DeleteAutoCascadeSessionRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "session_key",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new yE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new yE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new yE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(yE, e, t)
        }
    }
    class wE extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.DeleteAutoCascadeSessionResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new wE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new wE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new wE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(wE, e, t)
        }
    }
    class kE extends E {
        gitRepoInfos = [];
        workspaceUris = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.CheckoutAutoCascadeSessionBranchRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "git_repo_infos",
            kind: "message",
            T: NE,
            repeated: !0
        }, {
            no: 2,
            name: "workspace_uris",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new kE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new kE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new kE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(kE, e, t)
        }
    }
    class DE extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.CheckoutAutoCascadeSessionBranchResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new DE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new DE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new DE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(DE, e, t)
        }
    }
    class JE extends E {
        gitRepoInfos = [];
        workspaceUris = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.DiffAutoCascadeSessionBranchRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "git_repo_infos",
            kind: "message",
            T: NE,
            repeated: !0
        }, {
            no: 2,
            name: "workspace_uris",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new JE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new JE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new JE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(JE, e, t)
        }
    }
    class ME extends E {
        validationStates = [];
        canMerge = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.DiffAutoCascadeSessionBranchResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "validation_states",
            kind: "message",
            T: Op,
            repeated: !0
        }, {
            no: 2,
            name: "can_merge",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new ME).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ME).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ME).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ME, e, t)
        }
    }
    class UE extends E {
        gitRepoInfos = [];
        workspaceUris = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.MergeAutoCascadeSessionBranchRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "git_repo_infos",
            kind: "message",
            T: NE,
            repeated: !0
        }, {
            no: 2,
            name: "workspace_uris",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new UE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new UE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new UE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(UE, e, t)
        }
    }
    class xE extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.MergeAutoCascadeSessionBranchResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new xE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new xE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new xE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(xE, e, t)
        }
    }
    class BE extends E {
        planId = "";
        summary = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SubmitCodingPlanSummaryRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "plan_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "summary",
            kind: "message",
            T: lu,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new BE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new BE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new BE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(BE, e, t)
        }
    }
    class hE extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SubmitCodingPlanSummaryResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new hE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new hE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new hE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(hE, e, t)
        }
    }
    class FE extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetAllCortexPlansRequest";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new FE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new FE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new FE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(FE, e, t)
        }
    }
    class bE extends E {
        plans = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetAllCortexPlansResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "plans",
            kind: "message",
            T: bu,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new bE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new bE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new bE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(bE, e, t)
        }
    }
    class qE extends E {
        cortexId = "";
        feedback = "";
        rating = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RecordCortexFeedbackRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "cortex_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "feedback",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "rating",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new qE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new qE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new qE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(qE, e, t)
        }
    }
    class GE extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RecordCortexFeedbackResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new GE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new GE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new GE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(GE, e, t)
        }
    }
    class HE extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.NewCortexPlanRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "input",
            kind: "message",
            T: Cu
        }, {
            no: 3,
            name: "config",
            kind: "message",
            T: hu
        }, {
            no: 4,
            name: "experiment_config",
            kind: "message",
            T: jt
        }]));
        static fromBinary(e, t) {
            return (new HE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new HE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new HE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(HE, e, t)
        }
    }
    class vE extends E {
        cortexId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.NewCortexPlanResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cortex_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new vE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new vE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new vE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(vE, e, t)
        }
    }
    class VE extends E {
        cortexId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetCortexPlanRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cortex_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new VE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new VE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new VE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(VE, e, t)
        }
    }
    class YE extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetCortexPlanResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "state",
            kind: "message",
            T: Nu
        }]));
        static fromBinary(e, t) {
            return (new YE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new YE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new YE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(YE, e, t)
        }
    }
    class XE extends E {
        planId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.CommitCodingPlanRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 2,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 1,
            name: "plan_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new XE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new XE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new XE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(XE, e, t)
        }
    }
    class KE extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.CommitCodingPlanResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new KE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new KE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new KE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(KE, e, t)
        }
    }
    class WE extends E {
        planId = "";
        feedback = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ReplanCodingPlanRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "plan_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "feedback",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new WE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new WE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new WE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(WE, e, t)
        }
    }
    class zE extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ReplanCodingPlanResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new zE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new zE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new zE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(zE, e, t)
        }
    }
    class jE extends E {
        planId = "";
        actionIndex = 0;
        completionId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.PrepareActionRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "plan_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "action_index",
            kind: "scalar",
            T: 13
        }, {
            no: 6,
            name: "completion_id",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "experiment_config",
            kind: "message",
            T: jt
        }]));
        static fromBinary(e, t) {
            return (new jE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new jE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new jE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(jE, e, t)
        }
    }
    class QE extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.PrepareActionResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new QE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new QE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new QE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(QE, e, t)
        }
    }
    class $E extends E {
        planId = "";
        actionIndex = 0;
        completionId = "";
        applyActionType = vs.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ApplyActionRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "plan_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "action_index",
            kind: "scalar",
            T: 13
        }, {
            no: 7,
            name: "completion_id",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "apply_action_type",
            kind: "enum",
            T: ye.getEnumType(vs)
        }, {
            no: 5,
            name: "experiment_config",
            kind: "message",
            T: jt
        }]));
        static fromBinary(e, t) {
            return (new $E).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new $E).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new $E).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals($E, e, t)
        }
    }
    class ZE extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ApplyActionResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "spec",
            kind: "message",
            T: Iu
        }]));
        static fromBinary(e, t) {
            return (new ZE).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ZE).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ZE).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ZE, e, t)
        }
    }
    class ed extends E {
        planId = "";
        actionIndex = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.EditActionRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "plan_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "action_index",
            kind: "scalar",
            T: 13
        }, {
            no: 4,
            name: "spec",
            kind: "message",
            T: Iu
        }, {
            no: 6,
            name: "experiment_config",
            kind: "message",
            T: jt
        }]));
        static fromBinary(e, t) {
            return (new ed).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ed).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ed).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ed, e, t)
        }
    }
    class td extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.EditActionResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new td).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new td).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new td).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(td, e, t)
        }
    }
    class nd extends E {
        requestedModelId = be.MODEL_UNSPECIFIED;
        selectionStartLine = A.zero;
        selectionEndLine = A.zero;
        commandText = "";
        requestSource = yt.UNSPECIFIED;
        parentCompletionId = "";
        diffType = jr.UNSPECIFIED;
        diagnostics = [];
        supercompleteTriggerCondition = Mt.UNSPECIFIED;
        ignoreSupercompleteDebounce = !1;
        clipboardEntry = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.HandleStreamingCommandRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "document",
            kind: "message",
            T: va
        }, {
            no: 3,
            name: "editor_options",
            kind: "message",
            T: Rn
        }, {
            no: 4,
            name: "requested_model_id",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 6,
            name: "selection_start_line",
            kind: "scalar",
            T: 4
        }, {
            no: 7,
            name: "selection_end_line",
            kind: "scalar",
            T: 4
        }, {
            no: 8,
            name: "command_text",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "request_source",
            kind: "enum",
            T: ye.getEnumType(yt)
        }, {
            no: 10,
            name: "mentioned_scope",
            kind: "message",
            T: wa
        }, {
            no: 11,
            name: "action_pointer",
            kind: "message",
            T: Kt
        }, {
            no: 12,
            name: "parent_completion_id",
            kind: "scalar",
            T: 9
        }, {
            no: 13,
            name: "diff_type",
            kind: "enum",
            T: ye.getEnumType(jr)
        }, {
            no: 14,
            name: "diagnostics",
            kind: "message",
            T: or,
            repeated: !0
        }, {
            no: 15,
            name: "supercomplete_trigger_condition",
            kind: "enum",
            T: ye.getEnumType(Mt)
        }, {
            no: 16,
            name: "terminal_command_data",
            kind: "message",
            T: Rr
        }, {
            no: 5,
            name: "experiment_config",
            kind: "message",
            T: jt
        }, {
            no: 17,
            name: "ignore_supercomplete_debounce",
            kind: "scalar",
            T: 8
        }, {
            no: 18,
            name: "clipboard_entry",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new nd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new nd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new nd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(nd, e, t)
        }
    }
    class ad extends E {
        completionId = "";
        promptId = "";
        selectionStartLine = A.zero;
        selectionEndLine = A.zero;
        score = 0;
        stopReason = Ge.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.HandleStreamingCommandResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "completion_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "prompt_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "diff",
            kind: "message",
            T: js
        }, {
            no: 4,
            name: "latency_info",
            kind: "message",
            T: xT
        }, {
            no: 5,
            name: "selection_start_line",
            kind: "scalar",
            T: 4
        }, {
            no: 6,
            name: "selection_end_line",
            kind: "scalar",
            T: 4
        }, {
            no: 7,
            name: "score",
            kind: "scalar",
            T: 1
        }, {
            no: 8,
            name: "character_diff",
            kind: "message",
            T: ei
        }, {
            no: 9,
            name: "combo_diff",
            kind: "message",
            T: ni
        }, {
            no: 10,
            name: "filter_reason",
            kind: "message",
            T: ir
        }, {
            no: 14,
            name: "jump_position",
            kind: "message",
            T: Ga,
            opt: !0
        }, {
            no: 12,
            name: "request_info",
            kind: "message",
            T: UT
        }, {
            no: 13,
            name: "stop_reason",
            kind: "enum",
            T: ye.getEnumType(Ge)
        }, {
            no: 11,
            name: "closest_changed_line",
            kind: "scalar",
            T: 4,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new ad).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ad).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ad).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ad, e, t)
        }
    }
    class rd extends E {
        threshold = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.MultilineConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "threshold",
            kind: "scalar",
            T: 2
        }]));
        static fromBinary(e, t) {
            return (new rd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new rd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new rd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(rd, e, t)
        }
    }
    class sd extends E {
        otherDocuments = [];
        disableCache = !1;
        oracleItems = [];
        modelName = "";
        requestedModelId = be.MODEL_UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetCompletionsRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "document",
            kind: "message",
            T: va
        }, {
            no: 3,
            name: "editor_options",
            kind: "message",
            T: Rn
        }, {
            no: 5,
            name: "other_documents",
            kind: "message",
            T: va,
            repeated: !0
        }, {
            no: 6,
            name: "mock_response_data",
            kind: "message",
            T: Mn
        }, {
            no: 8,
            name: "disable_cache",
            kind: "scalar",
            T: 8
        }, {
            no: 9,
            name: "oracle_items",
            kind: "message",
            T: Kn,
            repeated: !0
        }, {
            no: 10,
            name: "model_name",
            kind: "scalar",
            T: 9
        }, {
            no: 12,
            name: "requested_model_id",
            kind: "enum",
            T: ye.getEnumType(be)
        }, {
            no: 13,
            name: "multiline_config",
            kind: "message",
            T: rd
        }, {
            no: 7,
            name: "experiment_config",
            kind: "message",
            T: jt
        }]));
        static fromBinary(e, t) {
            return (new sd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new sd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new sd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(sd, e, t)
        }
    }
    class id extends E {
        completionItems = [];
        filteredCompletionItems = [];
        modelTag = "";
        promptId = "";
        codeRanges = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetCompletionsResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "state",
            kind: "message",
            T: MT
        }, {
            no: 2,
            name: "completion_items",
            kind: "message",
            T: FT,
            repeated: !0
        }, {
            no: 7,
            name: "filtered_completion_items",
            kind: "message",
            T: FT,
            repeated: !0
        }, {
            no: 3,
            name: "request_info",
            kind: "message",
            T: UT
        }, {
            no: 4,
            name: "latency_info",
            kind: "message",
            T: xT
        }, {
            no: 5,
            name: "model_tag",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "prompt_id",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "code_ranges",
            kind: "message",
            T: Tf,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new id).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new id).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new id).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(id, e, t)
        }
    }
    class od extends E {
        completionId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.AcceptCompletionRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "completion_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new od).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new od).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new od).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(od, e, t)
        }
    }
    class md extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.AcceptCompletionResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new md).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new md).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new md).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(md, e, t)
        }
    }
    class cd extends E {
        isAccepted = !1;
        feedbackDelayMs = A.zero;
        completionId = "";
        promptId = "";
        source = Me.UNSPECIFIED;
        viewColumnsOpen = A.zero;
        isIntentionalReject = !1;
        isPartial = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ProvideCompletionFeedbackRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "is_accepted",
            kind: "scalar",
            T: 8
        }, {
            no: 3,
            name: "feedback_delay_ms",
            kind: "scalar",
            T: 3
        }, {
            no: 4,
            name: "completion_id",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "prompt_id",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "latency_info",
            kind: "message",
            T: xT
        }, {
            no: 7,
            name: "source",
            kind: "enum",
            T: ye.getEnumType(Me)
        }, {
            no: 8,
            name: "document",
            kind: "message",
            T: va
        }, {
            no: 10,
            name: "view_columns_open",
            kind: "scalar",
            T: 4
        }, {
            no: 11,
            name: "is_intentional_reject",
            kind: "scalar",
            T: 8
        }, {
            no: 12,
            name: "is_partial",
            kind: "scalar",
            T: 8
        }, {
            no: 9,
            name: "experiment_config",
            kind: "message",
            T: jt
        }]));
        static fromBinary(e, t) {
            return (new cd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new cd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new cd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(cd, e, t)
        }
    }
    class ud extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ProvideCompletionFeedbackResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new ud).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ud).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ud).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ud, e, t)
        }
    }
    class ld extends E {
        previousErrorTraces = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.HeartbeatRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "previous_error_traces",
            kind: "message",
            T: yn,
            repeated: !0
        }, {
            no: 3,
            name: "experiment_config",
            kind: "message",
            T: jt
        }]));
        static fromBinary(e, t) {
            return (new ld).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ld).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ld).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ld, e, t)
        }
    }
    class _d extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.HeartbeatResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "last_extension_heartbeat",
            kind: "message",
            T: De
        }]));
        static fromBinary(e, t) {
            return (new _d).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new _d).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new _d).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(_d, e, t)
        }
    }
    class Ed extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetStatusRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }]));
        static fromBinary(e, t) {
            return (new Ed).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ed).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ed).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ed, e, t)
        }
    }
    class dd extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetStatusResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "status",
            kind: "message",
            T: qa
        }]));
        static fromBinary(e, t) {
            return (new dd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new dd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new dd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(dd, e, t)
        }
    }
    class Td extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetCascadeModelConfigsRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "filter",
            kind: "scalar",
            T: 8,
            opt: !0
        }]));
        static fromBinary(e, t) {
            return (new Td).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Td).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Td).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Td, e, t)
        }
    }
    class fd extends E {
        clientModelConfigs = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetCascadeModelConfigsResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "client_model_configs",
            kind: "message",
            T: bn,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new fd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new fd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new fd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(fd, e, t)
        }
    }
    class pd extends (null) {
        teamId = "";
        cascadeModelLabels = [];
        commandModelLabels = [];
        extensionModelLabels = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "team_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "cascade_model_labels",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 3,
            name: "command_model_labels",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 4,
            name: "created_at",
            kind: "message",
            T: De
        }, {
            no: 5,
            name: "updated_at",
            kind: "message",
            T: De
        }, {
            no: 6,
            name: "extension_model_labels",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new pd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new pd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new pd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(pd, e, t)
        }
    }
    class Sd extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetTeamOrganizationalControlsRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }]));
        static fromBinary(e, t) {
            return (new Sd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Sd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Sd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Sd, e, t)
        }
    }
    class Nd extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetTeamOrganizationalControlsResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "controls",
            kind: "message",
            T: nn
        }]));
        static fromBinary(e, t) {
            return (new Nd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Nd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Nd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Nd, e, t)
        }
    }
    class Cd extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetMcpServerTemplatesRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }]));
        static fromBinary(e, t) {
            return (new Cd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Cd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Cd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Cd, e, t)
        }
    }
    class Id extends E {
        templates = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetMcpServerTemplatesResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "templates",
            kind: "message",
            T: Jr,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Id).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Id).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Id).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Id, e, t)
        }
    }
    class gd extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetCommandModelConfigsRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }]));
        static fromBinary(e, t) {
            return (new gd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new gd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new gd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(gd, e, t)
        }
    }
    class Od extends E {
        clientModelConfigs = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetCommandModelConfigsResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "client_model_configs",
            kind: "message",
            T: bn,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Od).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Od).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Od).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Od, e, t)
        }
    }
    class Ad extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetProcessesRequest";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Ad).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ad).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ad).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ad, e, t)
        }
    }
    class Pd extends E {
        models = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetExternalModelResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "models",
            kind: "message",
            T: la,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Pd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Pd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Pd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Pd, e, t)
        }
    }
    class Ld extends E {
        apiKey = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetExternalModelRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "api_key",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Ld).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ld).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ld).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ld, e, t)
        }
    }
    class Rd extends E {
        lspPort = 0;
        chatWebServerPort = 0;
        chatClientPort = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetProcessesResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "lsp_port",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "chat_web_server_port",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "chat_client_port",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new Rd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Rd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Rd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Rd, e, t)
        }
    }
    class yd extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetAuthTokenRequest";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new yd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new yd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new yd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(yd, e, t)
        }
    }
    class wd extends E {
        authToken = "";
        uuid = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetAuthTokenResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "auth_token",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "uuid",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new wd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new wd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new wd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(wd, e, t)
        }
    }
    class kd extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RecordEventRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "event",
            kind: "message",
            T: wn
        }]));
        static fromBinary(e, t) {
            return (new kd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new kd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new kd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(kd, e, t)
        }
    }
    class Dd extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RecordEventResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Dd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Dd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Dd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Dd, e, t)
        }
    }
    class Jd extends E {
        requestId = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.CancelRequestRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "request_id",
            kind: "scalar",
            T: 4
        }]));
        static fromBinary(e, t) {
            return (new Jd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Jd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Jd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Jd, e, t)
        }
    }
    class Md extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.CancelRequestResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Md).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Md).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Md).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Md, e, t)
        }
    }
    class Ud extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.EditConfigurationRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "completion_configuration",
            kind: "message",
            T: Yt
        }]));
        static fromBinary(e, t) {
            return (new Ud).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ud).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ud).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ud, e, t)
        }
    }
    class xd extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.EditConfigurationResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "completion_configuration",
            kind: "message",
            T: Yt
        }]));
        static fromBinary(e, t) {
            return (new xd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new xd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new xd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(xd, e, t)
        }
    }
    class Bd extends E {
        projectName = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ValidateWindsurfJSAppProjectNameRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "project_name",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Bd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Bd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Bd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Bd, e, t)
        }
    }
    class hd extends E {
        status = Gt.UNSPECIFIED;
        alternativeNames = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ValidateWindsurfJSAppProjectNameResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "status",
            kind: "enum",
            T: ye.getEnumType(Gt)
        }, {
            no: 2,
            name: "alternative_names",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new hd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new hd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new hd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(hd, e, t)
        }
    }
    class Fd extends E {
        workspaceUri = "";
        projectName = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SaveWindsurfJSAppProjectNameRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "workspace_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "project_name",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Fd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Fd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Fd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Fd, e, t)
        }
    }
    class bd extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SaveWindsurfJSAppProjectNameResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "deployment_config",
            kind: "message",
            T: Dr
        }]));
        static fromBinary(e, t) {
            return (new bd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new bd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new bd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(bd, e, t)
        }
    }
    class qd extends E {
        firebaseIdToken = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RegisterUserRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "firebase_id_token",
            jsonName: "firebase_id_token",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new qd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new qd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new qd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(qd, e, t)
        }
    }
    class Gd extends E {
        apiKey = "";
        name = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RegisterUserResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "api_key",
            jsonName: "api_key",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "name",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Gd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Gd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Gd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Gd, e, t)
        }
    }
    class Hd extends E {
        query = "";
        numResults = 0;
        numClusters = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ClusteredSearchRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 4,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 1,
            name: "query",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "num_results",
            kind: "scalar",
            T: 13
        }, {
            no: 3,
            name: "num_clusters",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new Hd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Hd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Hd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Hd, e, t)
        }
    }
    class vd extends E {
        clusters = [];
        searchId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ClusteredSearchResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "clusters",
            kind: "message",
            T: qT,
            repeated: !0
        }, {
            no: 2,
            name: "search_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new vd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new vd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new vd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(vd, e, t)
        }
    }
    class Vd extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.WellSupportedLanguagesRequest";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Vd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Vd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Vd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Vd, e, t)
        }
    }
    class Yd extends E {
        languages = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.WellSupportedLanguagesResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "languages",
            kind: "enum",
            T: ye.getEnumType(Ze),
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Yd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Yd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Yd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Yd, e, t)
        }
    }
    class Xd extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ProgressBarsRequest";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Xd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Xd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Xd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Xd, e, t)
        }
    }
    class Kd extends E {
        progressBars = {};
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ProgressBarsResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "progress_bars",
            kind: "map",
            K: 9,
            V: {
                kind: "message",
                T: GT
            }
        }]));
        static fromBinary(e, t) {
            return (new Kd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Kd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Kd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Kd, e, t)
        }
    }
    class Wd extends E {
        resultId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RecordSearchDocOpenRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "result_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Wd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Wd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Wd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Wd, e, t)
        }
    }
    class zd extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RecordSearchDocOpenResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new zd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new zd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new zd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(zd, e, t)
        }
    }
    class jd extends E {
        clusterSearchId = "";
        exactSearchId = "";
        searchResultIds = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RecordSearchResultsViewRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "cluster_search_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "exact_search_id",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "search_result_ids",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new jd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new jd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new jd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(jd, e, t)
        }
    }
    class Qd extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RecordSearchResultsViewResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Qd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Qd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Qd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Qd, e, t)
        }
    }
    class $d extends (null) {
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new $d).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new $d).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new $d).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals($d, e, t)
        }
    }
    class Zd extends (null) {
        activeWorkspaces = [];
        ignoredWorkspaces = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "active_workspaces",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 2,
            name: "ignored_workspaces",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Zd).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Zd).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Zd).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Zd, e, t)
        }
    }
    class eT extends E {
        openDocumentFilepathsMigrateMeToUri = [];
        openDocumentUris = [];
        otherDocuments = [];
        workspacePathsMigrateMeToUri = [];
        workspaceUris = [];
        blocking = !1;
        ideAction = Vs.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RefreshContextForIdeActionRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 8,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 1,
            name: "active_document",
            kind: "message",
            T: va
        }, {
            no: 2,
            name: "open_document_filepaths_migrate_me_to_uri",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 6,
            name: "open_document_uris",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 5,
            name: "other_documents",
            kind: "message",
            T: va,
            repeated: !0
        }, {
            no: 3,
            name: "workspace_paths_migrate_me_to_uri",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 7,
            name: "workspace_uris",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 4,
            name: "blocking",
            kind: "scalar",
            T: 8
        }, {
            no: 9,
            name: "experiment_config",
            kind: "message",
            T: jt
        }, {
            no: 10,
            name: "ide_action",
            kind: "enum",
            T: ye.getEnumType(Vs)
        }]));
        static fromBinary(e, t) {
            return (new eT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new eT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new eT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(eT, e, t)
        }
    }
    class tT extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RefreshContextForIdeActionResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new tT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new tT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new tT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(tT, e, t)
        }
    }
    class nT extends E {
        query = "";
        fuzzyMatch = !1;
        allowedTypes = [];
        maxItems = 0;
        caseInsensitive = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetMatchingCodeContextRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "query",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "fuzzy_match",
            kind: "scalar",
            T: 8
        }, {
            no: 3,
            name: "allowed_types",
            kind: "enum",
            T: ye.getEnumType(mt),
            repeated: !0
        }, {
            no: 4,
            name: "max_items",
            kind: "scalar",
            T: 5
        }, {
            no: 5,
            name: "case_insensitive",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new nT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new nT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new nT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(nT, e, t)
        }
    }
    class aT extends E {
        matchedItems = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetMatchingCodeContextResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "matched_items",
            kind: "message",
            T: Kn,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new aT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new aT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new aT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(aT, e, t)
        }
    }
    class rT extends E {
        query = "";
        fuzzyMatch = !1;
        maxItems = 0;
        caseInsensitive = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetMatchingIndexedReposRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "query",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "fuzzy_match",
            kind: "scalar",
            T: 8
        }, {
            no: 4,
            name: "max_items",
            kind: "scalar",
            T: 5
        }, {
            no: 5,
            name: "case_insensitive",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new rT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new rT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new rT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(rT, e, t)
        }
    }
    class sT extends E {
        matchedRepositories = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetMatchingIndexedReposResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "matched_repositories",
            kind: "message",
            T: Xn,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new sT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new sT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new sT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(sT, e, t)
        }
    }
    class iT extends E {
        numTokensInIntent = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetChatMessageResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "chat_message",
            kind: "message",
            T: Ri
        }, {
            no: 2,
            name: "num_tokens_in_intent",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new iT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new iT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new iT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(iT, e, t)
        }
    }
    class oT extends E {
        chatMessage = "";
        requestedModelId = be.MODEL_UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetMessageTokenCountRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "chat_message",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "requested_model_id",
            kind: "enum",
            T: ye.getEnumType(be)
        }]));
        static fromBinary(e, t) {
            return (new oT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new oT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new oT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(oT, e, t)
        }
    }
    class mT extends E {
        tokenCount = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetMessageTokenCountResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "token_count",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new mT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new mT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new mT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(mT, e, t)
        }
    }
    class cT extends E {
        messageId = "";
        feedback = Qr.FEEDBACK_TYPE_UNSPECIFIED;
        reason = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RecordChatFeedbackRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "message_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "feedback",
            kind: "enum",
            T: ye.getEnumType(Qr)
        }, {
            no: 4,
            name: "reason",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "timestamp",
            kind: "message",
            T: De
        }]));
        static fromBinary(e, t) {
            return (new cT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new cT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new cT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(cT, e, t)
        }
    }
    class uT extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RecordChatFeedbackResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new uT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new uT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new uT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(uT, e, t)
        }
    }
    class lT extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RecordChatPanelSessionRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "start_timestamp",
            kind: "message",
            T: De
        }, {
            no: 3,
            name: "end_timestamp",
            kind: "message",
            T: De
        }]));
        static fromBinary(e, t) {
            return (new lT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new lT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new lT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(lT, e, t)
        }
    }
    class _T extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RecordChatPanelSessionResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new _T).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new _T).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new _T).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(_T, e, t)
        }
    }
    class ET extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetChatExperimentsRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }]));
        static fromBinary(e, t) {
            return (new ET).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ET).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ET).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ET, e, t)
        }
    }
    class dT extends E {
        experiments = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetChatExperimentsResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "experiments",
            kind: "message",
            T: hi,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new dT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new dT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new dT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(dT, e, t)
        }
    }
    class TT extends E {
        timeZone = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetUserAnalyticsSummaryRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "time_zone",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "start_timestamp",
            kind: "message",
            T: De
        }, {
            no: 4,
            name: "end_timestamp",
            kind: "message",
            T: De
        }]));
        static fromBinary(e, t) {
            return (new TT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new TT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new TT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(TT, e, t)
        }
    }
    class fT extends E {
        completionsByDay = [];
        completionsByLanguage = [];
        chatsByModel = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetUserAnalyticsSummaryResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "completion_statistics",
            kind: "message",
            T: $n
        }, {
            no: 2,
            name: "completions_by_day",
            kind: "message",
            T: Zn,
            repeated: !0
        }, {
            no: 3,
            name: "completions_by_language",
            kind: "message",
            T: ea,
            repeated: !0
        }, {
            no: 4,
            name: "chats_by_model",
            kind: "message",
            T: aa,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new fT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new fT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new fT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(fT, e, t)
        }
    }
    class pT extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetUserStatusRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }]));
        static fromBinary(e, t) {
            return (new pT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new pT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new pT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(pT, e, t)
        }
    }
    class ST extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetUserStatusResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "user_status",
            kind: "message",
            T: vn
        }, {
            no: 2,
            name: "plan_info",
            kind: "message",
            T: Gn
        }]));
        static fromBinary(e, t) {
            return (new ST).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ST).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ST).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ST, e, t)
        }
    }
    class NT extends E {
        apiKey = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetProfileDataRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "api_key",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new NT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new NT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new NT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(NT, e, t)
        }
    }
    class CT extends E {
        profilePictureUrl = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetProfileDataResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "profile_picture_url",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new CT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new CT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new CT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(CT, e, t)
        }
    }
    class IT extends E {
        promptId = "";
        code = "";
        timeoutSec = A.zero;
        completionText = "";
        providerSource = Me.UNSPECIFIED;
        completionId = "";
        diagnosticSeverity = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.CaptureCodeRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "prompt_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "code",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "timeout_sec",
            kind: "scalar",
            T: 4
        }, {
            no: 5,
            name: "completion_text",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "provider_source",
            kind: "enum",
            T: ye.getEnumType(Me)
        }, {
            no: 7,
            name: "completion_id",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "diagnostic_severity",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new IT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new IT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new IT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(IT, e, t)
        }
    }
    class gT extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.CaptureCodeResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new gT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new gT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new gT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(gT, e, t)
        }
    }
    class OT extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.CaptureFileRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "data",
            kind: "message",
            T: Qn
        }, {
            no: 2,
            name: "experiment_config",
            kind: "message",
            T: jt
        }]));
        static fromBinary(e, t) {
            return (new OT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new OT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new OT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(OT, e, t)
        }
    }
    class AT extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.CaptureFileResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new AT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new AT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new AT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(AT, e, t)
        }
    }
    class PT extends E {
        version = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetChangelogRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "version",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new PT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new PT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new PT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(PT, e, t)
        }
    }
    class LT extends E {
        path = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetChangelogResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "path",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new LT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new LT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new LT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(LT, e, t)
        }
    }
    class RT extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetFunctionsRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "document",
            kind: "message",
            T: va
        }]));
        static fromBinary(e, t) {
            return (new RT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new RT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new RT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(RT, e, t)
        }
    }
    class yT extends E {
        functionCaptures = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetFunctionsResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "function_captures",
            kind: "message",
            T: hn,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new yT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new yT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new yT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(yT, e, t)
        }
    }
    class wT extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetClassInfosRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "document",
            kind: "message",
            T: va
        }]));
        static fromBinary(e, t) {
            return (new wT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new wT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new wT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(wT, e, t)
        }
    }
    class kT extends E {
        classCaptures = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetClassInfosResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "class_captures",
            kind: "message",
            T: Fn,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new kT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new kT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new kT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(kT, e, t)
        }
    }
    class DT extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ExitRequest";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new DT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new DT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new DT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(DT, e, t)
        }
    }
    class JT extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ExitResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new JT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new JT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new JT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(JT, e, t)
        }
    }
    class MT extends E {
        state = Ys.UNSPECIFIED;
        message = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.State";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "state",
            kind: "enum",
            T: ye.getEnumType(Ys)
        }, {
            no: 2,
            name: "message",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new MT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new MT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new MT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(MT, e, t)
        }
    }
    class UT extends E {
        promptId = "";
        typingAsSuggestedPromptSuffix = "";
        completionType = $e.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RequestInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "prompt_id",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "completions_request",
            kind: "message",
            T: Vt
        }, {
            no: 5,
            name: "typing_as_suggested_prompt_suffix",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "completion_type",
            kind: "enum",
            T: ye.getEnumType($e)
        }]));
        static fromBinary(e, t) {
            return (new UT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new UT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new UT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(UT, e, t)
        }
    }
    class xT extends E {
        clientLatencyMs = A.zero;
        promptLatencyMs = A.zero;
        promptStageLatencies = [];
        debounceLatencyMs = A.zero;
        rpcLatencyMs = A.zero;
        networkLatencyMs = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.LatencyInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "client_latency_ms",
            kind: "scalar",
            T: 4
        }, {
            no: 2,
            name: "prompt_latency_ms",
            kind: "scalar",
            T: 4
        }, {
            no: 3,
            name: "prompt_stage_latencies",
            kind: "message",
            T: mn,
            repeated: !0
        }, {
            no: 4,
            name: "debounce_latency_ms",
            kind: "scalar",
            T: 4
        }, {
            no: 5,
            name: "rpc_latency_ms",
            kind: "scalar",
            T: 4
        }, {
            no: 6,
            name: "network_latency_ms",
            kind: "scalar",
            T: 4
        }]));
        static fromBinary(e, t) {
            return (new xT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new xT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new xT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(xT, e, t)
        }
    }
    class BT extends E {
        text = "";
        deltaCursorOffset = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.Suffix";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "text",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "delta_cursor_offset",
            kind: "scalar",
            T: 3
        }]));
        static fromBinary(e, t) {
            return (new BT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new BT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new BT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(BT, e, t)
        }
    }
    class hT extends E {
        text = "";
        offset = A.zero;
        type = Xs.UNSPECIFIED;
        prefix = "";
        line = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.CompletionPart";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "text",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "offset",
            kind: "scalar",
            T: 4
        }, {
            no: 3,
            name: "type",
            kind: "enum",
            T: ye.getEnumType(Xs)
        }, {
            no: 4,
            name: "prefix",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "line",
            kind: "scalar",
            T: 4
        }]));
        static fromBinary(e, t) {
            return (new hT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new hT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new hT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(hT, e, t)
        }
    }
    class FT extends E {
        source = Qe.UNSPECIFIED;
        completionParts = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.CompletionItem";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "completion",
            kind: "message",
            T: un
        }, {
            no: 5,
            name: "suffix",
            kind: "message",
            T: BT
        }, {
            no: 2,
            name: "range",
            kind: "message",
            T: Ha
        }, {
            no: 3,
            name: "source",
            kind: "enum",
            T: ye.getEnumType(Qe)
        }, {
            no: 8,
            name: "completion_parts",
            kind: "message",
            T: hT,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new FT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new FT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new FT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(FT, e, t)
        }
    }
    class bT extends E {
        embeddingId = A.zero;
        absolutePathMigrateMeToUri = "";
        absoluteUri = "";
        workspacePaths = [];
        similarityScore = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SearchResult";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "embedding_id",
            kind: "scalar",
            T: 3
        }, {
            no: 2,
            name: "absolute_path_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "absolute_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "workspace_paths",
            kind: "message",
            T: Dn,
            repeated: !0
        }, {
            no: 4,
            name: "embedding_metadata",
            kind: "message",
            T: Jn
        }, {
            no: 5,
            name: "similarity_score",
            kind: "scalar",
            T: 2
        }, {
            no: 6,
            name: "code_context_item",
            kind: "message",
            T: Kn
        }]));
        static fromBinary(e, t) {
            return (new bT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new bT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new bT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(bT, e, t)
        }
    }
    class qT extends E {
        searchResults = [];
        representativePath = "";
        description = "";
        meanSimilarityScore = 0;
        searchId = "";
        resultId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SearchResultCluster";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "search_results",
            kind: "message",
            T: bT,
            repeated: !0
        }, {
            no: 2,
            name: "representative_path",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "description",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "mean_similarity_score",
            kind: "scalar",
            T: 2
        }, {
            no: 5,
            name: "search_id",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "result_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new qT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new qT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new qT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(qT, e, t)
        }
    }
    class GT extends E {
        progress = 0;
        text = "";
        hidden = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ProgressBar";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "progress",
            kind: "scalar",
            T: 2
        }, {
            no: 2,
            name: "text",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "hidden",
            kind: "scalar",
            T: 8
        }, {
            no: 4,
            name: "remaining_time",
            kind: "message",
            T: Je
        }]));
        static fromBinary(e, t) {
            return (new GT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new GT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new GT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(GT, e, t)
        }
    }
    class HT extends (null) {
        pattern = "";
        isMultiline = !1;
        isRegExp = !1;
        isCaseSensitive = !1;
        isWordMatch = !1;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "pattern",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "is_multiline",
            kind: "scalar",
            T: 8
        }, {
            no: 3,
            name: "is_reg_exp",
            kind: "scalar",
            T: 8
        }, {
            no: 4,
            name: "is_case_sensitive",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "is_word_match",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new HT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new HT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new HT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(HT, e, t)
        }
    }
    class vT extends (null) {
        folder = "";
        includes = [];
        excludes = [];
        disregardIgnoreFiles = !1;
        followSymlinks = !1;
        disregardGlobalIgnoreFiles = !1;
        disregardParentIgnoreFiles = !1;
        maxFileSize = 0;
        encoding = "";
        beforeContextLines = 0;
        afterContextLines = 0;
        maxResults = 0;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "folder",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "includes",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 3,
            name: "excludes",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 4,
            name: "disregard_ignore_files",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "follow_symlinks",
            kind: "scalar",
            T: 8
        }, {
            no: 6,
            name: "disregard_global_ignore_files",
            kind: "scalar",
            T: 8
        }, {
            no: 7,
            name: "disregard_parent_ignore_files",
            kind: "scalar",
            T: 8
        }, {
            no: 8,
            name: "max_file_size",
            kind: "scalar",
            T: 13
        }, {
            no: 9,
            name: "encoding",
            kind: "scalar",
            T: 9
        }, {
            no: 10,
            name: "before_context_lines",
            kind: "scalar",
            T: 13
        }, {
            no: 11,
            name: "after_context_lines",
            kind: "scalar",
            T: 13
        }, {
            no: 12,
            name: "max_results",
            kind: "scalar",
            T: 13
        }, {
            no: 13,
            name: "preview_options",
            kind: "message",
            T: VT
        }]));
        static fromBinary(e, t) {
            return (new vT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new vT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new vT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(vT, e, t)
        }
    }
    class VT extends E {
        matchLines = 0;
        charsPerLine = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ExactSearchPreviewOptions";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "match_lines",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "chars_per_line",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new VT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new VT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new VT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(VT, e, t)
        }
    }
    class YT extends (null) {
        absolutePath = "";
        relativePath = "";
        ranges = [];
        resultId = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "absolute_path",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "relative_path",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "ranges",
            kind: "message",
            T: Ha,
            repeated: !0
        }, {
            no: 3,
            name: "preview",
            kind: "message",
            T: XT
        }, {
            no: 5,
            name: "result_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new YT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new YT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new YT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(YT, e, t)
        }
    }
    class XT extends E {
        text = "";
        ranges = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ExactSearchMatchPreview";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "text",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "ranges",
            kind: "message",
            T: Ha,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new XT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new XT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new XT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(XT, e, t)
        }
    }
    class KT extends E {
        workspace = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.AddTrackedWorkspaceRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "workspace",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new KT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new KT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new KT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(KT, e, t)
        }
    }
    class WT extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.AddTrackedWorkspaceResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new WT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new WT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new WT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(WT, e, t)
        }
    }
    class zT extends E {
        workspace = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RemoveTrackedWorkspaceRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "workspace",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new zT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new zT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new zT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(zT, e, t)
        }
    }
    class jT extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RemoveTrackedWorkspaceResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new jT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new jT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new jT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(jT, e, t)
        }
    }
    class QT extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetWorkspaceEditStateRequest";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new QT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new QT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new QT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(QT, e, t)
        }
    }
    class $T extends E {
        repoRoot = "";
        numAdditions = A.zero;
        numDeletions = A.zero;
        edits = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.WorkspaceEditState";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "repo_root",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "num_additions",
            kind: "scalar",
            T: 4
        }, {
            no: 3,
            name: "num_deletions",
            kind: "scalar",
            T: 4
        }, {
            no: 4,
            name: "edits",
            kind: "message",
            T: Ju,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new $T).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new $T).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new $T).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals($T, e, t)
        }
    }
    class ZT extends E {
        workspaceEdits = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetWorkspaceEditStateResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "workspace_edits",
            kind: "message",
            T: $T,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new ZT).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ZT).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ZT).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ZT, e, t)
        }
    }
    class ef extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetWorkspaceInfosRequest";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new ef).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ef).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ef).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ef, e, t)
        }
    }
    class tf extends E {
        workspaceUri = "";
        gitRootUri = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.WorkspaceInfo";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "workspace_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "git_root_uri",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new tf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new tf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new tf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(tf, e, t)
        }
    }
    class nf extends E {
        homeDirPath = "";
        workspaceInfos = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetWorkspaceInfosResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "home_dir_path",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "workspace_infos",
            kind: "message",
            T: tf,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new nf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new nf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new nf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(nf, e, t)
        }
    }
    class af extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GenerateCommitMessageRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "plan_info",
            kind: "message",
            T: Gn
        }]));
        static fromBinary(e, t) {
            return (new af).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new af).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new af).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(af, e, t)
        }
    }
    class rf extends E {
        repoRoot = "";
        commitMessageSummary = "";
        commitMessageDescription = "";
        changedFilesMigrateMeToUri = [];
        changedFileUris = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.CommitMessageData";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "repo_root",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "commit_message_summary",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "commit_message_description",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "changed_files_migrate_me_to_uri",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 5,
            name: "changed_file_uris",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new rf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new rf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new rf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(rf, e, t)
        }
    }
    class sf extends E {
        commitMessages = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GenerateCommitMessageResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "commit_messages",
            kind: "message",
            T: rf,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new sf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new sf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new sf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(sf, e, t)
        }
    }
    class of extends E {
        repoRoot = "";
        branchName = "";
        commitHash = "";
        commitMessage = "";
        parentCommitHash = "";
        authorName = "";
        authorEmail = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RecordCommitMessageSaveRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "repo_root",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "branch_name",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "commit_hash",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "commit_message",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "commit_timestamp",
            kind: "message",
            T: De
        }, {
            no: 7,
            name: "parent_commit_hash",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "author_name",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "author_email",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new of).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new of).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new of).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(of, e, t)
        }
    }
    class mf extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RecordCommitMessageSaveResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new mf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new mf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new mf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(mf, e, t)
        }
    }
    class cf extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetUserSettingsRequest";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new cf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new cf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new cf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(cf, e, t)
        }
    }
    class uf extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetUserSettingsResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "user_settings",
            kind: "message",
            T: ca
        }]));
        static fromBinary(e, t) {
            return (new uf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new uf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new uf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(uf, e, t)
        }
    }
    class lf extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SetUserSettingsRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "user_settings",
            kind: "message",
            T: ca
        }]));
        static fromBinary(e, t) {
            return (new lf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new lf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new lf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(lf, e, t)
        }
    }
    class _f extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SetUserSettingsResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "user_settings",
            kind: "message",
            T: ca
        }]));
        static fromBinary(e, t) {
            return (new _f).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new _f).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new _f).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(_f, e, t)
        }
    }
    class Ef extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetDebugDiagnosticsRequest";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Ef).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ef).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ef).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ef, e, t)
        }
    }
    class df extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetDebugDiagnosticsResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "language_server_diagnostics",
            kind: "message",
            T: $a
        }]));
        static fromBinary(e, t) {
            return (new df).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new df).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new df).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(df, e, t)
        }
    }
    class Tf extends E {
        source = Pt.UNSPECIFIED;
        startOffset = A.zero;
        endOffset = A.zero;
        modified = !1;
        completionId = "";
        completionType = $e.UNSPECIFIED;
        providerSource = Me.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.CodeRange";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "source",
            kind: "enum",
            T: ye.getEnumType(Pt)
        }, {
            no: 2,
            name: "start_offset",
            kind: "scalar",
            T: 4
        }, {
            no: 3,
            name: "end_offset",
            kind: "scalar",
            T: 4
        }, {
            no: 4,
            name: "modified",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "completion_id",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "completion_type",
            kind: "enum",
            T: ye.getEnumType($e)
        }, {
            no: 7,
            name: "provider_source",
            kind: "enum",
            T: ye.getEnumType(Me)
        }]));
        static fromBinary(e, t) {
            return (new Tf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Tf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Tf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Tf, e, t)
        }
    }
    class ff extends (null) {
        absolutePathMigrateMeToUri = "";
        absoluteUri = "";
        text = "";
        ranges = [];
        commit = "";
        repoRootMigrateMeToUri = "";
        repoRootUri = "";
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "absolute_path_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "absolute_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "text",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "ranges",
            kind: "message",
            T: Tf,
            repeated: !0
        }, {
            no: 4,
            name: "commit",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "repo_root_migrate_me_to_uri",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "repo_root_uri",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new ff).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ff).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ff).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(ff, e, t)
        }
    }
    class pf extends E {
        suggestionSources = [];
        query = "";
        autoExpandFileLimit = A.zero;
        maxItems = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetSuggestedContextScopeItemsRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "suggestion_sources",
            kind: "enum",
            T: ye.getEnumType(Ks),
            repeated: !0
        }, {
            no: 3,
            name: "query",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "auto_expand_file_limit",
            kind: "scalar",
            T: 4
        }, {
            no: 5,
            name: "max_items",
            kind: "scalar",
            T: 4
        }]));
        static fromBinary(e, t) {
            return (new pf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new pf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new pf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(pf, e, t)
        }
    }
    class Sf extends E {
        items = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetSuggestedContextScopeItemsResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "items",
            kind: "message",
            T: ya,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Sf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Sf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Sf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Sf, e, t)
        }
    }
    class Nf extends E {
        allowedTypes = [];
        allowedContextTypes = [];
        query = "";
        fuzzyMatch = !1;
        maxItems = 0;
        caseInsensitive = !1;
        repoFilter = "";
        cancelToken = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetMatchingContextScopeItemsRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "allowed_types",
            kind: "enum",
            T: ye.getEnumType(Rt),
            repeated: !0
        }, {
            no: 7,
            name: "allowed_context_types",
            kind: "enum",
            T: ye.getEnumType(mt),
            repeated: !0
        }, {
            no: 3,
            name: "query",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "fuzzy_match",
            kind: "scalar",
            T: 8
        }, {
            no: 5,
            name: "max_items",
            kind: "scalar",
            T: 5
        }, {
            no: 6,
            name: "case_insensitive",
            kind: "scalar",
            T: 8
        }, {
            no: 8,
            name: "repo_filter",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "cancel_token",
            kind: "scalar",
            T: 4
        }]));
        static fromBinary(e, t) {
            return (new Nf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Nf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Nf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Nf, e, t)
        }
    }
    class Cf extends E {
        items = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetMatchingContextScopeItemsResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "items",
            kind: "message",
            T: ya,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Cf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Cf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Cf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Cf, e, t)
        }
    }
    class If extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ContextStatus";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "active_document",
            kind: "message",
            T: va
        }, {
            no: 2,
            name: "last_active_code_context_item",
            kind: "message",
            T: Kn
        }, {
            no: 3,
            name: "pinned_scope",
            kind: "message",
            T: wa
        }, {
            no: 4,
            name: "pinned_guideline",
            kind: "message",
            T: Ja
        }, {
            no: 5,
            name: "default_pinned_scope",
            kind: "message",
            T: wa
        }]));
        static fromBinary(e, t) {
            return (new If).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new If).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new If).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(If, e, t)
        }
    }
    class gf extends E {
        workspaceFolder = "";
        gitRoot = "";
        repoName = "";
        indexProgress = {};
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.LocalIndexStatus";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "workspace_folder",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "git_root",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "repo_name",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "remote_repo",
            kind: "message",
            T: Xn
        }, {
            no: 5,
            name: "index_stats",
            kind: "message",
            T: dm
        }, {
            no: 7,
            name: "workspace_stats",
            kind: "message",
            T: xn
        }, {
            no: 8,
            name: "partial_index_metadata",
            kind: "message",
            T: Bn
        }, {
            no: 6,
            name: "index_progress",
            kind: "map",
            K: 9,
            V: {
                kind: "message",
                T: GT
            }
        }]));
        static fromBinary(e, t) {
            return (new gf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new gf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new gf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(gf, e, t)
        }
    }
    class Of extends E {
        localIndexes = [];
        ignoredLocalWorkspaces = [];
        localFilesIndexCapacity = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.IndexStatus";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "local_indexes",
            kind: "message",
            T: gf,
            repeated: !0
        }, {
            no: 2,
            name: "ignored_local_workspaces",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 3,
            name: "local_files_index_capacity",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new Of).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Of).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Of).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Of, e, t)
        }
    }
    class Af extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.BrainStatus";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "context_status",
            kind: "message",
            T: If
        }, {
            no: 2,
            name: "index_status",
            kind: "message",
            T: Of
        }]));
        static fromBinary(e, t) {
            return (new Af).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Af).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Af).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Af, e, t)
        }
    }
    class Pf extends E {
        forceRefresh = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetBrainStatusRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "force_refresh",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Pf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Pf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Pf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Pf, e, t)
        }
    }
    class Lf extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetBrainStatusResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "brain_status",
            kind: "message",
            T: Af
        }]));
        static fromBinary(e, t) {
            return (new Lf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Lf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Lf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Lf, e, t)
        }
    }
    class Rf extends E {
        maxSessions = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetAutoCascadeSessionsRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "max_sessions",
            kind: "scalar",
            T: 5
        }]));
        static fromBinary(e, t) {
            return (new Rf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Rf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Rf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Rf, e, t)
        }
    }
    class yf extends E {
        sessions = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetAutoCascadeSessionsResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "sessions",
            kind: "message",
            T: CE,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new yf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new yf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new yf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(yf, e, t)
        }
    }
    class wf extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SetPinnedGuidelineRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "pinned_guideline",
            kind: "message",
            T: Ja
        }]));
        static fromBinary(e, t) {
            return (new wf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new wf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new wf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(wf, e, t)
        }
    }
    class kf extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SetPinnedContextRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "pinned_scope",
            kind: "message",
            T: wa
        }]));
        static fromBinary(e, t) {
            return (new kf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new kf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new kf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(kf, e, t)
        }
    }
    class Df extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SetPinnedGuidelineResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Df).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Df).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Df).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Df, e, t)
        }
    }
    class Jf extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SetPinnedContextResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Jf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Jf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Jf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Jf, e, t)
        }
    }
    class Mf extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SetupUniversitySandboxRequest";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Mf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Mf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Mf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Mf, e, t)
        }
    }
    class Uf extends E {
        baseDirectory = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SetupUniversitySandboxResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "base_directory",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Uf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Uf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Uf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Uf, e, t)
        }
    }
    class xf extends E {
        text = "";
        type = Ws.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.UnifiedDiffChange";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "text",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "type",
            kind: "enum",
            T: ye.getEnumType(Ws)
        }]));
        static fromBinary(e, t) {
            return (new xf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new xf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new xf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(xf, e, t)
        }
    }
    class Bf extends (null) {
        changes = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "changes",
            kind: "message",
            T: xf,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Bf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Bf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Bf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Bf, e, t)
        }
    }
    class hf extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RenderInsertionSideHintRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "diff",
            kind: "message",
            T: ei
        }, {
            no: 2,
            name: "config",
            kind: "message",
            T: bf
        }, {
            no: 3,
            name: "metadata",
            kind: "message",
            T: qf
        }]));
        static fromBinary(e, t) {
            return (new hf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new hf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new hf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(hf, e, t)
        }
    }
    class Ff extends E {
        data = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RenderInsertionSideHintResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "data",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "display_options",
            kind: "message",
            T: Gf
        }]));
        static fromBinary(e, t) {
            return (new Ff).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ff).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ff).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ff, e, t)
        }
    }
    class bf extends E {
        fontFamily = "";
        themeName = "";
        lineHeight = 0;
        themeType = zs.UNSPECIFIED;
        fontSize = 0;
        shortcut = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RenderConfig";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "font_family",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "theme_name",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "line_height",
            kind: "scalar",
            T: 2
        }, {
            no: 4,
            name: "theme_type",
            kind: "enum",
            T: ye.getEnumType(zs)
        }, {
            no: 5,
            name: "font_size",
            kind: "scalar",
            T: 2
        }, {
            no: 6,
            name: "theme",
            kind: "message",
            T: Hf
        }, {
            no: 7,
            name: "shortcut",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new bf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new bf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new bf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(bf, e, t)
        }
    }
    class qf extends E {
        language = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RenderRequestMetadata";
        static fields = ye.util.newFieldList(( () => [{
            no: 6,
            name: "language",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new qf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new qf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new qf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(qf, e, t)
        }
    }
    class Gf extends E {
        width = 0;
        height = 0;
        dpmm = 0;
        scale = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RenderedSideHintDisplayOptions";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "width",
            kind: "scalar",
            T: 5
        }, {
            no: 2,
            name: "height",
            kind: "scalar",
            T: 5
        }, {
            no: 3,
            name: "dpmm",
            kind: "scalar",
            T: 2
        }, {
            no: 4,
            name: "scale",
            kind: "scalar",
            T: 2
        }]));
        static fromBinary(e, t) {
            return (new Gf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Gf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Gf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Gf, e, t)
        }
    }
    class Hf extends E {
        background = "";
        text = "";
        whitespace = "";
        other = "";
        literal = "";
        literalString = "";
        number = "";
        operator = "";
        punctuation = "";
        generic = "";
        name = "";
        keyword = "";
        comment = "";
        error = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.CodeTheme";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "background",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "text",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "whitespace",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "other",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "literal",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "literal_string",
            kind: "scalar",
            T: 9
        }, {
            no: 7,
            name: "number",
            kind: "scalar",
            T: 9
        }, {
            no: 8,
            name: "operator",
            kind: "scalar",
            T: 9
        }, {
            no: 9,
            name: "punctuation",
            kind: "scalar",
            T: 9
        }, {
            no: 10,
            name: "generic",
            kind: "scalar",
            T: 9
        }, {
            no: 11,
            name: "name",
            kind: "scalar",
            T: 9
        }, {
            no: 12,
            name: "keyword",
            kind: "scalar",
            T: 9
        }, {
            no: 13,
            name: "comment",
            kind: "scalar",
            T: 9
        }, {
            no: 14,
            name: "error",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Hf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Hf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Hf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Hf, e, t)
        }
    }
    class vf extends E {
        actionType = Jt.UNSPECIFIED;
        completed = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.OnboardingItemState";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "action_type",
            kind: "enum",
            T: ye.getEnumType(Jt)
        }, {
            no: 2,
            name: "completed",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new vf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new vf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new vf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(vf, e, t)
        }
    }
    class Vf extends (null) {
        hasSkipped = !1;
        items = [];
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "has_skipped",
            kind: "scalar",
            T: 8
        }, {
            no: 2,
            name: "items",
            kind: "message",
            T: vf,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Vf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Vf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Vf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(Vf, e, t)
        }
    }
    class Yf extends E {
        clearHistory = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ResetOnboardingRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "clear_history",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Yf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Yf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Yf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Yf, e, t)
        }
    }
    class Xf extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ResetOnboardingResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Xf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Xf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Xf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Xf, e, t)
        }
    }
    class Kf extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SkipOnboardingRequest";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Kf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Kf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Kf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Kf, e, t)
        }
    }
    class Wf extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SkipOnboardingResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Wf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Wf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Wf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Wf, e, t)
        }
    }
    class zf extends E {
        includeAllTrajectories = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetUserTrajectoryDebugRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "include_all_trajectories",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new zf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new zf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new zf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(zf, e, t)
        }
    }
    class jf extends E {
        mainline = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetUserTrajectoryDebugResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "mainline",
            kind: "message",
            T: Xu,
            repeated: !0
        }, {
            no: 2,
            name: "granular",
            kind: "message",
            T: vu
        }]));
        static fromBinary(e, t) {
            return (new jf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new jf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new jf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(jf, e, t)
        }
    }
    class Qf extends E {
        mainlineTrajectoryId = "";
        blocking = !1;
        fullRefresh = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ForceBackgroundResearchRefreshRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "mainline_trajectory_id",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "blocking",
            kind: "scalar",
            T: 8
        }, {
            no: 4,
            name: "full_refresh",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Qf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Qf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Qf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Qf, e, t)
        }
    }
    class $f extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ForceBackgroundResearchRefreshResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new $f).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new $f).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new $f).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals($f, e, t)
        }
    }
    class Zf extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.InitializeCascadePanelStateRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "user_status",
            kind: "message",
            T: vn
        }]));
        static fromBinary(e, t) {
            return (new Zf).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Zf).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Zf).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Zf, e, t)
        }
    }
    class ep extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.InitializeCascadePanelStateResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new ep).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ep).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ep).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ep, e, t)
        }
    }
    class tp extends E {
        source = fs.UNSPECIFIED;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.StartCascadeRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 3,
            name: "base_trajectory_identifier",
            kind: "message",
            T: hl
        }, {
            no: 4,
            name: "source",
            kind: "enum",
            T: ye.getEnumType(fs)
        }, {
            no: 2,
            name: "experiment_config",
            kind: "message",
            T: jt
        }]));
        static fromBinary(e, t) {
            return (new tp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new tp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new tp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(tp, e, t)
        }
    }
    class np extends E {
        cascadeId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.StartCascadeResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cascade_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new np).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new np).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new np).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(np, e, t)
        }
    }
    class ap extends E {
        cascadeId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetCascadeTrajectoryRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cascade_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new ap).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ap).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ap).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ap, e, t)
        }
    }
    class rp extends E {
        status = gs.UNSPECIFIED;
        numTotalSteps = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetCascadeTrajectoryResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "trajectory",
            kind: "message",
            T: vu
        }, {
            no: 2,
            name: "status",
            kind: "enum",
            T: ye.getEnumType(gs)
        }, {
            no: 3,
            name: "num_total_steps",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new rp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new rp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new rp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(rp, e, t)
        }
    }
    class sp extends E {
        cascadeId = "";
        stepOffset = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetCascadeTrajectoryStepsRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cascade_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "step_offset",
            kind: "scalar",
            T: 13
        }]));
        static fromBinary(e, t) {
            return (new sp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new sp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new sp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(sp, e, t)
        }
    }
    class ip extends E {
        steps = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetCascadeTrajectoryStepsResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "steps",
            kind: "message",
            T: tl,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new ip).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ip).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ip).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ip, e, t)
        }
    }
    class op extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetAllCascadeTrajectoriesRequest";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new op).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new op).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new op).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(op, e, t)
        }
    }
    class mp extends E {
        trajectorySummaries = {};
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetAllCascadeTrajectoriesResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "trajectory_summaries",
            kind: "map",
            K: 9,
            V: {
                kind: "message",
                T: Vu
            }
        }]));
        static fromBinary(e, t) {
            return (new mp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new mp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new mp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(mp, e, t)
        }
    }
    class cp extends E {
        cascadeId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.CancelCascadeInvocationRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cascade_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new cp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new cp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new cp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(cp, e, t)
        }
    }
    class up extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.CancelCascadeInvocationResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new up).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new up).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new up).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(up, e, t)
        }
    }
    class lp extends E {
        cascadeId = "";
        stepIndices = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.CancelCascadeStepsRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cascade_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "step_indices",
            kind: "scalar",
            T: 13,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new lp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new lp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new lp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(lp, e, t)
        }
    }
    class _p extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.CancelCascadeStepsResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new _p).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new _p).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new _p).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(_p, e, t)
        }
    }
    class Ep extends E {
        cascadeId = "";
        items = [];
        images = [];
        recipeIds = [];
        blocking = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SendUserCascadeMessageRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 3,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 1,
            name: "cascade_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "items",
            kind: "message",
            T: Ya,
            repeated: !0
        }, {
            no: 6,
            name: "images",
            kind: "message",
            T: Nr,
            repeated: !0
        }, {
            no: 5,
            name: "cascade_config",
            kind: "message",
            T: rl
        }, {
            no: 4,
            name: "experiment_config",
            kind: "message",
            T: jt
        }, {
            no: 7,
            name: "recipe_ids",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 8,
            name: "blocking",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Ep).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ep).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ep).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ep, e, t)
        }
    }
    class dp extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SendUserCascadeMessageResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new dp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new dp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new dp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(dp, e, t)
        }
    }
    class Tp extends E {
        cascadeId = "";
        stepIndex = 0;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RevertToCascadeStepRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 3,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 1,
            name: "cascade_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "step_index",
            kind: "scalar",
            T: 5
        }, {
            no: 4,
            name: "experiment_config",
            kind: "message",
            T: jt
        }]));
        static fromBinary(e, t) {
            return (new Tp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Tp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Tp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Tp, e, t)
        }
    }
    class fp extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RevertToCascadeStepResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: pE
        }]));
        static fromBinary(e, t) {
            return (new fp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new fp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new fp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(fp, e, t)
        }
    }
    class pp extends E {
        cascadeId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.HandleCascadeUserInteractionRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cascade_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "interaction",
            kind: "message",
            T: vl
        }]));
        static fromBinary(e, t) {
            return (new pp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new pp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new pp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(pp, e, t)
        }
    }
    class Sp extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.HandleCascadeUserInteractionResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Sp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Sp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Sp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Sp, e, t)
        }
    }
    class Np extends E {
        cascadeId = "";
        absoluteUri = [];
        accept = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.AcknowledgeCascadeCodeEditRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 4,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 1,
            name: "cascade_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "absolute_uri",
            kind: "scalar",
            T: 9,
            repeated: !0
        }, {
            no: 3,
            name: "accept",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Np).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Np).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Np).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Np, e, t)
        }
    }
    class Cp extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.AcknowledgeCascadeCodeEditResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Cp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Cp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Cp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Cp, e, t)
        }
    }
    class Ip extends E {
        cascadeId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetCodeValidationStatesRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cascade_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Ip).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ip).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ip).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ip, e, t)
        }
    }
    class gp extends E {
        states = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetCodeValidationStatesResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "states",
            kind: "message",
            T: Op,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new gp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new gp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new gp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(gp, e, t)
        }
    }
    class Op extends E {
        uri = "";
        lastAcknowledgedState = "";
        currentState = "";
        lastStateFileNonexistent = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ValidationState";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "uri",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "last_acknowledged_state",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "current_state",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "last_state_file_nonexistent",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Op).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Op).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Op).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Op, e, t)
        }
    }
    class Ap extends E {
        cascadeId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.DeleteCascadeTrajectoryRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cascade_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Ap).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Ap).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Ap).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Ap, e, t)
        }
    }
    class Pp extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.DeleteCascadeTrajectoryResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Pp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Pp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Pp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Pp, e, t)
        }
    }
    class Lp extends E {
        cascadeId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ResolveOutstandingStepsRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "cascade_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Lp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Lp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Lp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Lp, e, t)
        }
    }
    class Rp extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.ResolveOutstandingStepsResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Rp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Rp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Rp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Rp, e, t)
        }
    }
    class yp extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.StreamTerminalShellCommandResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new yp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new yp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new yp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(yp, e, t)
        }
    }
    class wp extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetWebDocsOptionsRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }]));
        static fromBinary(e, t) {
            return (new wp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new wp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new wp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(wp, e, t)
        }
    }
    class kp extends E {
        options = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetWebDocsOptionsResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "options",
            kind: "message",
            T: wr,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new kp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new kp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new kp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(kp, e, t)
        }
    }
    class Dp extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.UpdateDevExperimentsRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "experiment_config",
            kind: "message",
            T: jt
        }]));
        static fromBinary(e, t) {
            return (new Dp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Dp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Dp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Dp, e, t)
        }
    }
    class Jp extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.UpdateDevExperimentsResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Jp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Jp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Jp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Jp, e, t)
        }
    }
    class Mp extends E {
        workspaceUri = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetActiveAppDeploymentForWorkspaceRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "workspace_uri",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Mp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Mp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Mp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Mp, e, t)
        }
    }
    class Up extends E {
        projectName = "";
        subdomain = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetActiveAppDeploymentForWorkspaceResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "deployment_config",
            kind: "message",
            T: Dr
        }, {
            no: 2,
            name: "deployment",
            kind: "message",
            T: yr
        }, {
            no: 3,
            name: "project_name",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "subdomain",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Up).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Up).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Up).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Up, e, t)
        }
    }
    class xp extends E {
        deploymentId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetWindsurfJSAppDeploymentRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }, {
            no: 2,
            name: "deployment_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new xp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new xp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new xp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(xp, e, t)
        }
    }
    class Bp extends E {
        buildStatus = bt.UNSPECIFIED;
        deploymentUrl = "";
        buildError = "";
        buildLogs = "";
        isClaimed = !1;
        claimUrl = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetWindsurfJSAppDeploymentResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "deployment",
            kind: "message",
            T: yr
        }, {
            no: 2,
            name: "build_status",
            kind: "enum",
            T: ye.getEnumType(bt)
        }, {
            no: 3,
            name: "deployment_url",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "build_error",
            kind: "scalar",
            T: 9
        }, {
            no: 5,
            name: "build_logs",
            kind: "scalar",
            T: 9
        }, {
            no: 6,
            name: "is_claimed",
            kind: "scalar",
            T: 8
        }, {
            no: 7,
            name: "claim_url",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new Bp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Bp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Bp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Bp, e, t)
        }
    }
    class hp extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetCascadeMemoriesRequest";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new hp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new hp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new hp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(hp, e, t)
        }
    }
    class Fp extends E {
        memories = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetCascadeMemoriesResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "memories",
            kind: "message",
            T: b_,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Fp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Fp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Fp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Fp, e, t)
        }
    }
    class bp extends E {
        memoryId = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.DeleteCascadeMemoryRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "memory_id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new bp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new bp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new bp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(bp, e, t)
        }
    }
    class qp extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.DeleteCascadeMemoryResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new qp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new qp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new qp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(qp, e, t)
        }
    }
    class Gp extends E {
        memoryId = "";
        title = "";
        content = "";
        tags = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.UpdateCascadeMemoryRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "memory_id",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "title",
            kind: "scalar",
            T: 9
        }, {
            no: 3,
            name: "content",
            kind: "scalar",
            T: 9
        }, {
            no: 4,
            name: "tags",
            kind: "scalar",
            T: 9,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Gp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Gp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Gp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Gp, e, t)
        }
    }
    class Hp extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.UpdateCascadeMemoryResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Hp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Hp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Hp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Hp, e, t)
        }
    }
    class vp extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetUserMemoriesRequest";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new vp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new vp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new vp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(vp, e, t)
        }
    }
    class Vp extends E {
        memories = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetUserMemoriesResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "memories",
            kind: "message",
            T: b_,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Vp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Vp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Vp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Vp, e, t)
        }
    }
    class Yp extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RefreshMcpServersRequest";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Yp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Yp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Yp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Yp, e, t)
        }
    }
    class Xp extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RefreshMcpServersResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Xp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Xp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Xp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Xp, e, t)
        }
    }
    class Kp extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetMcpServerStatesRequest";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new Kp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Kp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Kp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Kp, e, t)
        }
    }
    class Wp extends E {
        states = [];
        isLoading = !1;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetMcpServerStatesResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "states",
            kind: "message",
            T: _E,
            repeated: !0
        }, {
            no: 2,
            name: "is_loading",
            kind: "scalar",
            T: 8
        }]));
        static fromBinary(e, t) {
            return (new Wp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Wp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Wp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Wp, e, t)
        }
    }
    class zp extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetAllWorkflowsRequest";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new zp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new zp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new zp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(zp, e, t)
        }
    }
    class jp extends E {
        workflows = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetAllWorkflowsResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "workflows",
            kind: "message",
            T: eE,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new jp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new jp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new jp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(jp, e, t)
        }
    }
    class Qp extends E {
        actionType = "";
        payload = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SendActionToChatPanelRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "action_type",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "payload",
            kind: "scalar",
            T: 12,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new Qp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Qp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Qp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Qp, e, t)
        }
    }
    class $p extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.SendActionToChatPanelResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new $p).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new $p).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new $p).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals($p, e, t)
        }
    }
    class Zp extends E {
        query = "";
        results = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RecordUserGrepRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "query",
            kind: "scalar",
            T: 9
        }, {
            no: 2,
            name: "results",
            kind: "message",
            T: n_,
            repeated: !0
        }, {
            no: 3,
            name: "timestamp",
            kind: "message",
            T: De
        }]));
        static fromBinary(e, t) {
            return (new Zp).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new Zp).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new Zp).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(Zp, e, t)
        }
    }
    class eS extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.RecordUserGrepResponse";
        static fields = ye.util.newFieldList(( () => []));
        static fromBinary(e, t) {
            return (new eS).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new eS).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new eS).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(eS, e, t)
        }
    }
    class tS extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetWindsurfExtensionUnleashContextRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "metadata",
            kind: "message",
            T: Ln
        }]));
        static fromBinary(e, t) {
            return (new tS).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new tS).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new tS).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(tS, e, t)
        }
    }
    class nS extends E {
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.language_server_pb.GetWindsurfExtensionUnleashContextResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "context",
            kind: "message",
            T: Br
        }]));
        static fromBinary(e, t) {
            return (new nS).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new nS).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new nS).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(nS, e, t)
        }
    }
    var aS, rS;
    let sS;
    !function(e) {
        e[e.Unary = 0] = "Unary",
        e[e.ServerStreaming = 1] = "ServerStreaming",
        e[e.ClientStreaming = 2] = "ClientStreaming",
        e[e.BiDiStreaming = 3] = "BiDiStreaming"
    }(aS || (aS = {})),
    function(e) {
        e[e.NoSideEffects = 1] = "NoSideEffects",
        e[e.Idempotent = 2] = "Idempotent"
    }(rS || (rS = {})),
    function(e) {
        e[e.UNSPECIFIED = 0] = "UNSPECIFIED",
        e[e.ONE = 1] = "ONE",
        e[e.TWO = 2] = "TWO"
    }(sS || (sS = {})),
    ye.util.setEnumType(sS, "exa.reactive_component_pb.TestEnum", [{
        no: 0,
        name: "TEST_ENUM_UNSPECIFIED"
    }, {
        no: 1,
        name: "TEST_ENUM_ONE"
    }, {
        no: 2,
        name: "TEST_ENUM_TWO"
    }]);
    class iS extends E {
        protocolVersion = 0;
        id = "";
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.reactive_component_pb.StreamReactiveUpdatesRequest";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "protocol_version",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "id",
            kind: "scalar",
            T: 9
        }]));
        static fromBinary(e, t) {
            return (new iS).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new iS).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new iS).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(iS, e, t)
        }
    }
    class oS extends E {
        version = A.zero;
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.reactive_component_pb.StreamReactiveUpdatesResponse";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "version",
            kind: "scalar",
            T: 4
        }, {
            no: 2,
            name: "diff",
            kind: "message",
            T: cS
        }]));
        static fromBinary(e, t) {
            return (new oS).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new oS).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new oS).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(oS, e, t)
        }
    }
    class mS extends E {
        counter = 0;
        values = [];
        nestedRepeated = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.reactive_component_pb.TestProto";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "counter",
            kind: "scalar",
            T: 5
        }, {
            no: 2,
            name: "values",
            kind: "scalar",
            T: 5,
            repeated: !0
        }, {
            no: 3,
            name: "nested",
            kind: "message",
            T: mS
        }, {
            no: 4,
            name: "nested_repeated",
            kind: "message",
            T: mS,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new mS).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new mS).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new mS).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(mS, e, t)
        }
    }
    class cS extends E {
        fieldDiffs = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.reactive_component_pb.MessageDiff";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "field_diffs",
            kind: "message",
            T: uS,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new cS).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new cS).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new cS).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(cS, e, t)
        }
    }
    class uS extends E {
        fieldNumber = 0;
        diff = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.reactive_component_pb.FieldDiff";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "field_number",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "update_singular",
            kind: "message",
            T: dS,
            oneof: "diff"
        }, {
            no: 3,
            name: "update_repeated",
            kind: "message",
            T: lS,
            oneof: "diff"
        }, {
            no: 4,
            name: "update_map",
            kind: "message",
            T: _S,
            oneof: "diff"
        }, {
            no: 5,
            name: "clear",
            kind: "scalar",
            T: 8,
            oneof: "diff"
        }]));
        static fromBinary(e, t) {
            return (new uS).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new uS).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new uS).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(uS, e, t)
        }
    }
    class lS extends E {
        newLength = 0;
        updateValues = [];
        updateIndices = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.reactive_component_pb.RepeatedDiff";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "new_length",
            kind: "scalar",
            T: 13
        }, {
            no: 2,
            name: "update_values",
            kind: "message",
            T: dS,
            repeated: !0
        }, {
            no: 3,
            name: "update_indices",
            kind: "scalar",
            T: 13,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new lS).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new lS).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new lS).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(lS, e, t)
        }
    }
    class _S extends E {
        mapKeyDiffs = [];
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.reactive_component_pb.MapDiff";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "map_key_diffs",
            kind: "message",
            T: ES,
            repeated: !0
        }]));
        static fromBinary(e, t) {
            return (new _S).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new _S).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new _S).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(_S, e, t)
        }
    }
    class ES extends E {
        diff = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.reactive_component_pb.MapKeyDiff";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "map_key",
            kind: "message",
            T: dS
        }, {
            no: 2,
            name: "update_singular",
            kind: "message",
            T: dS,
            oneof: "diff"
        }, {
            no: 3,
            name: "clear",
            kind: "scalar",
            T: 8,
            oneof: "diff"
        }]));
        static fromBinary(e, t) {
            return (new ES).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new ES).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new ES).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(ES, e, t)
        }
    }
    class dS extends E {
        value = {
            case: void 0
        };
        constructor(e) {
            super(),
            ye.util.initPartial(e, this)
        }
        static runtime = ye;
        static typeName = "exa.reactive_component_pb.SingularValue";
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "double_value",
            kind: "scalar",
            T: 1,
            oneof: "value"
        }, {
            no: 2,
            name: "float_value",
            kind: "scalar",
            T: 2,
            oneof: "value"
        }, {
            no: 3,
            name: "int32_value",
            kind: "scalar",
            T: 5,
            oneof: "value"
        }, {
            no: 4,
            name: "int64_value",
            kind: "scalar",
            T: 3,
            oneof: "value"
        }, {
            no: 5,
            name: "uint32_value",
            kind: "scalar",
            T: 13,
            oneof: "value"
        }, {
            no: 6,
            name: "uint64_value",
            kind: "scalar",
            T: 4,
            oneof: "value"
        }, {
            no: 7,
            name: "sint32_value",
            kind: "scalar",
            T: 17,
            oneof: "value"
        }, {
            no: 8,
            name: "sint64_value",
            kind: "scalar",
            T: 18,
            oneof: "value"
        }, {
            no: 9,
            name: "fixed32_value",
            kind: "scalar",
            T: 7,
            oneof: "value"
        }, {
            no: 10,
            name: "fixed64_value",
            kind: "scalar",
            T: 6,
            oneof: "value"
        }, {
            no: 11,
            name: "sfixed32_value",
            kind: "scalar",
            T: 15,
            oneof: "value"
        }, {
            no: 12,
            name: "sfixed64_value",
            kind: "scalar",
            T: 16,
            oneof: "value"
        }, {
            no: 13,
            name: "bool_value",
            kind: "scalar",
            T: 8,
            oneof: "value"
        }, {
            no: 14,
            name: "enum_value",
            kind: "scalar",
            T: 13,
            oneof: "value"
        }, {
            no: 15,
            name: "string_value",
            kind: "scalar",
            T: 9,
            oneof: "value"
        }, {
            no: 16,
            name: "bytes_value",
            kind: "scalar",
            T: 12,
            oneof: "value"
        }, {
            no: 17,
            name: "message_value",
            kind: "message",
            T: cS,
            oneof: "value"
        }]));
        static fromBinary(e, t) {
            return (new dS).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new dS).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new dS).fromJsonString(e, t)
        }
        static equals(e, t) {
            return ye.util.equals(dS, e, t)
        }
    }
    class TS extends (null) {
        singularScalarValue = 0;
        repeatedScalarValue = [];
        repeatedMessageValue = [];
        mapScalarValue = {};
        mapMessageValue = {};
        oneofTest = {
            case: void 0
        };
        enumValue = sS.UNSPECIFIED;
        constructor(e) {
            super(),
            proto3.util.initPartial(e, this)
        }
        static runtime = null;
        static typeName = null;
        static fields = ye.util.newFieldList(( () => [{
            no: 1,
            name: "singular_scalar_value",
            kind: "scalar",
            T: 1
        }, {
            no: 2,
            name: "singular_message_value",
            kind: "message",
            T: mS
        }, {
            no: 10,
            name: "optional_scalar_value",
            kind: "scalar",
            T: 1,
            opt: !0
        }, {
            no: 3,
            name: "repeated_scalar_value",
            kind: "scalar",
            T: 1,
            repeated: !0
        }, {
            no: 4,
            name: "repeated_message_value",
            kind: "message",
            T: mS,
            repeated: !0
        }, {
            no: 5,
            name: "map_scalar_value",
            kind: "map",
            K: 5,
            V: {
                kind: "scalar",
                T: 1
            }
        }, {
            no: 6,
            name: "map_message_value",
            kind: "map",
            K: 9,
            V: {
                kind: "message",
                T: mS
            }
        }, {
            no: 7,
            name: "oneof_scalar_value",
            kind: "scalar",
            T: 1,
            oneof: "oneof_test"
        }, {
            no: 8,
            name: "oneof_message_value",
            kind: "message",
            T: mS,
            oneof: "oneof_test"
        }, {
            no: 9,
            name: "enum_value",
            kind: "enum",
            T: ye.getEnumType(sS)
        }]));
        static fromBinary(e, t) {
            return (new TS).fromBinary(e, t)
        }
        static fromJson(e, t) {
            return (new TS).fromJson(e, t)
        }
        static fromJsonString(e, t) {
            return (new TS).fromJsonString(e, t)
        }
        static equals(e, t) {
            return proto3.util.equals(TS, e, t)
        }
    }
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.ServerStreaming,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.ServerStreaming,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.ServerStreaming,
    aS.ServerStreaming,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.ClientStreaming,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary,
    aS.Unary;
    class fS {
        sessionId = Kr();
        requestId = 0;
        promiseMap = new Map;
        constructor(e) {
            this.extensionId = e,
            this.port = this.createPort()
        }
        createPort() {
            const e = chrome.runtime.connect(this.extensionId, {
                name: this.sessionId
            });
            return e.onDisconnect.addListener(( () => {
                this.port = this.createPort()
            }
            )),
            e.onMessage.addListener((async e => {
                if ("getCompletions" === e.kind) {
                    let t;
                    void 0 !== e.response && (t = id.fromJsonString(e.response)),
                    this.promiseMap.get(e.requestId)?.(t),
                    this.promiseMap.delete(e.requestId)
                }
            }
            )),
            e
        }
        getMetadata(e) {
            return new Ln({
                ideName: e.ideName,
                ideVersion: e.ideVersion,
                extensionName: "chrome",
                extensionVersion: "1.42.7",
                locale: navigator.language,
                sessionId: this.sessionId,
                requestId: BigInt(++this.requestId),
                userAgent: navigator.userAgent,
                url: window.location.href
            })
        }
        async getCompletions(e) {
            const t = Number(e.metadata?.requestId)
              , n = new Promise((e => {
                this.promiseMap.set(t, e)
            }
            ))
              , a = {
                kind: "getCompletions",
                requestId: t,
                request: e.toJsonString()
            };
            return this.port.postMessage(a),
            n
        }
        acceptedLastCompletion(e, t) {
            const n = {
                kind: "acceptCompletion",
                request: new od({
                    metadata: this.getMetadata(e),
                    completionId: t
                }).toJsonString()
            };
            this.port.postMessage(n)
        }
    }
    function pS(e) {
        return e < 128 ? 1 : e < 2048 ? 2 : e < 65536 ? 3 : 4
    }
    function SS(e, t) {
        if (0 === t)
            return 0;
        let n = 0
          , a = 0;
        for (const r of e)
            if (a += r.length,
            n += pS(r.codePointAt(0)),
            void 0 !== t && a >= t)
                break;
        return n
    }
    function NS(e, t) {
        if (0 === t)
            return 0;
        let n = 0
          , a = 0;
        for (const r of e)
            if (a += pS(r.codePointAt(0)),
            n += r.length,
            void 0 !== t && a >= t)
                break;
        return n
    }
    const CS = {
        [Ze.PYTHON]: "python",
        [Ze.SQL]: "sql",
        [Ze.R]: "",
        [Ze.MARKDOWN]: "markdown",
        [Ze.SCALA]: ""
    };
    function IS(e) {
        return Object.prototype.hasOwnProperty.call(CS, e)
    }
    function gS(e) {
        const t = e.textModels ?? []
          , n = e.getLanguage(e.currentTextModel, void 0)
          , a = n === Ze.MARKDOWN
          , r = a ? "\n\n" : "\nCELL:\n"
          , s = IS(n)
          , i = [];
        let o = 0
          , m = !1;
        for (const [c,u] of t.entries()) {
            const t = s && e.currentTextModel === u;
            t && (o = i.map((e => SS(e))).reduce(( (e, t) => e + t), 0) + r.length * (i.length + (e.isNotebook ? 1 : 0)),
            m = !0);
            const l = e.getLanguage(u, c);
            if (s && !a) {
                if (l === Ze.MARKDOWN)
                    continue;
                l === n && (t && void 0 !== e.currentTextModelWithOutput ? i.push(e.getText(e.currentTextModelWithOutput)) : i.push(e.getText(u)))
            } else
                a && (l === Ze.MARKDOWN ? i.push(e.getText(u)) : IS(l) && i.push(`\`\`\`${CS[l]}\n${e.getText(u)}\n\`\`\``))
        }
        const c = e.getText(e.currentTextModelWithOutput ?? e.currentTextModel);
        let u = m ? `${i.join(r)}` : `${c}`;
        return u = e.isNotebook ? `${r}${u}` : u,
        {
            text: u,
            utf8ByteOffset: SS(c, e.utf16CodeUnitOffset),
            additionalUtf8ByteOffset: o
        }
    }
    class OS {
        constructor(e, t) {
            this.client = new fS(e),
            this.ideInfo = t
        }
        documentMatchesCompletion() {
            return this.currentCompletion?.doc.getValue() === this.currentCompletion?.docState
        }
        anyTextMarkerUpdated(e, t, n) {
            return void 0 !== this.currentCompletion?.textMarkers.find((a => function(e, t, n, a) {
                if (n.line != e.pos.line || n.ch != e.pos.ch)
                    return !1;
                if ("Backspace" === t)
                    return "" !== a && (e.spanElement.innerText = a + e.spanElement.innerText,
                    !0);
                if (t.length > 1 || "\n" === t)
                    return !1;
                const r = e.spanElement.innerText;
                return 1 !== r.length && !!r.startsWith(t) && (e.spanElement.innerText = e.spanElement.innerText.substring(1),
                !0)
            }(a, e, t, n)))
        }
        async triggerCompletion(e, t, n, a, r, s, i) {
            const o = n.getCursor()
              , {text: m, utf8ByteOffset: c, additionalUtf8ByteOffset: u} = function(e, t, n, a) {
                return gS({
                    textModels: t,
                    currentTextModel: n,
                    currentTextModelWithOutput: a,
                    isNotebook: e,
                    utf16CodeUnitOffset: n.indexFromPos(n.getCursor()),
                    getText: e => e.getValue(),
                    getLanguage: e => Gr(e, void 0)
                })
            }(e, t, n, a)
              , l = u + c
              , _ = new sd({
                metadata: this.client.getMetadata(this.ideInfo),
                document: {
                    text: m,
                    editorLanguage: (E = n,
                    qr(E).name),
                    language: Gr(n, s),
                    cursorOffset: BigInt(l),
                    lineEnding: "\n",
                    absoluteUri: `file:///${s}`
                },
                editorOptions: r
            });
            var E;
            const d = await this.client.getCompletions(_);
            if (void 0 === d)
                return;
            this.clearCompletion("about to replace completions if the cursor hasn't moved and we got completions");
            const T = n.getCursor();
            if (T.ch !== o.ch || T.line !== o.line)
                return;
            if (0 === d.completionItems.length)
                return;
            const f = d.completionItems[0];
            this.renderCompletion(n, f, u, i || ( () => []))
        }
        clearCompletion(e) {
            const t = this.currentCompletion;
            return void 0 !== t && (t.disposables.forEach((e => {
                e.dispose()
            }
            )),
            t.lineWidgets.forEach((e => {
                e.clear()
            }
            )),
            t.textMarkers.forEach((e => {
                e.marker.clear()
            }
            )),
            this.currentCompletion = void 0,
            !0)
        }
        renderCompletion(e, t, n, a) {
            this.clearCompletion("about to render new completions");
            const r = Number(t.range?.startOffset ?? 0) - n
              , s = Number(t.range?.endOffset ?? 0) - n
              , i = {
                completionItem: t,
                lineWidgets: [],
                textMarkers: [],
                disposables: a(),
                doc: e,
                start: e.posFromIndex(NS(e.getValue(), r)),
                end: e.posFromIndex(NS(e.getValue(), s)),
                docState: e.getValue()
            }
              , o = e.getCursor();
            let m = !1;
            if (t.completionParts.forEach((t => {
                if (t.type === Xs.INLINE) {
                    const a = document.createElement("span");
                    a.classList.add("codeium-ghost"),
                    a.innerText = t.text;
                    const r = Number(t.offset) - n
                      , s = NS(e.getValue(), r)
                      , c = e.posFromIndex(s)
                      , u = e.setBookmark(c, {
                        widget: a,
                        insertLeft: !0,
                        handleMouseEvents: !0
                    });
                    i.textMarkers.push({
                        marker: u,
                        pos: c,
                        spanElement: a
                    }),
                    c.line === o.line && c.ch === o.ch && (m = !0)
                } else if (t.type === Xs.BLOCK) {
                    const n = document.createElement("div");
                    n.classList.add("codeium-ghost"),
                    t.text.split("\n").forEach((e => {
                        const t = document.createElement("pre");
                        t.classList.add("CodeMirror-line", "codeium-ghost-line"),
                        "" === e && (e = " "),
                        t.innerText = e,
                        n.appendChild(t)
                    }
                    ));
                    const a = e.addLineWidget(o.line, n, {
                        handleMouseEvents: !0
                    });
                    i.lineWidgets.push(a)
                }
            }
            )),
            !m) {
                const t = document.createElement("span");
                t.classList.add("codeium-ghost"),
                t.innerText = "";
                const n = e.setBookmark(o, {
                    widget: t,
                    insertLeft: !0
                });
                i.textMarkers.push({
                    marker: n,
                    pos: o,
                    spanElement: t
                })
            }
            this.currentCompletion = i
        }
        acceptCompletion() {
            const e = this.currentCompletion;
            if (void 0 === e)
                return !1;
            this.clearCompletion("about to accept completions");
            const t = e.completionItem.completion;
            if (void 0 === t)
                return console.error("Empty completion"),
                !0;
            const n = e.doc;
            if (n.setCursor(e.start),
            n.replaceRange(t.text, e.start, e.end),
            void 0 !== e.completionItem.suffix && e.completionItem.suffix.text.length > 0) {
                n.replaceRange(e.completionItem.suffix.text, n.getCursor());
                const t = n.getCursor()
                  , a = n.indexFromPos(t) + Number(e.completionItem.suffix.deltaCursorOffset);
                n.setCursor(n.posFromIndex(a))
            }
            return this.client.acceptedLastCompletion(this.ideInfo, t.completionId),
            !0
        }
        beforeMainKeyHandler(e, t, n, a) {
            let r = !1;
            if (t.ctrlKey && " " === t.key && (r = !0),
            "\"')}]".includes(t.key) && (r = !0),
            t.isComposing)
                return this.clearCompletion("composing"),
                {
                    consumeEvent: !1,
                    forceTriggerCompletion: r
                };
            if (a && t.key.toLowerCase() === a.key.toLowerCase() && !!t.ctrlKey == !!a.ctrl && !!t.altKey == !!a.alt && !!t.shiftKey == !!a.shift && !!t.metaKey == !!a.meta && this.acceptCompletion())
                return {
                    consumeEvent: !0,
                    forceTriggerCompletion: r
                };
            if (!t.metaKey && !t.ctrlKey && !t.altKey && !t.shiftKey && n.escape && "Escape" === t.key && this.clearCompletion("user dismissed"))
                return {
                    consumeEvent: !0,
                    forceTriggerCompletion: r
                };
            if ("Tab" === t.key && t.shiftKey)
                return {
                    consumeEvent: !1,
                    forceTriggerCompletion: r
                };
            switch (t.key) {
            case "Delete":
            case "ArrowDown":
            case "ArrowUp":
            case "ArrowLeft":
            case "ArrowRight":
            case "Home":
            case "End":
            case "PageDown":
            case "PageUp":
                return this.clearCompletion(`key: ${t.key}`),
                {
                    consumeEvent: !1,
                    forceTriggerCompletion: r
                }
            }
            const s = e.getCursor()
              , i = 0 === s.ch ? "" : e.getRange({
                line: s.line,
                ch: s.ch - 1
            }, s);
            return this.anyTextMarkerUpdated(t.key, s, i) || 1 !== t.key.length || this.clearCompletion("didn't update text marker and key is a single character"),
            "Enter" === t.key && this.clearCompletion("enter"),
            {
                consumeEvent: void 0,
                forceTriggerCompletion: r
            }
        }
        clearCompletionInitHook() {
            const e = new WeakSet;
            return t => {
                if (e.has(t))
                    return;
                e.add(t);
                const n = t.getInputField().closest(".CodeMirror");
                if (null === n)
                    return;
                const a = n;
                a.addEventListener("focusout", ( () => {
                    this.clearCompletion("focusout")
                }
                )),
                a.addEventListener("mousedown", ( () => {
                    this.clearCompletion("mousedown")
                }
                )),
                new MutationObserver(( () => {
                    a.classList.contains("cm-fat-cursor") && this.clearCompletion("vim")
                }
                )).observe(a, {
                    attributes: !0,
                    attributeFilter: ["class"]
                });
                const r = document.body.querySelector(".jp-Completer");
                null !== r && new MutationObserver(( () => {
                    r?.classList.contains("lm-mod-hidden") || this.clearCompletion("completer")
                }
                )).observe(r, {
                    attributes: !0,
                    attributeFilter: ["class"]
                })
            }
        }
    }
    class AS {
        docs = [];
        debounceMs = 0;
        hookedEditors = new WeakSet;
        constructor(e, t, n, a) {
            this.multiplayer = n,
            this.codeMirrorManager = new OS(e,{
                ideName: "codemirror",
                ideVersion: `${t?.version ?? "unknown"}-${window.location.hostname}`
            }),
            void 0 !== t && t.defineInitHook(this.editorHook()),
            this.debounceMs = a ?? 0
        }
        editorHook() {
            const e = this.codeMirrorManager.clearCompletionInitHook();
            return t => {
                this.hookedEditors.has(t) || (this.hookedEditors.add(t),
                this.addKeydownListener(t, this.multiplayer),
                e(t))
            }
        }
        addKeydownListener(e, t) {
            null !== e.getInputField().closest(".CodeMirror") && (t && e.on("change", ( () => {
                this.codeMirrorManager.documentMatchesCompletion() || this.codeMirrorManager.clearCompletion("document changed")
            }
            )),
            e.on("keydown", ( (e, t) => {
                const {consumeEvent: n, forceTriggerCompletion: a} = this.codeMirrorManager.beforeMainKeyHandler(e.getDoc(), t, {
                    tab: !0,
                    escape: !0
                }, {
                    key: "Tab",
                    ctrl: !1,
                    alt: !1,
                    shift: !1,
                    meta: !1
                });
                if (void 0 !== n)
                    return void (n && t.preventDefault());
                const r = e.getDoc()
                  , s = r.getValue();
                setTimeout((async () => {
                    (a || r.getValue() !== s) && await this.codeMirrorManager.triggerCompletion(!1, this.docs, e.getDoc(), void 0, new Rn({
                        tabSize: BigInt(e.getOption("tabSize") ?? 4),
                        insertSpaces: !e.getOption("indentWithTabs")
                    }), void 0, void 0)
                }
                ), this.debounceMs)
            }
            )))
        }
    }
    class PS {
        constructor(e, t, n) {
            this.jupyter = t,
            this.codeMirrorManager = new OS(e,{
                ideName: "jupyter_notebook",
                ideVersion: t.version
            }),
            this.keybindings = n
        }
        patchCellKeyEvent(e) {
            const t = (e, t) => this.codeMirrorManager.beforeMainKeyHandler(e, t, {
                tab: !0,
                escape: !1
            }, this.keybindings.accept)
              , n = n => {
                const a = this.codeMirrorManager;
                return function(r, s) {
                    const {consumeEvent: i, forceTriggerCompletion: o} = t(r.getDoc(), s);
                    if (void 0 !== i)
                        return void (i ? s.preventDefault() : n.call(this, r, s));
                    const m = r.getDoc()
                      , c = m.getValue();
                    setTimeout((async () => {
                        if (!o && m.getValue() === c)
                            return;
                        const e = []
                          , t = [...this.notebook.get_cells()];
                        let n;
                        for (const a of t) {
                            let t = "";
                            if (void 0 !== a.output_area && a.output_area.outputs.length > 0) {
                                const e = a.output_area.outputs[0];
                                "execute_result" === e.output_type && void 0 !== e.data && void 0 !== e.data["text/plain"] ? t = e.data["text/plain"] : "stream" === e.output_type && "stdout" === e.name && void 0 !== e.text && (t = e.text);
                                const n = t.split("\n");
                                n.length > 10 && (n.length = 10,
                                t = n.join("\n")),
                                t.length > 500 && (t = t.slice(0, 500))
                            }
                            if (t = t ? "\nOUTPUT:\n" + t : "",
                            a.code_mirror.getDoc() === m)
                                e.push(m),
                                n = a.code_mirror.getDoc().copy(!1),
                                n.setValue(a.get_text() + t);
                            else {
                                const n = a.code_mirror.getDoc().copy(!1);
                                let r = n.getValue();
                                r += t,
                                n.setValue(r),
                                e.push(n)
                            }
                        }
                        const s = window.location.href
                          , i = new URL(s).pathname
                          , u = i.endsWith(".ipynb") ? i.replace(/^\//, "") : void 0;
                        await a.triggerCompletion(!0, e, this.code_mirror.getDoc(), n, new Rn({
                            tabSize: BigInt(r.getOption("tabSize") ?? 4),
                            insertSpaces: !r.getOption("indentWithTabs")
                        }), u ?? "unknown_url", void 0)
                    }
                    ), e ?? 0)
                }
            }
            ;
            this.jupyter.CodeCell.prototype.handle_codemirror_keyevent = n(this.jupyter.CodeCell.prototype.handle_codemirror_keyevent),
            this.jupyter.TextCell.prototype.handle_codemirror_keyevent = n(this.jupyter.TextCell.prototype.handle_codemirror_keyevent)
        }
        patchShortcutManagerHandler() {
            const e = this.jupyter.keyboard.ShortcutManager.prototype.call_handler
              , t = () => this.codeMirrorManager.clearCompletion("shortcut manager");
            this.jupyter.keyboard.ShortcutManager.prototype.call_handler = function(n) {
                "Escape" === n.key && t() ? n.preventDefault() : e.call(this, n)
            }
        }
    }
    function LS(e) {
        const t = [];
        return e.ctrl && t.push("Ctrl"),
        e.alt && t.push("Alt"),
        e.shift && t.push("Shift"),
        e.meta && t.push("Meta"),
        t.push(e.key),
        t.join(" ")
    }
    const RS = "codeium:accept-completion"
      , yS = "codeium:dismiss-completion";
    class wS {
        nonNotebookWidget = new Set;
        constructor(e, t, n, a, r, s) {
            this.extensionId = e,
            this.app = t,
            this.notebookTracker = n,
            this.editorTracker = a,
            this.documentManager = r,
            this.debounceMs = s,
            this.codeMirrorManager = new OS(e,{
                ideName: "jupyterlab",
                ideVersion: `${t.name.toLowerCase()} ${t.version}`
            }),
            t.commands.addCommand(RS, {
                execute: () => {
                    this.codeMirrorManager.acceptCompletion()
                }
            }),
            t.commands.addCommand(yS, {
                execute: () => {
                    this.codeMirrorManager.clearCompletion("user dismissed")
                }
            });
            const i = this.codeMirrorManager.clearCompletionInitHook()
              , o = this.keydownHandler.bind(this);
            n.activeCellChanged.connect(( (e, t) => {
                this.previousCellHandler?.dispose(),
                this.previousCellHandler = void 0,
                null !== t && (i(t.editor.editor ?? null),
                this.previousCellHandler = t.editor.addKeydownHandler(o))
            }
            ), this),
            a.widgetAdded.connect(( (e, t) => {
                i(t.content.editor.editor),
                t.content.editor.addKeydownHandler(o),
                this.nonNotebookWidget.add(t.id),
                t.disposed.connect(this.removeNonNotebookWidget, this)
            }
            ), this),
            this.keybindings = async function(e) {
                return await new Promise((t => {
                    chrome.runtime.sendMessage(e, {
                        type: "jupyterlab"
                    }, (e => {
                        t(e)
                    }
                    ))
                }
                ))
            }(e)
        }
        removeNonNotebookWidget(e) {
            this.nonNotebookWidget.delete(e.id)
        }
        keydownHandler(e, t) {
            const n = e
              , {consumeEvent: a, forceTriggerCompletion: r} = this.codeMirrorManager.beforeMainKeyHandler(n.doc, t, {
                tab: !1,
                escape: !1
            });
            if (void 0 !== a)
                return a;
            const s = n.doc.getValue();
            return setTimeout((async () => {
                const e = await this.keybindings;
                if (!r && n.doc.getValue() === s)
                    return;
                const t = []
                  , a = n === this.notebookTracker.activeCell?.editor
                  , i = a ? this.notebookTracker.currentWidget : this.editorTracker.currentWidget;
                let o;
                if (a) {
                    const e = this.notebookTracker.currentWidget?.content.widgets;
                    if (void 0 !== e)
                        for (const n of e) {
                            const e = n.editor.doc
                              , a = n.model.toJSON();
                            if (void 0 !== a.outputs && a.outputs.length > 0) {
                                const r = n === this.notebookTracker.currentWidget?.content.activeCell
                                  , s = a.source;
                                let i = "";
                                for (const e of a.outputs) {
                                    if ("execute_result" === e.output_type && void 0 !== e.data) {
                                        const t = e.data;
                                        void 0 !== t["text/plain"] ? i = e.data["text/plain"] : void 0 !== t["text/html"] && (i = e.data["text/html"])
                                    }
                                    "stream" === e.output_type && "stdout" === e.name && void 0 !== e.text && (i = e.text)
                                }
                                i = i.split("\n").slice(0, 10).map((e => e.slice(0, 500))).join("\n"),
                                i = i ? "\nOUTPUT:\n" + i : "";
                                const m = e.copy(!1);
                                m.setValue(s + i),
                                r ? (o = m,
                                t.push(e)) : t.push(m)
                            } else
                                t.push(e)
                        }
                }
                const m = null !== i ? this.documentManager.contextForWidget(i) : void 0
                  , c = n.doc;
                await this.codeMirrorManager.triggerCompletion(!0, t, c, o, new Rn({
                    tabSize: BigInt(n.getOption("tabSize")),
                    insertSpaces: n.getOption("insertSpaces")
                }), m?.localPath, ( () => {
                    const t = [this.app.commands.addKeyBinding({
                        command: RS,
                        keys: [LS(e.accept)],
                        selector: ".CodeMirror"
                    })];
                    return this.app.hasPlugin("@axlair/jupyterlab_vim") || t.push(this.app.commands.addKeyBinding({
                        command: yS,
                        keys: [LS(e.dismiss)],
                        selector: ".CodeMirror"
                    })),
                    t
                }
                ))
            }
            ), this.debounceMs),
            chrome.runtime.sendMessage(this.extensionId, {
                type: "success"
            }),
            !1
        }
    }
    function kS(e, t, n) {
        return {
            id: "codeium:plugin",
            autoStart: !0,
            activate: (t, a, r, s) => {
                new wS(e,t,a,r,s,n)
            }
            ,
            requires: [t._pluginMap["@jupyterlab/notebook-extension:tracker"].provides, t._pluginMap["@jupyterlab/fileeditor-extension:plugin"].provides, t._pluginMap["@jupyterlab/docmanager-extension:plugin"].provides]
        }
    }
    const DS = new Map([["bazel", Ze.STARLARK], ["c", Ze.C], ["clojure", Ze.CLOJURE], ["coffeescript", Ze.COFFEESCRIPT], ["cpp", Ze.CPP], ["csharp", Ze.CSHARP], ["css", Ze.CSS], ["cuda-cpp", Ze.CUDACPP], ["dockerfile", Ze.DOCKERFILE], ["go", Ze.GO], ["groovy", Ze.GROOVY], ["handlebars", Ze.HANDLEBARS], ["haskell", Ze.HASKELL], ["html", Ze.HTML], ["ini", Ze.INI], ["java", Ze.JAVA], ["javascript", Ze.JAVASCRIPT], ["javascriptreact", Ze.JAVASCRIPT], ["json", Ze.JSON], ["jsonc", Ze.JSON], ["jsx", Ze.JAVASCRIPT], ["julia", Ze.JULIA], ["kotlin", Ze.KOTLIN], ["latex", Ze.LATEX], ["less", Ze.LESS], ["lua", Ze.LUA], ["makefile", Ze.MAKEFILE], ["markdown", Ze.MARKDOWN], ["objective-c", Ze.OBJECTIVEC], ["objective-cpp", Ze.OBJECTIVECPP], ["pbtxt", Ze.PBTXT], ["perl", Ze.PERL], ["pgsql", Ze.SQL], ["php", Ze.PHP], ["plaintext", Ze.PLAINTEXT], ["proto3", Ze.PROTOBUF], ["python", Ze.PYTHON], ["r", Ze.R], ["ruby", Ze.RUBY], ["rust", Ze.RUST], ["sass", Ze.SASS], ["scala", Ze.SCALA], ["scss", Ze.SCSS], ["shellscript", Ze.SHELL], ["sql", Ze.SQL], ["swift", Ze.SWIFT], ["terraform", Ze.HCL], ["typescript", Ze.TYPESCRIPT], ["typescriptreact", Ze.TSX], ["vb", Ze.VISUALBASIC], ["vue-html", Ze.VUE], ["vue", Ze.VUE], ["xml", Ze.XML], ["xsl", Ze.XSL], ["yaml", Ze.YAML], ["notebook-python", Ze.PYTHON], ["notebook-python-lsp", Ze.PYTHON]]);
    function JS(e) {
        return DS.get(e) ?? Ze.UNSPECIFIED
    }
    const MS = {
        UNSPECIFIED: 0,
        COLAB: 1,
        STACKBLITZ: 2,
        DEEPNOTE: 3,
        DATABRICKS: 4,
        QUADRATIC: 5,
        CUSTOM: 6
    };
    function US(e) {
        return void 0 !== e.getLanguageIdentifier ? e.getLanguageIdentifier().language : e.getLanguageId()
    }
    class xS {
        constructor(e, t) {
            this.startLineNumber = e.lineNumber,
            this.startColumn = e.column,
            this.endLineNumber = t.lineNumber,
            this.endColumn = t.column
        }
    }
    function BS(e, t) {
        const n = "string" == typeof t ? t : t.getValue();
        if (e !== MS.DATABRICKS || !n.startsWith("%"))
            return {
                value: n,
                utf16Offset: 0
            };
        const a = n.indexOf("\n")
          , r = -1 === a ? n.length : a + 1;
        return {
            value: n.substring(r),
            utf16Offset: r
        }
    }
    function hS() {
        const e = window.colab?.global.notebookModel.fileId;
        if (void 0 !== e) {
            if ("drive" === e.source) {
                let t = e.fileId;
                return t = t.replace(/^\//, ""),
                `${t}.ipynb`
            }
            return e.fileId.replace(/^\//, "")
        }
    }
    class FS {
        modelUriToEditor = new Map;
        constructor(e, t, n) {
            this.extensionId = e,
            this.monacoSite = t,
            this.client = new fS(e),
            this.debounceMs = n
        }
        getIdeInfo() {
            return void 0 !== window.colab ? {
                ideName: "colab",
                ideVersion: window.colabVersionTag ?? "unknown"
            } : {
                ideName: "monaco",
                ideVersion: `unknown-${window.location.hostname}`
            }
        }
        textModels(e) {
            if (this.monacoSite === MS.COLAB)
                return [...window.colab?.global.notebookModel.singleDocument.models ?? []];
            if (this.monacoSite === MS.DEEPNOTE) {
                const t = e.uri.toString().split(":")[0]
                  , n = [];
                for (const [e,a] of this.modelUriToEditor)
                    e.toString().split(":")[0] === t && n.push(a);
                return n.sort(( (e, t) => (e.getDomNode()?.getBoundingClientRect().top ?? 0) - (t.getDomNode()?.getBoundingClientRect().top ?? 0))),
                n.map((e => e.getModel())).filter((e => null !== e))
            }
            return []
        }
        relativePath() {
            if (this.monacoSite === MS.COLAB)
                return hS();
            const e = window.location.href;
            return this.monacoSite === MS.DEEPNOTE || this.monacoSite === MS.DATABRICKS ? function(e) {
                const t = e.split("/").pop();
                if (void 0 !== t)
                    return `${t}.ipynb`
            }(e) : void 0
        }
        isNotebook() {
            return MS.COLAB === this.monacoSite || MS.DATABRICKS === this.monacoSite || MS.DEEPNOTE === this.monacoSite
        }
        absolutePath(e) {
            return this.monacoSite === MS.COLAB ? hS() : e.uri.path.replace(/^\//, "")
        }
        computeTextAndOffsets(e, t) {
            if (this.monacoSite === MS.DATABRICKS) {
                const n = (window.notebook?.commandCollection().models ?? []).filter((e => "command" === e.attributes.type));
                if (0 !== n.length) {
                    const a = new Map;
                    for (const e of this.modelUriToEditor.values()) {
                        const t = e.getModel();
                        if (null === t)
                            continue;
                        const n = BS(this.monacoSite, t).value;
                        a.set(n, t)
                    }
                    const r = [...n];
                    r.sort(( (e, t) => e.attributes.position - t.attributes.position));
                    const s = r.map((e => e.attributes.command))
                      , i = e.getValue();
                    let o, m;
                    for (const [e,t] of s.entries())
                        i.startsWith(t) && (void 0 === o || t.length > o.length) && (o = {
                            idx: e,
                            length: t.length
                        }),
                        t.startsWith(i) && (void 0 === m || t.length < m.length) && (m = {
                            idx: e,
                            length: t.length
                        });
                    void 0 !== o ? s[o.idx] = i : void 0 !== m && (s[m.idx] = i);
                    const c = BS(this.monacoSite, e);
                    return gS({
                        isNotebook: this.isNotebook(),
                        textModels: s.map((e => BS(this.monacoSite, e).value)),
                        currentTextModel: c.value,
                        utf16CodeUnitOffset: e.getOffsetAt(t) - c.utf16Offset,
                        getText: e => e,
                        getLanguage: (e, t) => {
                            const n = a.get(e);
                            return void 0 !== n ? JS(US(n)) : (void 0 !== t && (e = s[t]),
                            e.startsWith("%sql") ? Ze.SQL : e.startsWith("%r") ? Ze.R : e.startsWith("%python") ? Ze.PYTHON : e.startsWith("%md") ? Ze.MARKDOWN : e.startsWith("%scala") ? Ze.SCALA : Ze.UNSPECIFIED)
                        }
                    })
                }
            }
            if (this.monacoSite === MS.COLAB) {
                const n = window.colab?.global.notebookModel.cells
                  , a = []
                  , r = new Map;
                for (const e of n ?? []) {
                    let t = e.textModel.getValue();
                    if ("code" === e.type) {
                        if (void 0 !== e.outputs.currentOutput && e.outputs.currentOutput.outputItems.length > 0) {
                            const n = e.outputs.currentOutput.outputItems[0].data;
                            void 0 !== n && (void 0 !== n["text/plain"] ? t = t + "\nOUTPUT:\n" + n["text/plain"].join() : void 0 !== n["text/html"] && (t = t + "\nOUTPUT:\n" + n["text/html"].join()))
                        }
                        r.set(t, JS(US(e.textModel)))
                    }
                    a.push(t)
                }
                const s = BS(this.monacoSite, e);
                return gS({
                    isNotebook: this.isNotebook(),
                    textModels: a.map((e => BS(this.monacoSite, e).value)),
                    currentTextModel: s.value,
                    utf16CodeUnitOffset: e.getOffsetAt(t) - s.utf16Offset,
                    getText: e => e,
                    getLanguage: e => r.get(BS(this.monacoSite, e).value) ?? Ze.UNSPECIFIED
                })
            }
            return gS({
                isNotebook: this.isNotebook(),
                textModels: this.textModels(e),
                currentTextModel: e,
                utf16CodeUnitOffset: e.getOffsetAt(t) - BS(this.monacoSite, e).utf16Offset,
                getText: e => BS(this.monacoSite, e).value,
                getLanguage: e => JS(US(e))
            })
        }
        async provideInlineCompletions(e, t) {
            const {text: n, utf8ByteOffset: a, additionalUtf8ByteOffset: r} = this.computeTextAndOffsets(e, t)
              , s = r + a
              , i = new sd({
                metadata: this.client.getMetadata(this.getIdeInfo()),
                document: {
                    text: n,
                    editorLanguage: US(e),
                    language: JS(US(e)),
                    cursorOffset: BigInt(s),
                    lineEnding: "\n",
                    absoluteUri: "file:///" + this.absolutePath(e)
                },
                editorOptions: {
                    tabSize: BigInt(e.getOptions().tabSize),
                    insertSpaces: e.getOptions().insertSpaces
                }
            });
            var o;
            await (o = this.debounceMs ?? 0,
            new Promise((e => setTimeout(e, o))));
            const m = await this.client.getCompletions(i);
            if (void 0 === m)
                return;
            const c = m.completionItems.map((t => function(e, t, n, a, r) {
                if (!t.completion || !t.range)
                    return;
                const {value: s, utf16Offset: i} = BS(e, n)
                  , o = n.getPositionAt(i + NS(s, Number(t.range.startOffset) - a))
                  , m = n.getPositionAt(i + NS(s, Number(t.range.endOffset) - a))
                  , c = new xS(o,m);
                let u, l = t.completion.text;
                if (r && t.suffix && t.suffix.text.length > 0) {
                    l += t.suffix.text;
                    const e = Number(t.suffix.deltaCursorOffset);
                    u = () => {
                        const t = r.getSelection();
                        if (null === t)
                            return void console.warn("Unexpected, no selection");
                        const a = n.getPositionAt(n.getOffsetAt(t.getPosition()) + e);
                        r.setSelection(new xS(a,a)),
                        r._commandService.executeCommand("editor.action.inlineSuggest.trigger")
                    }
                }
                return {
                    insertText: l,
                    text: l,
                    range: c,
                    command: {
                        id: "codeium.acceptCompletion",
                        title: "Accept Completion",
                        arguments: [t.completion.completionId, u]
                    }
                }
            }(this.monacoSite, t, e, r, this.modelUriToEditor.get(e.uri.toString())))).filter((e => void 0 !== e));
            return chrome.runtime.sendMessage(this.extensionId, {
                type: "success"
            }),
            {
                items: c
            }
        }
        handleItemDidShow() {}
        freeInlineCompletions() {}
        addEditor(e) {
            this.monacoSite !== MS.DATABRICKS && e.updateOptions({
                inlineSuggest: {
                    enabled: !0
                }
            });
            const t = e.getModel()?.uri.toString();
            var n;
            void 0 !== t && this.modelUriToEditor.set(t, e),
            e.onDidChangeModel((t => {
                const n = t.oldModelUrl?.toString();
                void 0 !== n && this.modelUriToEditor.delete(n);
                const a = t.newModelUrl?.toString();
                void 0 !== a && this.modelUriToEditor.set(a, e)
            }
            )),
            this.monacoSite === MS.DEEPNOTE && (e.onKeyDown = (n = e.onKeyDown,
            function(e, t) {
                n.call(this, function(e) {
                    return function(t) {
                        if ("Tab" !== t.browserEvent.key)
                            return e(t)
                    }
                }(e), t)
            }
            ))
        }
        async acceptedLastCompletion(e) {
            await this.client.acceptedLastCompletion(this.getIdeInfo(), e)
        }
    }
    const bS = new URLSearchParams(document.currentScript.src.split("?")[1]).get("id");
    chrome.runtime.sendMessage(bS, {
        type: "success"
    });
    const qS = new Map([[/https:\/\/colab.research\.google\.com\/.*/, MS.COLAB], [/https:\/\/(.*\.)?stackblitz\.com\/.*/, MS.STACKBLITZ], [/https:\/\/(.*\.)?deepnote\.com\/.*/, MS.DEEPNOTE], [/https:\/\/(.*\.)?(databricks\.com|azuredatabricks\.net)\/.*/, MS.DATABRICKS], [/https:\/\/(.*\.)?quadratichq\.com\/.*/, MS.QUADRATIC]])
      , GS = e => Object.defineProperties(window, {
        MonacoEnvironment: {
            get() {
                return void 0 === this._codeium_MonacoEnvironment && (this._codeium_MonacoEnvironment = {
                    globalAPI: !0
                }),
                this._codeium_MonacoEnvironment
            },
            set(e) {
                void 0 !== e && (e.globalAPI = !0),
                this._codeium_MonacoEnvironment = e
            }
        },
        monaco: {
            get() {
                return this._codeium_monaco
            },
            set(t) {
                let n = MS.CUSTOM;
                for (const [e,t] of qS)
                    if (e.test(window.location.href)) {
                        n = t;
                        break
                    }
                this._codeium_monaco = t;
                const a = new FS(bS,n,e);
                t?.languages?.registerInlineCompletionsProvider && setTimeout(( () => {
                    t.languages.registerInlineCompletionsProvider({
                        pattern: "**"
                    }, a),
                    t.editor.registerCommand("codeium.acceptCompletion", ( (e, t, n, r) => {
                        r?.(),
                        a.acceptedLastCompletion(n).catch((e => {
                            console.error(e)
                        }
                        ))
                    }
                    )),
                    t.editor.onDidCreateEditor((e => {
                        a.addEditor(e)
                    }
                    )),
                    console.log("Codeium: Activated Monaco")
                }
                ))
            }
        }
    });
    let HS = !1;
    const vS = (e, t) => {
        const n = JSON.parse(e.innerText);
        n.exposeAppInBrowser = !0,
        e.innerText = JSON.stringify(n),
        HS = !0,
        Object.defineProperty(window, "jupyterapp", {
            get: function() {
                return this._codeium_jupyterapp
            },
            set: function(e) {
                if (e?.version.startsWith("3.")) {
                    const n = kS(bS, e, t);
                    e.registerPlugin(n),
                    e.activatePlugin(n.id).then(( () => {
                        console.log("Codeium: Activated JupyterLab 3.x")
                    }
                    ), (e => {
                        console.error(e)
                    }
                    ))
                } else
                    e?.version.startsWith("4.") ? chrome.runtime.sendMessage(bS, {
                        type: "error",
                        message: "Only JupyterLab 3.x is supported. Use the codeium-jupyter extension for JupyterLab 4"
                    }) : chrome.runtime.sendMessage(bS, {
                        type: "error",
                        message: `Codeium: Unexpected JupyterLab version: ${e?.version ?? "(unknown)"}. Only JupyterLab 3.x is supported`
                    });
                this._codeium_jupyterapp = e
            }
        }),
        Object.defineProperty(window, "jupyterlab", {
            get: function() {
                return this._codeium_jupyterlab
            },
            set: function(e) {
                if (e?.version.startsWith("2.")) {
                    const n = kS(bS, e, t);
                    e.registerPlugin(n),
                    e.activatePlugin(n.id).then(( () => {
                        console.log("Codeium: Activated JupyterLab 2.x")
                    }
                    ), (e => {
                        console.error(e)
                    }
                    ))
                }
                this._codeium_jupyterlab = e
            }
        })
    }
      , VS = [{
        name: "JSFiddle",
        pattern: /https?:\/\/(.*\.)?jsfiddle\.net(\/.*)?/,
        multiplayer: !1
    }, {
        name: "CodePen",
        pattern: /https:\/\/(.*\.)?codepen\.io(\/.*)?/,
        multiplayer: !1
    }, {
        name: "CodeShare",
        pattern: /https:\/\/(.*\.)?codeshare\.io(\/.*)?/,
        multiplayer: !0
    }]
      , YS = (e, t) => Object.defineProperty(window, "CodeMirror", {
        get: function() {
            return this._codeium_CodeMirror
        },
        set: function(n) {
            if (this._codeium_CodeMirror = n,
            !HS)
                if (n?.version?.startsWith("5."))
                    if (Object.prototype.hasOwnProperty.call(this, "Jupyter")) {
                        if (HS = !0,
                        void 0 === e)
                            return void console.warn("Codeium: found no keybindings for Jupyter Notebook");
                        {
                            const a = function(e, t, n, a) {
                                const r = new PS(e,t,n);
                                return r.patchCellKeyEvent(a),
                                r.patchShortcutManagerHandler(),
                                r
                            }(bS, this.Jupyter, e, t);
                            !function(e, t) {
                                e.defineInitHook(t.clearCompletionInitHook())
                            }(n, a.codeMirrorManager),
                            console.log("Codeium: Activating Jupyter Notebook")
                        }
                    } else {
                        let e = !1
                          , a = "";
                        for (const t of VS)
                            if (t.pattern.test(window.location.href)) {
                                a = t.name,
                                HS = !0,
                                e = t.multiplayer;
                                break
                            }
                        HS && (new AS(bS,n,e,t),
                        console.log(`Codeium: Activating CodeMirror Site: ${a}`))
                    }
                else
                    console.warn("Codeium: Codeium doesn't support CodeMirror 6")
        }
    })
      , XS = [{
        pattern: /https:\/\/console\.paperspace\.com\/.*\/notebook\/.*/,
        notebook: !0
    }, {
        pattern: /https?:\/\/www\.codewars\.com(\/.*)?/,
        notebook: !1
    }, {
        pattern: /https:\/\/(.*\.)?github\.com(\/.*)?/,
        notebook: !1
    }]
      , KS = new AS(bS,void 0,!1)
      , WS = KS.editorHook()
      , zS = () => {
        const e = setInterval(( () => {
            if (HS)
                return void clearInterval(e);
            let t = !1;
            for (const e of XS)
                if (e.pattern.test(window.location.href)) {
                    t = e.notebook;
                    break
                }
            const n = new Map;
            for (const e of document.getElementsByClassName("CodeMirror")) {
                const a = e;
                if (void 0 === a.CodeMirror)
                    continue;
                const r = a.CodeMirror;
                WS(r),
                t && n.set(r.getDoc(), e.getBoundingClientRect().top)
            }
            if (t) {
                const e = [...n.entries()].sort(( (e, t) => e[1] - t[1])).map(( ([e]) => e));
                KS.docs = e
            }
        }
        ), 500)
    }
    ;
    Promise.all([async function(e) {
        return await new Promise((t => {
            chrome.runtime.sendMessage(e, {
                type: "jupyter_notebook_allowed_and_keybindings"
            }, (e => {
                t(e)
            }
            ))
        }
        ))
    }(bS), async function(e) {
        return await new Promise((t => {
            chrome.runtime.sendMessage(e, {
                type: "debounce_ms"
            }, (e => {
                t(e)
            }
            ))
        }
        ))
    }(bS)]).then(( ([e,t]) => {
        const n = e.allowed
          , a = e.keyBindings
          , r = t.debounceMs
          , s = ["monaco", "codemirror5", "none"]
          , i = document.querySelector('meta[name="codeium:type"]')
          , o = i?.getAttribute("content")?.split(",").map((e => e.toLowerCase().trim())).filter((e => s.includes(e))) ?? [];
        if (o.includes("none"))
            return;
        const m = document.getElementById("jupyter-config-data");
        if (null === m)
            return o.includes("monaco") && GS(r),
            o.includes("codemirror5") && (YS(a, r),
            zS()),
            0 === o.length && n ? (GS(r),
            YS(a, r),
            void zS()) : void 0;
        vS(m, r)
    }
    ), (e => {
        console.error(e)
    }
    ))
}
)();
